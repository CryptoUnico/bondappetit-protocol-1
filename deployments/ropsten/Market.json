{
  "address": "0x5fE3063Aba92ECe2133B0Ab6bA89433657903989",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_cumulative",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_productToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_uniswapRouter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_priceOracle",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "customer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "buy",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "Buy",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newToken",
          "type": "address"
        }
      ],
      "name": "CumulativeChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newPauser",
          "type": "address"
        }
      ],
      "name": "PauserChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newPriceOracle",
          "type": "address"
        }
      ],
      "name": "PriceOracleChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        }
      ],
      "name": "TokenAllowed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "TokenDenied",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newUniswapRouter",
          "type": "address"
        }
      ],
      "name": "UniswapRouterChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawal",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "PRICE_DECIMALS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REWARD_DECIMALS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        }
      ],
      "name": "allowToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "currency",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "payment",
          "type": "uint256"
        }
      ],
      "name": "buy",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "buyFromETH",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "changeCumulativeToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newPauser",
          "type": "address"
        }
      ],
      "name": "changePauser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_priceOracle",
          "type": "address"
        }
      ],
      "name": "changePriceOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_uniswapRouter",
          "type": "address"
        }
      ],
      "name": "changeUniswapRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cumulative",
      "outputs": [
        {
          "internalType": "contract ERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "denyToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "isAllowedToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pauser",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "currency",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "payment",
          "type": "uint256"
        }
      ],
      "name": "price",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "product",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceOracle",
      "outputs": [
        {
          "internalType": "contract IUniswapAnchoredView",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "productToken",
      "outputs": [
        {
          "internalType": "contract ERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardToken",
      "outputs": [
        {
          "internalType": "contract ERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferProductToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferRewardToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uniswapRouter",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Router02",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf3e7119a61fa08258bd5e8470a46e906889d6ceb9b76db08c1ccad113d0ddb16",
  "receipt": {
    "to": null,
    "from": "0x9403932015576D13Fb26B135ed7a35d5d95C18d4",
    "contractAddress": "0x5fE3063Aba92ECe2133B0Ab6bA89433657903989",
    "transactionIndex": 1,
    "gasUsed": "4211006",
    "logsBloom": "0x
    "blockHash": "0xed40f9e9d589f4bc2b7951ff2b4b7a528842c0ff424538261e3c1f1729fb084c",
    "transactionHash": "0xf3e7119a61fa08258bd5e8470a46e906889d6ceb9b76db08c1ccad113d0ddb16",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 9755052,
        "transactionHash": "0xf3e7119a61fa08258bd5e8470a46e906889d6ceb9b76db08c1ccad113d0ddb16",
        "address": "0x5fE3063Aba92ECe2133B0Ab6bA89433657903989",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000009403932015576d13fb26b135ed7a35d5d95c18d4"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xed40f9e9d589f4bc2b7951ff2b4b7a528842c0ff424538261e3c1f1729fb084c"
      }
    ],
    "blockNumber": 9755052,
    "cumulativeGasUsed": "4249122",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0D9C8723B343A8368BebE0B5E89273fF8D712e3C",
    "0x634d4614f16B12d7dB11Ab47b28202a1983AAD24",
    "0x9747D80cDCE1E595546c6695A01eC73A77c9E7e9",
    "0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D",
    "0xbef4e076a995c784be6094a432b9ca99b7431a3f"
  ],
  "solcInputHash": "ecdf97c618a671f9032b8c6c297396c1",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cumulative\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_productToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniswapRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_priceOracle\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"customer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buy\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"Buy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newToken\",\"type\":\"address\"}],\"name\":\"CumulativeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPauser\",\"type\":\"address\"}],\"name\":\"PauserChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPriceOracle\",\"type\":\"address\"}],\"name\":\"PriceOracleChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"TokenAllowed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"TokenDenied\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newUniswapRouter\",\"type\":\"address\"}],\"name\":\"UniswapRouterChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PRICE_DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARD_DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"allowToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFromETH\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"changeCumulativeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPauser\",\"type\":\"address\"}],\"name\":\"changePauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_priceOracle\",\"type\":\"address\"}],\"name\":\"changePriceOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_uniswapRouter\",\"type\":\"address\"}],\"name\":\"changeUniswapRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cumulative\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"denyToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"isAllowedToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauser\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"}],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"product\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceOracle\",\"outputs\":[{\"internalType\":\"contract IUniswapAnchoredView\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"productToken\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferProductToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapRouter\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowToken(address,string)\":{\"params\":{\"symbol\":\"Symbol target token of price oracle contract.\",\"token\":\"Allowable token.\"}},\"buy(address,uint256)\":{\"params\":{\"currency\":\"Currency token.\",\"payment\":\"Amount of payment.\"},\"returns\":{\"_0\":\"True if success.\"}},\"buyFromETH()\":{\"returns\":{\"_0\":\"True if success.\"}},\"changeCumulativeToken(address,address)\":{\"params\":{\"newToken\":\"Address new cumulative token.\",\"recipient\":\"Address of recipient for withdraw current cumulative balance.\"}},\"changePauser(address)\":{\"params\":{\"newPauser\":\"Address of new pauser account.\"}},\"changePriceOracle(address)\":{\"params\":{\"_priceOracle\":\"Address new price oracle contract.\"}},\"changeUniswapRouter(address)\":{\"params\":{\"_uniswapRouter\":\"Address new uniswap router contract.\"}},\"constructor\":{\"params\":{\"_cumulative\":\"Address of cumulative token.\",\"_priceOracle\":\"Address of Price oracle contract.\",\"_productToken\":\"Address of product token.\",\"_rewardToken\":\"Address of reward token.\",\"_uniswapRouter\":\"Address of Uniswap router contract.\"}},\"denyToken(address)\":{\"params\":{\"token\":\"Denied token.\"}},\"isAllowedToken(address)\":{\"params\":{\"token\":\"Target token.\"},\"returns\":{\"_0\":\"Is target token allowed.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"price(address,uint256)\":{\"params\":{\"currency\":\"Currency token.\",\"payment\":\"Amount of payment.\"},\"returns\":{\"product\":\"Amount of product token.\",\"reward\":\"Amount of reward token.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"transferProductToken(address,uint256)\":{\"params\":{\"amount\":\"Amount of transfered token.\",\"recipient\":\"Address of recipient.\"}},\"transferRewardToken(address,uint256)\":{\"params\":{\"amount\":\"Amount of transfered token.\",\"recipient\":\"Address of recipient.\"}},\"withdraw(address)\":{\"params\":{\"recipient\":\"Recipient of token.\"}}},\"stateVariables\":{\"allowedTokens\":{\"details\":\"Allowed tokens symbols list.\"},\"priceOracle\":{\"details\":\"Address of IUniswapAnchoredView.\"},\"uniswapRouter\":{\"details\":\"Address of UniswapV2Router.\"}},\"version\":1},\"userdoc\":{\"events\":{\"Buy(address,address,uint256,uint256,uint256)\":{\"notice\":\"An event thats emitted when an account buyed token.\"},\"CumulativeChanged(address)\":{\"notice\":\"An event thats emitted when an cumulative token changed.\"},\"PauserChanged(address)\":{\"notice\":\"An event thats emitted when an pauser address changed.\"},\"PriceOracleChanged(address)\":{\"notice\":\"An event thats emitted when an price oracle contract address changed.\"},\"TokenAllowed(address,string)\":{\"notice\":\"An event thats emitted when an token allowed.\"},\"TokenDenied(address)\":{\"notice\":\"An event thats emitted when an token denied.\"},\"UniswapRouterChanged(address)\":{\"notice\":\"An event thats emitted when an uniswap router contract address changed.\"},\"Withdrawal(address,address,uint256)\":{\"notice\":\"An event thats emitted when an cumulative token withdrawal.\"}},\"kind\":\"user\",\"methods\":{\"allowToken(address,string)\":{\"notice\":\"Add token to tokens white list.\"},\"buy(address,uint256)\":{\"notice\":\"Buy token with ERC20.\"},\"buyFromETH()\":{\"notice\":\"Buy token with ETH.\"},\"changeCumulativeToken(address,address)\":{\"notice\":\"Changed cumulative token address.\"},\"changePauser(address)\":{\"notice\":\"Change pauser account.\"},\"changePriceOracle(address)\":{\"notice\":\"Changed price oracle contract address.\"},\"changeUniswapRouter(address)\":{\"notice\":\"Changed uniswap router contract address.\"},\"cumulative()\":{\"notice\":\"Address of cumulative token.\"},\"denyToken(address)\":{\"notice\":\"Remove token from tokens white list.\"},\"pause()\":{\"notice\":\"Triggers stopped state.\"},\"pauser()\":{\"notice\":\"Address that can pause a contract.\"},\"price(address,uint256)\":{\"notice\":\"Get token price.\"},\"productToken()\":{\"notice\":\"Address of product token contract.\"},\"rewardToken()\":{\"notice\":\"Address of reward token contract.\"},\"transferProductToken(address,uint256)\":{\"notice\":\"Transfer product token to recipient.\"},\"transferRewardToken(address,uint256)\":{\"notice\":\"Transfer reward token to recipient.\"},\"unpause()\":{\"notice\":\"Returns to normal state.\"},\"withdraw(address)\":{\"notice\":\"Withdraw cumulative token to address.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Market.sol\":\"Market\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/GSN/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xdb26cbf4d028490f49831a7865c2fe1b28db44b535ca8d343785a3b768aae183\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x4bd6402ca6b3419008c2b482aff54e66836e8cb4eba2680e42ac5884ae6424fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x9a9cf02622cd7a64261b10534fc3260449da25c98c9e96d1b4ae8110a20e5806\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name, string memory symbol) public {\\n        _name = name;\\n        _symbol = symbol;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20};\\n     *\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0x91e0bd6a6762d2a1700dab0849de8422611355100576c4beef1e80d82a4104a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5c26b39d26f7ed489e555d955dcd3e01872972e71fdd1528e93ec164e4f23385\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf3b30f8a49631420635a8c35daacfcaa338012755f18a76fdd118730256f9a27\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies in extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf5fa8cbdffa5ef8be49b246b5628facc30b71707e78a45d80d93b64eff3fe390\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\ncontract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor () internal {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!_paused, \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(_paused, \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x5d1b1dcbc0396f44c1c8d554857f71e3187503bf1e54062bf9ec6782e21f3a08\",\"license\":\"MIT\"},\"contracts/Market.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"./utils/OwnablePausable.sol\\\";\\nimport \\\"./uniswap/IUniswapV2Router02.sol\\\";\\nimport \\\"./uniswap/IUniswapAnchoredView.sol\\\";\\n\\ncontract Market is OwnablePausable {\\n    using SafeMath for uint256;\\n    using SafeERC20 for ERC20;\\n\\n    uint256 public constant PRICE_DECIMALS = 6;\\n\\n    uint256 public constant REWARD_DECIMALS = 12;\\n\\n    /// @notice Address of cumulative token.\\n    ERC20 public cumulative;\\n\\n    /// @notice Address of product token contract.\\n    ERC20 public productToken;\\n\\n    /// @notice Address of reward token contract.\\n    ERC20 public rewardToken;\\n\\n    /// @dev Address of UniswapV2Router.\\n    IUniswapV2Router02 public uniswapRouter;\\n\\n    /// @dev Address of IUniswapAnchoredView.\\n    IUniswapAnchoredView public priceOracle;\\n\\n    /// @dev Allowed tokens symbols list.\\n    mapping(address => string) internal allowedTokens;\\n\\n    /// @notice An event thats emitted when an price oracle contract address changed.\\n    event PriceOracleChanged(address newPriceOracle);\\n\\n    /// @notice An event thats emitted when an uniswap router contract address changed.\\n    event UniswapRouterChanged(address newUniswapRouter);\\n\\n    /// @notice An event thats emitted when an cumulative token changed.\\n    event CumulativeChanged(address newToken);\\n\\n    /// @notice An event thats emitted when an token allowed.\\n    event TokenAllowed(address token, string symbol);\\n\\n    /// @notice An event thats emitted when an token denied.\\n    event TokenDenied(address token);\\n\\n    /// @notice An event thats emitted when an account buyed token.\\n    event Buy(address customer, address token, uint256 amount, uint256 buy, uint256 reward);\\n\\n    /// @notice An event thats emitted when an cumulative token withdrawal.\\n    event Withdrawal(address recipient, address token, uint256 amount);\\n\\n    /**\\n     * @param _cumulative Address of cumulative token.\\n     * @param _productToken Address of product token.\\n     * @param _rewardToken Address of reward token.\\n     * @param _uniswapRouter Address of Uniswap router contract.\\n     * @param _priceOracle Address of Price oracle contract.\\n     */\\n    constructor(\\n        address _cumulative,\\n        address _productToken,\\n        address _rewardToken,\\n        address _uniswapRouter,\\n        address _priceOracle\\n    ) public {\\n        cumulative = ERC20(_cumulative);\\n        productToken = ERC20(_productToken);\\n        rewardToken = ERC20(_rewardToken);\\n        uniswapRouter = IUniswapV2Router02(_uniswapRouter);\\n        priceOracle = IUniswapAnchoredView(_priceOracle);\\n    }\\n\\n    /**\\n     * @notice Changed uniswap router contract address.\\n     * @param _uniswapRouter Address new uniswap router contract.\\n     */\\n    function changeUniswapRouter(address _uniswapRouter) external onlyOwner {\\n        uniswapRouter = IUniswapV2Router02(_uniswapRouter);\\n        emit UniswapRouterChanged(_uniswapRouter);\\n    }\\n\\n    /**\\n     * @notice Changed price oracle contract address.\\n     * @param _priceOracle Address new price oracle contract.\\n     */\\n    function changePriceOracle(address _priceOracle) external onlyOwner {\\n        priceOracle = IUniswapAnchoredView(_priceOracle);\\n        emit PriceOracleChanged(_priceOracle);\\n    }\\n\\n    /**\\n     * @notice Changed cumulative token address.\\n     * @param newToken Address new cumulative token.\\n     * @param recipient Address of recipient for withdraw current cumulative balance.\\n     */\\n    function changeCumulativeToken(address newToken, address recipient) external onlyOwner {\\n        withdraw(recipient);\\n        cumulative = ERC20(newToken);\\n        emit CumulativeChanged(newToken);\\n    }\\n\\n    /**\\n     * @notice Add token to tokens white list.\\n     * @param token Allowable token.\\n     * @param symbol Symbol target token of price oracle contract.\\n     */\\n    function allowToken(address token, string calldata symbol) external onlyOwner {\\n        allowedTokens[token] = symbol;\\n        emit TokenAllowed(token, symbol);\\n    }\\n\\n    /**\\n     * @notice Remove token from tokens white list.\\n     * @param token Denied token.\\n     */\\n    function denyToken(address token) external onlyOwner {\\n        allowedTokens[token] = \\\"\\\";\\n        emit TokenDenied(token);\\n    }\\n\\n    /**\\n     * @param token Target token.\\n     * @return Is target token allowed.\\n     */\\n    function isAllowedToken(address token) public view returns (bool) {\\n        return bytes(allowedTokens[token]).length != 0;\\n    }\\n\\n    /**\\n     * @dev Transfer token to recipient.\\n     * @param from Address of transfered token contract.\\n     * @param recipient Address of recipient.\\n     * @param amount Amount of transfered token.\\n     */\\n    function transfer(\\n        ERC20 from,\\n        address recipient,\\n        uint256 amount\\n    ) internal {\\n        require(recipient != address(0), \\\"Market::transfer: cannot transfer to the zero address\\\");\\n\\n        uint256 currentBalance = from.balanceOf(address(this));\\n        require(amount <= currentBalance, \\\"Market::transfer: not enough tokens\\\");\\n\\n        from.safeTransfer(recipient, amount);\\n    }\\n\\n    /**\\n     * @notice Transfer product token to recipient.\\n     * @param recipient Address of recipient.\\n     * @param amount Amount of transfered token.\\n     */\\n    function transferProductToken(address recipient, uint256 amount) external onlyOwner {\\n        transfer(productToken, recipient, amount);\\n    }\\n\\n    /**\\n     * @notice Transfer reward token to recipient.\\n     * @param recipient Address of recipient.\\n     * @param amount Amount of transfered token.\\n     */\\n    function transferRewardToken(address recipient, uint256 amount) external onlyOwner {\\n        transfer(rewardToken, recipient, amount);\\n    }\\n\\n    /**\\n     * @notice Get token price.\\n     * @param currency Currency token.\\n     * @param payment Amount of payment.\\n     * @return product Amount of product token.\\n     * @return reward Amount of reward token.\\n     */\\n    function price(address currency, uint256 payment) public view returns (uint256 product, uint256 reward) {\\n        require(isAllowedToken(currency), \\\"Market::price: currency not allowed\\\");\\n\\n        uint256 tokenDecimals = ERC20(currency).decimals();\\n        uint256 productDecimals = productToken.decimals();\\n        uint256 tokenPrice = priceOracle.price(allowedTokens[currency]);\\n        uint256 cumulativePrice = priceOracle.price(cumulative.symbol());\\n\\n        product = payment.mul(10**productDecimals.sub(tokenDecimals));\\n        if (address(productToken) != currency) {\\n            product = tokenPrice.mul(10**PRICE_DECIMALS).div(cumulativePrice).mul(payment).div(10**PRICE_DECIMALS).mul(10**productDecimals.sub(tokenDecimals));\\n        }\\n\\n        uint256 productTokenBalance = productToken.balanceOf(address(this));\\n        if (productTokenBalance > 0) {\\n            uint256 rewardTokenBalance = rewardToken.balanceOf(address(this));\\n            reward = product.mul(10**REWARD_DECIMALS).div(productTokenBalance).mul(rewardTokenBalance).div(10**REWARD_DECIMALS);\\n        }\\n    }\\n\\n    /**\\n     * @param currency Currency token.\\n     * @return Pools for each consecutive pair of addresses must exist and have liquidity\\n     */\\n    function _path(address currency) internal view returns (address[] memory) {\\n        address weth = uniswapRouter.WETH();\\n        if (weth == currency) {\\n            address[] memory path = new address[](2);\\n            path[0] = currency;\\n            path[1] = address(cumulative);\\n            return path;\\n        }\\n\\n        address[] memory path = new address[](3);\\n        path[0] = currency;\\n        path[1] = weth;\\n        path[2] = address(cumulative);\\n        return path;\\n    }\\n\\n    /**\\n     * @param currency Currency token.\\n     * @param payment Amount of payment.\\n     * @return Amount cumulative token after swap.\\n     */\\n    function _amountOut(address currency, uint256 payment) internal view returns (uint256) {\\n        uint256[] memory amountsOut = uniswapRouter.getAmountsOut(payment, _path(currency));\\n        require(amountsOut.length != 0, \\\"Market::_amountOut: invalid amounts out length\\\");\\n\\n        return amountsOut[amountsOut.length - 1];\\n    }\\n\\n    /**\\n     * @notice Buy token with ERC20.\\n     * @param currency Currency token.\\n     * @param payment Amount of payment.\\n     * @return True if success.\\n     */\\n    function buy(address currency, uint256 payment) external whenNotPaused returns (bool) {\\n        (uint256 product, uint256 reward) = price(currency, payment);\\n        uint256 productTokenBalance = productToken.balanceOf(address(this));\\n        require(productTokenBalance > 0 && product <= productTokenBalance, \\\"Market::buy: exceeds balance\\\");\\n\\n        ERC20(currency).safeTransferFrom(_msgSender(), address(this), payment);\\n\\n        if (currency != address(cumulative)) {\\n            uint256 amountOut = _amountOut(currency, payment);\\n            require(amountOut != 0, \\\"Market::buy: liquidity pool is empty\\\");\\n\\n            ERC20(currency).safeApprove(address(uniswapRouter), payment);\\n            uniswapRouter.swapExactTokensForTokens(payment, amountOut, _path(currency), address(this), block.timestamp);\\n        }\\n\\n        productToken.safeTransfer(_msgSender(), product);\\n        if (reward > 0) {\\n            rewardToken.safeTransfer(_msgSender(), reward);\\n        }\\n        emit Buy(_msgSender(), currency, payment, product, reward);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Buy token with ETH.\\n     * @return True if success.\\n     */\\n    function buyFromETH() external payable whenNotPaused returns (bool) {\\n        address currency = uniswapRouter.WETH();\\n        uint256 payment = msg.value;\\n\\n        (uint256 product, uint256 reward) = price(currency, payment);\\n        uint256 productTokenBalance = productToken.balanceOf(address(this));\\n        require(product <= productTokenBalance, \\\"Market::buyFromETH: balance is empty\\\");\\n\\n        if (currency != address(cumulative)) {\\n            uint256 amountOut = _amountOut(currency, payment);\\n            require(amountOut != 0, \\\"Market::buyFromETH: liquidity pool is empty\\\");\\n\\n            uniswapRouter.swapExactETHForTokens{value: payment}(amountOut, _path(currency), address(this), block.timestamp);\\n        }\\n\\n        productToken.safeTransfer(_msgSender(), product);\\n        if (reward > 0) {\\n            rewardToken.safeTransfer(_msgSender(), reward);\\n        }\\n        emit Buy(_msgSender(), currency, payment, product, reward);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Withdraw cumulative token to address.\\n     * @param recipient Recipient of token.\\n     */\\n    function withdraw(address recipient) public onlyOwner {\\n        require(recipient != address(0), \\\"Market::withdraw: cannot transfer to the zero address\\\");\\n\\n        uint256 balance = cumulative.balanceOf(address(this));\\n        cumulative.safeTransfer(recipient, balance);\\n\\n        emit Withdrawal(recipient, address(cumulative), balance);\\n    }\\n}\\n\",\"keccak256\":\"0x62224b996e41ada1a3cda4e527776145aa25c6f19f3927ad16576e92bf6451f1\",\"license\":\"MIT\"},\"contracts/uniswap/IUniswapAnchoredView.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\ninterface IUniswapAnchoredView {\\n    function price(string calldata symbol) external view returns (uint);\\n}\",\"keccak256\":\"0x98d0f143da50420219ad221103f1cc333f8d0d2f0af7bf5ad3025d93abf32ebc\",\"license\":\"MIT\"},\"contracts/uniswap/IUniswapV2Router02.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\ninterface IUniswapV2Router02 {\\n    function factory() external pure returns (address);\\n\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountETH,\\n            uint256 liquidity\\n        );\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETH(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactETHForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactETH(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForETH(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapETHForExactTokens(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) external pure returns (uint256 amountB);\\n\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountOut);\\n\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountIn);\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\\n\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountETH);\\n\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable;\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0xe82e348bfca27671354f43c6e0571e23f6d3257cb9221c3757995788cb524d37\",\"license\":\"MIT\"},\"contracts/utils/OwnablePausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\n\\ncontract OwnablePausable is Ownable, Pausable {\\n    /// @notice Address that can pause a contract.\\n    address public pauser;\\n\\n    /// @notice An event thats emitted when an pauser address changed.\\n    event PauserChanged(address newPauser);\\n\\n    constructor() internal {\\n        pauser = owner();\\n    }\\n\\n    /**\\n     * @notice Change pauser account.\\n     * @param newPauser Address of new pauser account.\\n     */\\n    function changePauser(address newPauser) external onlyOwner {\\n        pauser = newPauser;\\n        emit PauserChanged(pauser);\\n    }\\n\\n    /**\\n     * @notice Triggers stopped state.\\n     */\\n    function pause() public virtual {\\n        require(pauser == _msgSender() || owner() == _msgSender(), \\\"OwnablePausable::pause: only pauser and owner must pause contract\\\");\\n        _pause();\\n    }\\n\\n    /**\\n     * @notice Returns to normal state.\\n     */\\n    function unpause() public virtual {\\n        require(pauser == _msgSender() || owner() == _msgSender(), \\\"OwnablePausable::unpause: only pauser and owner must unpause contract\\\");\\n        _unpause();\\n    }\\n}\\n\",\"keccak256\":\"0x865125c578244d8e7240cfe61b8591c6bcc2b05f88ee64aee28fd1ba10f3f4df\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x60806040526004361061019c5760003560e01c80638da5cb5b116100ec578063cbe230c31161008a578063f1a640f811610064578063f1a640f814610839578063f2fde38b14610864578063f6a399e2146108b5578063f7c618c1146109105761019c565b8063cbe230c3146106bb578063cce7ec1314610722578063d55e6494146107935761019c565b8063adc3fa53116100c6578063adc3fa5314610593578063c3370837146105be578063c5ea3d831461060f578063ca9f81ca146106605761019c565b80638da5cb5b1461049b5780639fd0506d146104dc578063ad9b80241461051d5761019c565b806351cff8d911610159578063735de9f711610133578063735de9f7146103e25780637ae176ff146104235780637b3a3195146104645780638456cb59146104845761019c565b806351cff8d91461034d5780635c975abb1461039e578063715018a6146103cb5761019c565b806325b4f65f146101a15780632630c12f146101e25780632ccde94b146102235780632cd271e7146102745780633a3c2da7146102c55780633f4ba83a14610336575b600080fd5b3480156101ad57600080fd5b506101b6610951565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156101ee57600080fd5b506101f7610977565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561022f57600080fd5b506102726004803603602081101561024657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061099d565b005b34801561028057600080fd5b506102c36004803603602081101561029757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610af6565b005b3480156102d157600080fd5b50610334600480360360408110156102e857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610c71565b005b34801561034257600080fd5b5061034b610dd4565b005b34801561035957600080fd5b5061039c6004803603602081101561037057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610ecf565b005b3480156103aa57600080fd5b506103b36111cb565b60405180821515815260200191505060405180910390f35b3480156103d757600080fd5b506103e06111e1565b005b3480156103ee57600080fd5b506103f7611367565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561042f57600080fd5b5061043861138d565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61046c6113b3565b60405180821515815260200191505060405180910390f35b34801561049057600080fd5b506104996119de565b005b3480156104a757600080fd5b506104b0611ad9565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156104e857600080fd5b506104f1611b02565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561052957600080fd5b506105766004803603604081101561054057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611b28565b604051808381526020018281526020019250505060405180910390f35b34801561059f57600080fd5b506105a8612398565b6040518082815260200191505060405180910390f35b3480156105ca57600080fd5b5061060d600480360360208110156105e157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061239d565b005b34801561061b57600080fd5b5061065e6004803603602081101561063257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506124f6565b005b34801561066c57600080fd5b506106b96004803603604081101561068357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612671565b005b3480156106c757600080fd5b5061070a600480360360208110156106de57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061276a565b60405180821515815260200191505060405180910390f35b34801561072e57600080fd5b5061077b6004803603604081101561074557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506127ca565b60405180821515815260200191505060405180910390f35b34801561079f57600080fd5b50610837600480360360408110156107b657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001906401000000008111156107f357600080fd5b82018360208201111561080557600080fd5b8035906020019184600183028401116401000000008311171561082757600080fd5b9091929391929390505050612dfb565b005b34801561084557600080fd5b5061084e612f98565b6040518082815260200191505060405180910390f35b34801561087057600080fd5b506108b36004803603602081101561088757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612f9d565b005b3480156108c157600080fd5b5061090e600480360360408110156108d857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506131a8565b005b34801561091c57600080fd5b506109256132a1565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6109a56132c7565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610a65576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b80600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fb36d86785c7d32b1ad714bb705e00e93eccc37b8cf47549043e61e10908ad25181604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a150565b610afe6132c7565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610bbe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fb80482a293ca2e013eda8683c9bd7fc8347cfdaeea5ede58cba46df502c2a604600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a150565b610c796132c7565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610d39576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b610d4281610ecf565b81600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f211984bb289184fd6dff2b81a63abf6245c2ad65b2509acf4cdff1fcc0a8734c82604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a15050565b610ddc6132c7565b73ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480610e705750610e3a6132c7565b73ffffffffffffffffffffffffffffffffffffffff16610e58611ad9565b73ffffffffffffffffffffffffffffffffffffffff16145b610ec5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260458152602001806146706045913960600191505060405180910390fd5b610ecd6132cf565b565b610ed76132c7565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610f97576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561101d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603581526020018061472f6035913960400191505060405180910390fd5b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156110a857600080fd5b505afa1580156110bc573d6000803e3d6000fd5b505050506040513d60208110156110d257600080fd5b810190808051906020019092919050505090506111328282600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166133c19092919063ffffffff16565b7f2717ead6b9200dd235aad468c9809ea400fe33ac69b5bfaa6d3e90fc922b639882600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683604051808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060405180910390a15050565b60008060149054906101000a900460ff16905090565b6111e96132c7565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146112a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060149054906101000a900460ff1615611437576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f5061757361626c653a207061757365640000000000000000000000000000000081525060200191505060405180910390fd5b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ad5c46486040518163ffffffff1660e01b815260040160206040518083038186803b1580156114a157600080fd5b505afa1580156114b5573d6000803e3d6000fd5b505050506040513d60208110156114cb57600080fd5b8101908080519060200190929190505050905060003490506000806114f08484611b28565b915091506000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561157f57600080fd5b505afa158015611593573d6000803e3d6000fd5b505050506040513d60208110156115a957600080fd5b8101908080519060200190929190505050905080831115611615576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001806147c36024913960400191505060405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16146118975760006116768686613463565b905060008114156116d2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602b8152602001806146b5602b913960400191505060405180910390fd5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637ff36ab5868361171b8a61367e565b30426040518663ffffffff1660e01b815260040180858152602001806020018473ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828103825285818151815260200191508051906020019060200280838360005b8381101561179757808201518184015260208101905061177c565b50505050905001955050505050506000604051808303818588803b1580156117be57600080fd5b505af11580156117d2573d6000803e3d6000fd5b50505050506040513d6000823e3d601f19601f8201168201806040525060208110156117fd57600080fd5b810190808051604051939291908464010000000082111561181d57600080fd5b8382019150602082018581111561183357600080fd5b825186602082028301116401000000008211171561185057600080fd5b8083526020830192505050908051906020019060200280838360005b8381101561188757808201518184015260208101905061186c565b5050505090500160405250505050505b6118eb6118a26132c7565b84600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166133c19092919063ffffffff16565b6000821115611949576119486118ff6132c7565b83600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166133c19092919063ffffffff16565b5b7ef93dbdb72854b6b6fb35433086556f2635fc83c37080c667496fecfa650fb46119716132c7565b86868686604051808673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018381526020018281526020019550505050505060405180910390a160019550505050505090565b6119e66132c7565b73ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480611a7a5750611a446132c7565b73ffffffffffffffffffffffffffffffffffffffff16611a62611ad9565b73ffffffffffffffffffffffffffffffffffffffff16145b611acf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252604181526020018061462f6041913960600191505060405180910390fd5b611ad76139b4565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080611b348461276a565b611b89576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260238152602001806145e66023913960400191505060405180910390fd5b60008473ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015611bd157600080fd5b505afa158015611be5573d6000803e3d6000fd5b505050506040513d6020811015611bfb57600080fd5b810190808051906020019092919050505060ff1690506000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015611c7b57600080fd5b505afa158015611c8f573d6000803e3d6000fd5b505050506040513d6020811015611ca557600080fd5b810190808051906020019092919050505060ff1690506000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fe2c6198600760008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518263ffffffff1660e01b81526004018080602001828103825283818154600181600116156101000203166002900481526020019150805460018160011615610100020316600290048015611dd25780601f10611da757610100808354040283529160200191611dd2565b820191906000526020600020905b815481529060010190602001808311611db557829003601f168201915b50509250505060206040518083038186803b158015611df057600080fd5b505afa158015611e04573d6000803e3d6000fd5b505050506040513d6020811015611e1a57600080fd5b810190808051906020019092919050505090506000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fe2c6198600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b158015611ed557600080fd5b505afa158015611ee9573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506020811015611f1357600080fd5b8101908080516040519392919084640100000000821115611f3357600080fd5b83820191506020820185811115611f4957600080fd5b8251866001820283011164010000000082111715611f6657600080fd5b8083526020830192505050908051906020019080838360005b83811015611f9a578082015181840152602081019050611f7f565b50505050905090810190601f168015611fc75780820380516001836020036101000a031916815260200191505b506040525050506040518263ffffffff1660e01b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561201d578082015181840152602081019050612002565b50505050905090810190601f16801561204a5780820380516001836020036101000a031916815260200191505b509250505060206040518083038186803b15801561206757600080fd5b505afa15801561207b573d6000803e3d6000fd5b505050506040513d602081101561209157600080fd5b810190808051906020019092919050505090506120cc6120ba8585613aa890919063ffffffff16565b600a0a88613af290919063ffffffff16565b95508773ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461219e5761219b6121398585613aa890919063ffffffff16565b600a0a61218d6006600a0a61217f8b612171876121636006600a0a8b613af290919063ffffffff16565b613b7890919063ffffffff16565b613af290919063ffffffff16565b613b7890919063ffffffff16565b613af290919063ffffffff16565b95505b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561222957600080fd5b505afa15801561223d573d6000803e3d6000fd5b505050506040513d602081101561225357600080fd5b81019080805190602001909291905050509050600081111561238c576000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156122fa57600080fd5b505afa15801561230e573d6000803e3d6000fd5b505050506040513d602081101561232457600080fd5b81019080805190602001909291905050509050612388600c600a0a61237a8361236c8661235e600c600a0a8f613af290919063ffffffff16565b613b7890919063ffffffff16565b613af290919063ffffffff16565b613b7890919063ffffffff16565b9650505b50505050509250929050565b600c81565b6123a56132c7565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614612465576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b80600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f0a3776494a324cdd72863deb1475d9eb705db96d66e7e199f3ebe4948343a43881604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a150565b6124fe6132c7565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146125be576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b60405180602001604052806000815250600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090805190602001906126209291906144a4565b507f99141d0e2d4f048b95e099fa59ce3343ad2b2827553ca03a066fdcbfc421dbb181604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a150565b6126796132c7565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614612739576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b612766600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168383613bc2565b5050565b600080600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080546001816001161561010002031660029004905014159050919050565b60008060149054906101000a900460ff161561284e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f5061757361626c653a207061757365640000000000000000000000000000000081525060200191505060405180910390fd5b60008061285b8585611b28565b915091506000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156128ea57600080fd5b505afa1580156128fe573d6000803e3d6000fd5b505050506040513d602081101561291457600080fd5b810190808051906020019092919050505090506000811180156129375750808311155b6129a9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f4d61726b65743a3a6275793a20657863656564732062616c616e63650000000081525060200191505060405180910390fd5b6129dd6129b46132c7565b30878973ffffffffffffffffffffffffffffffffffffffff16613d78909392919063ffffffff16565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614612cb3576000612a3e8787613463565b90506000811415612a9a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001806145c26024913960400191505060405180910390fd5b612ae7600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16878973ffffffffffffffffffffffffffffffffffffffff16613e399092919063ffffffff16565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166338ed17398783612b308b61367e565b30426040518663ffffffff1660e01b815260040180868152602001858152602001806020018473ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828103825285818151815260200191508051906020019060200280838360005b83811015612bb2578082015181840152602081019050612b97565b505050509050019650505050505050600060405180830381600087803b158015612bdb57600080fd5b505af1158015612bef573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506020811015612c1957600080fd5b8101908080516040519392919084640100000000821115612c3957600080fd5b83820191506020820185811115612c4f57600080fd5b8251866020820283011164010000000082111715612c6c57600080fd5b8083526020830192505050908051906020019060200280838360005b83811015612ca3578082015181840152602081019050612c88565b5050505090500160405250505050505b612d07612cbe6132c7565b84600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166133c19092919063ffffffff16565b6000821115612d6557612d64612d1b6132c7565b83600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166133c19092919063ffffffff16565b5b7ef93dbdb72854b6b6fb35433086556f2635fc83c37080c667496fecfa650fb4612d8d6132c7565b87878686604051808673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018381526020018281526020019550505050505060405180910390a16001935050505092915050565b612e036132c7565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614612ec3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b8181600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209190612f11929190614524565b507f7e0e5645cdb1c97ffe3d599ebe4d4a327d4b5c9e9374f01018604e37d310e36c838383604051808473ffffffffffffffffffffffffffffffffffffffff168152602001806020018281038252848482818152602001925080828437600081840152601f19601f82011690508083019250505094505050505060405180910390a1505050565b600681565b612fa56132c7565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614613065576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156130eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806146096026913960400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6131b06132c7565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614613270576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b61329d600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168383613bc2565b5050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600033905090565b600060149054906101000a900460ff16613351576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f5061757361626c653a206e6f742070617573656400000000000000000000000081525060200191505060405180910390fd5b60008060146101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6133946132c7565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a1565b61345e8363a9059cbb60e01b8484604051602401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050613ffe565b505050565b60006060600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d06ca61f846134af8761367e565b6040518363ffffffff1660e01b81526004018083815260200180602001828103825283818151815260200191508051906020019060200280838360005b838110156135075780820151818401526020810190506134ec565b50505050905001935050505060006040518083038186803b15801561352b57600080fd5b505afa15801561353f573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250602081101561356957600080fd5b810190808051604051939291908464010000000082111561358957600080fd5b8382019150602082018581111561359f57600080fd5b82518660208202830111640100000000821117156135bc57600080fd5b8083526020830192505050908051906020019060200280838360005b838110156135f35780820151818401526020810190506135d8565b50505050905001604052505050905060008151141561365d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180614701602e913960400191505060405180910390fd5b8060018251038151811061366d57fe5b602002602001015191505092915050565b60606000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ad5c46486040518163ffffffff1660e01b815260040160206040518083038186803b1580156136ea57600080fd5b505afa1580156136fe573d6000803e3d6000fd5b505050506040513d602081101561371457600080fd5b810190808051906020019092919050505090508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415613863576060600267ffffffffffffffff8111801561377557600080fd5b506040519080825280602002602001820160405280156137a45781602001602082028036833780820191505090505b50905083816000815181106137b557fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160018151811061381f57fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505080925050506139af565b6060600367ffffffffffffffff8111801561387d57600080fd5b506040519080825280602002602001820160405280156138ac5781602001602082028036833780820191505090505b50905083816000815181106138bd57fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050818160018151811061390557fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160028151811061396f57fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505080925050505b919050565b600060149054906101000a900460ff1615613a37576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f5061757361626c653a207061757365640000000000000000000000000000000081525060200191505060405180910390fd5b6001600060146101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258613a7b6132c7565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a1565b6000613aea83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506140ed565b905092915050565b600080831415613b055760009050613b72565b6000828402905082848281613b1657fe5b0414613b6d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806146e06021913960400191505060405180910390fd5b809150505b92915050565b6000613bba83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506141ad565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415613c48576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260358152602001806147646035913960400191505060405180910390fd5b60008373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015613cb157600080fd5b505afa158015613cc5573d6000803e3d6000fd5b505050506040513d6020811015613cdb57600080fd5b8101908080519060200190929190505050905080821115613d47576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260238152602001806147e76023913960400191505060405180910390fd5b613d7283838673ffffffffffffffffffffffffffffffffffffffff166133c19092919063ffffffff16565b50505050565b613e33846323b872dd60e01b858585604051602401808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050613ffe565b50505050565b6000811480613f07575060008373ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30856040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1681526020019250505060206040518083038186803b158015613eca57600080fd5b505afa158015613ede573d6000803e3d6000fd5b505050506040513d6020811015613ef457600080fd5b8101908080519060200190929190505050145b613f5c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603681526020018061480a6036913960400191505060405180910390fd5b613ff98363095ea7b360e01b8484604051602401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050613ffe565b505050565b6060614060826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166142739092919063ffffffff16565b90506000815111156140e85780806020019051602081101561408157600080fd5b81019080805190602001909291905050506140e7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a815260200180614799602a913960400191505060405180910390fd5b5b505050565b600083831115829061419a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561415f578082015181840152602081019050614144565b50505050905090810190601f16801561418c5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060008385039050809150509392505050565b60008083118290614259576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561421e578082015181840152602081019050614203565b50505050905090810190601f16801561424b5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600083858161426557fe5b049050809150509392505050565b6060614282848460008561428b565b90509392505050565b606061429685614491565b614308576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000081525060200191505060405180910390fd5b600060608673ffffffffffffffffffffffffffffffffffffffff1685876040518082805190602001908083835b602083106143585780518252602082019150602081019050602083039250614335565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d80600081146143ba576040519150601f19603f3d011682016040523d82523d6000602084013e6143bf565b606091505b509150915081156143d4578092505050614489565b6000815111156143e75780518082602001fd5b836040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561444e578082015181840152602081019050614433565b50505050905090810190601f16801561447b5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b949350505050565b600080823b905060008111915050919050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106144e557805160ff1916838001178555614513565b82800160010185558215614513579182015b828111156145125782518255916020019190600101906144f7565b5b50905061452091906145a4565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061456557803560ff1916838001178555614593565b82800160010185558215614593579182015b82811115614592578235825591602001919060010190614577565b5b5090506145a091906145a4565b5090565b5b808211156145bd5760008160009055506001016145a5565b509056fe4d61726b65743a3a6275793a206c697175696469747920706f6f6c20697320656d7074794d61726b65743a3a70726963653a2063757272656e6379206e6f7420616c6c6f7765644f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573734f776e61626c655061757361626c653a3a70617573653a206f6e6c792070617573657220616e64206f776e6572206d75737420706175736520636f6e74726163744f776e61626c655061757361626c653a3a756e70617573653a206f6e6c792070617573657220616e64206f776e6572206d75737420756e706175736520636f6e74726163744d61726b65743a3a62757946726f6d4554483a206c697175696469747920706f6f6c20697320656d707479536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774d61726b65743a3a5f616d6f756e744f75743a20696e76616c696420616d6f756e7473206f7574206c656e6774684d61726b65743a3a77697468647261773a2063616e6e6f74207472616e7366657220746f20746865207a65726f20616464726573734d61726b65743a3a7472616e736665723a2063616e6e6f74207472616e7366657220746f20746865207a65726f20616464726573735361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565644d61726b65743a3a62757946726f6d4554483a2062616c616e636520697320656d7074794d61726b65743a3a7472616e736665723a206e6f7420656e6f75676820746f6b656e735361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365a2646970667358221220fa8c5a6715bc3298482c6bfdf8c7640a7c0358741c1564440a8575e8d7dea8fb64736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowToken(address,string)": {
        "params": {
          "symbol": "Symbol target token of price oracle contract.",
          "token": "Allowable token."
        }
      },
      "buy(address,uint256)": {
        "params": {
          "currency": "Currency token.",
          "payment": "Amount of payment."
        },
        "returns": {
          "_0": "True if success."
        }
      },
      "buyFromETH()": {
        "returns": {
          "_0": "True if success."
        }
      },
      "changeCumulativeToken(address,address)": {
        "params": {
          "newToken": "Address new cumulative token.",
          "recipient": "Address of recipient for withdraw current cumulative balance."
        }
      },
      "changePauser(address)": {
        "params": {
          "newPauser": "Address of new pauser account."
        }
      },
      "changePriceOracle(address)": {
        "params": {
          "_priceOracle": "Address new price oracle contract."
        }
      },
      "changeUniswapRouter(address)": {
        "params": {
          "_uniswapRouter": "Address new uniswap router contract."
        }
      },
      "constructor": {
        "params": {
          "_cumulative": "Address of cumulative token.",
          "_priceOracle": "Address of Price oracle contract.",
          "_productToken": "Address of product token.",
          "_rewardToken": "Address of reward token.",
          "_uniswapRouter": "Address of Uniswap router contract."
        }
      },
      "denyToken(address)": {
        "params": {
          "token": "Denied token."
        }
      },
      "isAllowedToken(address)": {
        "params": {
          "token": "Target token."
        },
        "returns": {
          "_0": "Is target token allowed."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "price(address,uint256)": {
        "params": {
          "currency": "Currency token.",
          "payment": "Amount of payment."
        },
        "returns": {
          "product": "Amount of product token.",
          "reward": "Amount of reward token."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "transferProductToken(address,uint256)": {
        "params": {
          "amount": "Amount of transfered token.",
          "recipient": "Address of recipient."
        }
      },
      "transferRewardToken(address,uint256)": {
        "params": {
          "amount": "Amount of transfered token.",
          "recipient": "Address of recipient."
        }
      },
      "withdraw(address)": {
        "params": {
          "recipient": "Recipient of token."
        }
      }
    },
    "stateVariables": {
      "allowedTokens": {
        "details": "Allowed tokens symbols list."
      },
      "priceOracle": {
        "details": "Address of IUniswapAnchoredView."
      },
      "uniswapRouter": {
        "details": "Address of UniswapV2Router."
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "Buy(address,address,uint256,uint256,uint256)": {
        "notice": "An event thats emitted when an account buyed token."
      },
      "CumulativeChanged(address)": {
        "notice": "An event thats emitted when an cumulative token changed."
      },
      "PauserChanged(address)": {
        "notice": "An event thats emitted when an pauser address changed."
      },
      "PriceOracleChanged(address)": {
        "notice": "An event thats emitted when an price oracle contract address changed."
      },
      "TokenAllowed(address,string)": {
        "notice": "An event thats emitted when an token allowed."
      },
      "TokenDenied(address)": {
        "notice": "An event thats emitted when an token denied."
      },
      "UniswapRouterChanged(address)": {
        "notice": "An event thats emitted when an uniswap router contract address changed."
      },
      "Withdrawal(address,address,uint256)": {
        "notice": "An event thats emitted when an cumulative token withdrawal."
      }
    },
    "kind": "user",
    "methods": {
      "allowToken(address,string)": {
        "notice": "Add token to tokens white list."
      },
      "buy(address,uint256)": {
        "notice": "Buy token with ERC20."
      },
      "buyFromETH()": {
        "notice": "Buy token with ETH."
      },
      "changeCumulativeToken(address,address)": {
        "notice": "Changed cumulative token address."
      },
      "changePauser(address)": {
        "notice": "Change pauser account."
      },
      "changePriceOracle(address)": {
        "notice": "Changed price oracle contract address."
      },
      "changeUniswapRouter(address)": {
        "notice": "Changed uniswap router contract address."
      },
      "cumulative()": {
        "notice": "Address of cumulative token."
      },
      "denyToken(address)": {
        "notice": "Remove token from tokens white list."
      },
      "pause()": {
        "notice": "Triggers stopped state."
      },
      "pauser()": {
        "notice": "Address that can pause a contract."
      },
      "price(address,uint256)": {
        "notice": "Get token price."
      },
      "productToken()": {
        "notice": "Address of product token contract."
      },
      "rewardToken()": {
        "notice": "Address of reward token contract."
      },
      "transferProductToken(address,uint256)": {
        "notice": "Transfer product token to recipient."
      },
      "transferRewardToken(address,uint256)": {
        "notice": "Transfer reward token to recipient."
      },
      "unpause()": {
        "notice": "Returns to normal state."
      },
      "withdraw(address)": {
        "notice": "Withdraw cumulative token to address."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 30,
        "contract": "contracts/Market.sol:Market",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1806,
        "contract": "contracts/Market.sol:Market",
        "label": "_paused",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 13251,
        "contract": "contracts/Market.sol:Market",
        "label": "pauser",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 6091,
        "contract": "contracts/Market.sol:Market",
        "label": "cumulative",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(ERC20)907"
      },
      {
        "astId": 6094,
        "contract": "contracts/Market.sol:Market",
        "label": "productToken",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(ERC20)907"
      },
      {
        "astId": 6097,
        "contract": "contracts/Market.sol:Market",
        "label": "rewardToken",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(ERC20)907"
      },
      {
        "astId": 6100,
        "contract": "contracts/Market.sol:Market",
        "label": "uniswapRouter",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IUniswapV2Router02)13096"
      },
      {
        "astId": 6103,
        "contract": "contracts/Market.sol:Market",
        "label": "priceOracle",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(IUniswapAnchoredView)12401"
      },
      {
        "astId": 6108,
        "contract": "contracts/Market.sol:Market",
        "label": "allowedTokens",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_string_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ERC20)907": {
        "encoding": "inplace",
        "label": "contract ERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IUniswapAnchoredView)12401": {
        "encoding": "inplace",
        "label": "contract IUniswapAnchoredView",
        "numberOfBytes": "20"
      },
      "t_contract(IUniswapV2Router02)13096": {
        "encoding": "inplace",
        "label": "contract IUniswapV2Router02",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      }
    }
  }
}