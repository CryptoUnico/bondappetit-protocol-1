{
  "address": "0x25E3322B599c7ECf76bB48a77073BBd5cf105aa2",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "periodId",
          "type": "uint256"
        }
      ],
      "name": "Locked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newPauser",
          "type": "address"
        }
      ],
      "name": "PauserChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "periodId",
          "type": "uint256"
        }
      ],
      "name": "Revoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "periodId",
          "type": "uint256"
        }
      ],
      "name": "Withdrawal",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newPauser",
          "type": "address"
        }
      ],
      "name": "changePauser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getParticipants",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "info",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "date",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "withdrawal",
              "type": "bool"
            }
          ],
          "internalType": "struct Vesting.Period[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "date",
          "type": "uint256"
        }
      ],
      "name": "lock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxPeriodsPerRecipient",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pauser",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "periodId",
          "type": "uint256"
        }
      ],
      "name": "revoke",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract ERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "periodId",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe68bec947733d46807edf34d8bc9082778cebeb5387b3355f3b6c308aa2d8b78",
  "receipt": {
    "to": null,
    "from": "0x9403932015576D13Fb26B135ed7a35d5d95C18d4",
    "contractAddress": "0x25E3322B599c7ECf76bB48a77073BBd5cf105aa2",
    "transactionIndex": 0,
    "gasUsed": "2270224",
    "logsBloom": "0x
    "blockHash": "0x46a1178925de62defc46a519efd4c1d6d51fe36d6996fef3d76c7a769a558280",
    "transactionHash": "0xe68bec947733d46807edf34d8bc9082778cebeb5387b3355f3b6c308aa2d8b78",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 9535304,
        "transactionHash": "0xe68bec947733d46807edf34d8bc9082778cebeb5387b3355f3b6c308aa2d8b78",
        "address": "0x25E3322B599c7ECf76bB48a77073BBd5cf105aa2",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000009403932015576d13fb26b135ed7a35d5d95c18d4"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x46a1178925de62defc46a519efd4c1d6d51fe36d6996fef3d76c7a769a558280"
      }
    ],
    "blockNumber": 9535304,
    "cumulativeGasUsed": "2270224",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xd1bBEe39864513C4059Aca4340de74A47C9D1572"
  ],
  "solcInputHash": "16a5cdff6144b8dfd8c7db1f0d40ee55",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"periodId\",\"type\":\"uint256\"}],\"name\":\"Locked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPauser\",\"type\":\"address\"}],\"name\":\"PauserChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"periodId\",\"type\":\"uint256\"}],\"name\":\"Revoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"periodId\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPauser\",\"type\":\"address\"}],\"name\":\"changePauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getParticipants\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"info\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"withdrawal\",\"type\":\"bool\"}],\"internalType\":\"struct Vesting.Period[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPeriodsPerRecipient\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauser\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"periodId\",\"type\":\"uint256\"}],\"name\":\"revoke\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"periodId\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"changePauser(address)\":{\"params\":{\"newPauser\":\"Address of new pauser account.\"}},\"constructor\":{\"params\":{\"_token\":\"Address of vesting token contract.\"}},\"getParticipants()\":{\"returns\":{\"_0\":\"Participants addresses.\"}},\"info(address)\":{\"params\":{\"recipient\":\"Recipient address.\"},\"returns\":{\"_0\":\"Recipient periods list.\"}},\"lock(address,uint256,uint256)\":{\"params\":{\"amount\":\"Reward amount.\",\"date\":\"Date of unlockd period.\",\"recipient\":\"Recipient of reward.\"},\"returns\":{\"_0\":\"Added period identifier.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"revoke(address,uint256)\":{\"params\":{\"periodId\":\"Period identifier.\",\"recipient\":\"Recipient of reward.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdraw(uint256)\":{\"params\":{\"periodId\":\"Target period identifier.\"}}},\"stateVariables\":{\"currentPeriod\":{\"details\":\"Index last period.\"},\"participants\":{\"details\":\"Participants list.\"},\"periods\":{\"details\":\"All registered periods.\"},\"periodsIndex\":{\"details\":\"Period identifiers index.\"}},\"version\":1},\"userdoc\":{\"events\":{\"Locked(uint256)\":{\"notice\":\"An event emitted when locking a period.\"},\"PauserChanged(address)\":{\"notice\":\"An event thats emitted when an pauser address changed.\"},\"Revoked(uint256)\":{\"notice\":\"An event emitted when revoked a period.\"},\"Withdrawal(address,uint256)\":{\"notice\":\"An event emitted when withdrawal a period.\"}},\"kind\":\"user\",\"methods\":{\"changePauser(address)\":{\"notice\":\"Change pauser account.\"},\"getParticipants()\":{\"notice\":\"Return all participants addresses.\"},\"info(address)\":{\"notice\":\"Get information of period.\"},\"lock(address,uint256,uint256)\":{\"notice\":\"Add new period.\"},\"maxPeriodsPerRecipient()\":{\"notice\":\"The number of periods for a per recipient.\"},\"pause()\":{\"notice\":\"Triggers stopped state.\"},\"pauser()\":{\"notice\":\"Address that can pause a contract.\"},\"revoke(address,uint256)\":{\"notice\":\"Revoke period.\"},\"token()\":{\"notice\":\"Address of vesting token.\"},\"unpause()\":{\"notice\":\"Returns to normal state.\"},\"withdraw(uint256)\":{\"notice\":\"Withdraw reward.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Vesting.sol\":\"Vesting\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/GSN/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xdb26cbf4d028490f49831a7865c2fe1b28db44b535ca8d343785a3b768aae183\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x4bd6402ca6b3419008c2b482aff54e66836e8cb4eba2680e42ac5884ae6424fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x9a9cf02622cd7a64261b10534fc3260449da25c98c9e96d1b4ae8110a20e5806\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name, string memory symbol) public {\\n        _name = name;\\n        _symbol = symbol;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20};\\n     *\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0x91e0bd6a6762d2a1700dab0849de8422611355100576c4beef1e80d82a4104a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5c26b39d26f7ed489e555d955dcd3e01872972e71fdd1528e93ec164e4f23385\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf3b30f8a49631420635a8c35daacfcaa338012755f18a76fdd118730256f9a27\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies in extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf5fa8cbdffa5ef8be49b246b5628facc30b71707e78a45d80d93b64eff3fe390\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.0.0, only sets of type `address` (`AddressSet`) and `uint256`\\n * (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint256(_at(set._inner, index)));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0xb2a11b236f073662f5a196995863f51c11d006bf7c3de158b316dfa1506c4b79\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\ncontract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor () internal {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!_paused, \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(_paused, \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x5d1b1dcbc0396f44c1c8d554857f71e3187503bf1e54062bf9ec6782e21f3a08\",\"license\":\"MIT\"},\"contracts/Vesting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"./utils/OwnablePausable.sol\\\";\\n\\ncontract Vesting is OwnablePausable {\\n    using SafeMath for uint256;\\n    using SafeERC20 for ERC20;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    /// @notice The number of periods for a per recipient.\\n    function maxPeriodsPerRecipient() public pure returns (uint256) {\\n        return 5;\\n    } // 5 perios per recipient.\\n\\n    /// @notice Address of vesting token.\\n    ERC20 public token;\\n\\n    struct Period {\\n        // Identifier.\\n        uint256 id;\\n        // Reward amount.\\n        uint256 amount;\\n        // Unlockd date.\\n        uint256 date;\\n        // Reward withdrawal flag.\\n        bool withdrawal;\\n    }\\n\\n    /// @dev Index last period.\\n    uint256 internal currentPeriod = 0;\\n\\n    /// @dev Participants list.\\n    EnumerableSet.AddressSet internal participants;\\n\\n    /// @dev All registered periods.\\n    mapping(address => mapping(uint256 => Period)) internal periods;\\n\\n    /// @dev Period identifiers index.\\n    mapping(address => uint256[]) internal periodsIndex;\\n\\n    /// @notice An event emitted when locking a period.\\n    event Locked(uint256 periodId);\\n\\n    /// @notice An event emitted when revoked a period.\\n    event Revoked(uint256 periodId);\\n\\n    /// @notice An event emitted when withdrawal a period.\\n    event Withdrawal(address recipient, uint256 periodId);\\n\\n    /**\\n     * @param _token Address of vesting token contract.\\n     */\\n    constructor(address _token) public {\\n        token = ERC20(_token);\\n    }\\n\\n    /**\\n     * @notice Add new period.\\n     * @param recipient Recipient of reward.\\n     * @param amount Reward amount.\\n     * @param date Date of unlockd period.\\n     * @return Added period identifier.\\n     */\\n    function lock(\\n        address recipient,\\n        uint256 amount,\\n        uint256 date\\n    ) external onlyOwner returns (uint256) {\\n        require(periodsIndex[recipient].length < maxPeriodsPerRecipient(), \\\"Vesting::lock: too many periods\\\");\\n\\n        token.safeTransferFrom(_msgSender(), address(this), amount);\\n\\n        currentPeriod += 1;\\n        participants.add(recipient);\\n        periods[recipient][currentPeriod] = Period(currentPeriod, amount, date, false);\\n        periodsIndex[recipient].push(currentPeriod);\\n        emit Locked(currentPeriod);\\n\\n        return currentPeriod;\\n    }\\n\\n    /**\\n     * @notice Revoke period.\\n     * @param recipient Recipient of reward.\\n     * @param periodId Period identifier.\\n     */\\n    function revoke(address recipient, uint256 periodId) external onlyOwner {\\n        Period storage period = periods[recipient][periodId];\\n        require(!period.withdrawal, \\\"Vesting::revoke: already withdraw\\\");\\n\\n        address owner = _msgSender();\\n        uint256 amount = period.amount;\\n        period.amount = 0;\\n        token.safeTransfer(owner, amount);\\n\\n        emit Revoked(periodId);\\n    }\\n\\n    /**\\n     * @notice Return all participants addresses.\\n     * @return Participants addresses.\\n     */\\n    function getParticipants() external view returns (address[] memory) {\\n        address[] memory result = new address[](participants.length());\\n\\n        for (uint256 i = 0; i < participants.length(); i++) {\\n            result[i] = participants.at(i);\\n        }\\n\\n        return result;\\n    }\\n\\n    /**\\n     * @notice Get information of period.\\n     * @param recipient Recipient address.\\n     * @return Recipient periods list.\\n     */\\n    function info(address recipient) external view returns (Period[] memory) {\\n        Period[] memory result = new Period[](periodsIndex[recipient].length);\\n\\n        for (uint256 i = 0; i < periodsIndex[recipient].length; i++) {\\n            uint256 periodId = periodsIndex[recipient][i];\\n\\n            result[i] = periods[recipient][periodId];\\n        }\\n\\n        return result;\\n    }\\n\\n    /**\\n     * @notice Withdraw reward.\\n     * @param periodId Target period identifier.\\n     */\\n    function withdraw(uint256 periodId) external whenNotPaused {\\n        address recipient = _msgSender();\\n        Period storage period = periods[recipient][periodId];\\n        require(period.amount > 0, \\\"Vesting::withdraw: period is empty\\\");\\n        require(!period.withdrawal, \\\"Vesting::withdraw: already withdraw\\\");\\n        require(block.timestamp > period.date, \\\"Vesting::withdraw: access denied\\\");\\n\\n        period.withdrawal = true;\\n        token.safeTransfer(recipient, period.amount);\\n        emit Withdrawal(recipient, periodId);\\n    }\\n}\\n\",\"keccak256\":\"0x537f530830f58923177e132114510d33bd8b4f6feb4b3465296d67eecfb8b758\",\"license\":\"MIT\"},\"contracts/utils/OwnablePausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\n\\ncontract OwnablePausable is Ownable, Pausable {\\n    /// @notice Address that can pause a contract.\\n    address public pauser;\\n\\n    /// @notice An event thats emitted when an pauser address changed.\\n    event PauserChanged(address newPauser);\\n\\n    constructor() internal {\\n        pauser = owner();\\n    }\\n\\n    /**\\n     * @notice Change pauser account.\\n     * @param newPauser Address of new pauser account.\\n     */\\n    function changePauser(address newPauser) external onlyOwner {\\n        pauser = newPauser;\\n        emit PauserChanged(pauser);\\n    }\\n\\n    /**\\n     * @notice Triggers stopped state.\\n     */\\n    function pause() public virtual {\\n        require(pauser == _msgSender() || owner() == _msgSender(), \\\"OwnablePausable::pause: only pauser and owner must pause contract\\\");\\n        _pause();\\n    }\\n\\n    /**\\n     * @notice Returns to normal state.\\n     */\\n    function unpause() public virtual {\\n        require(pauser == _msgSender() || owner() == _msgSender(), \\\"OwnablePausable::unpause: only pauser and owner must unpause contract\\\");\\n        _unpause();\\n    }\\n}\\n\",\"keccak256\":\"0x865125c578244d8e7240cfe61b8591c6bcc2b05f88ee64aee28fd1ba10f3f4df\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405260006003553480156200001657600080fd5b50604051620029563803806200295683398181016040528101906200003c9190620001e6565b60006200004e6200019e60201b60201c565b9050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35060008060146101000a81548160ff02191690831515021790555062000116620001a660201b60201c565b600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000260565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600081519050620001e08162000246565b92915050565b600060208284031215620001f957600080fd5b60006200020984828501620001cf565b91505092915050565b60006200021f8262000226565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b620002518162000212565b81146200025d57600080fd5b50565b6126e680620002706000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c8063715018a611610097578063e2ab691d11610066578063e2ab691d14610216578063eac449d914610246578063f2fde38b14610262578063fc0c546a1461027e576100f5565b8063715018a6146101c65780638456cb59146101d05780638da5cb5b146101da5780639fd0506d146101f8576100f5565b80633f4ba83a116100d35780633f4ba83a1461016257806351c2c1cc1461016c5780635aa68ac01461018a5780635c975abb146101a8576100f5565b80630aae7a6b146100fa5780632cd271e71461012a5780632e1a7d4d14610146575b600080fd5b610114600480360381019061010f9190611998565b61029c565b604051610121919061228c565b60405180910390f35b610144600480360381019061013f9190611998565b61049e565b005b610160600480360381019061015b9190611a75565b6105d0565b005b61016a61080b565b005b6101746108f0565b60405161018191906124c6565b60405180910390f35b6101926108f9565b60405161019f919061226a565b60405180910390f35b6101b06109d1565b6040516101bd91906122ae565b60405180910390f35b6101ce6109e7565b005b6101d8610b3a565b005b6101e2610c1f565b6040516101ef91906121d4565b60405180910390f35b610200610c48565b60405161020d91906121d4565b60405180910390f35b610230600480360381019061022b91906119fd565b610c6e565b60405161023d91906124c6565b60405180910390f35b610260600480360381019061025b91906119c1565b610f72565b005b61027c60048036038101906102779190611998565b611157565b005b610286611319565b60405161029391906122c9565b60405180910390f35b606080600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054905067ffffffffffffffff811180156102f857600080fd5b5060405190808252806020026020018201604052801561033257816020015b61031f61192f565b8152602001906001900390816103175790505b50905060005b600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050811015610494576000600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002082815481106103ce57fe5b90600052602060002001549050600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008281526020019081526020016000206040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820160009054906101000a900460ff16151515158152505083838151811061047b57fe5b6020026020010181905250508080600101915050610338565b5080915050919050565b6104a661133f565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610533576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161052a90612426565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fb80482a293ca2e013eda8683c9bd7fc8347cfdaeea5ede58cba46df502c2a604600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040516105c591906121d4565b60405180910390a150565b600060149054906101000a900460ff1615610620576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610617906123c6565b60405180910390fd5b600061062a61133f565b90506000600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000848152602001908152602001600020905060008160010154116106c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106be906123e6565b60405180910390fd5b8060030160009054906101000a900460ff1615610719576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610710906124a6565b60405180910390fd5b8060020154421161075f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161075690612406565b60405180910390fd5b60018160030160006101000a81548160ff0219169083151502179055506107cd828260010154600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166113479092919063ffffffff16565b7f7fcf532c15f0a6db0bd6d0e038bea71d30d808c7d98cb3bf7268a95bf5081b6582846040516107fe929190612241565b60405180910390a1505050565b61081361133f565b73ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614806108a7575061087161133f565b73ffffffffffffffffffffffffffffffffffffffff1661088f610c1f565b73ffffffffffffffffffffffffffffffffffffffff16145b6108e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108dd906123a6565b60405180910390fd5b6108ee6113cd565b565b60006005905090565b6060806109066004611476565b67ffffffffffffffff8111801561091c57600080fd5b5060405190808252806020026020018201604052801561094b5781602001602082028036833780820191505090505b50905060005b61095b6004611476565b8110156109c95761097681600461148b90919063ffffffff16565b82828151811061098257fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508080600101915050610951565b508091505090565b60008060149054906101000a900460ff16905090565b6109ef61133f565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610a7c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a7390612426565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b610b4261133f565b73ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480610bd65750610ba061133f565b73ffffffffffffffffffffffffffffffffffffffff16610bbe610c1f565b73ffffffffffffffffffffffffffffffffffffffff16145b610c15576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c0c90612386565b60405180910390fd5b610c1d6114a5565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000610c7861133f565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610d05576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cfc90612426565b60405180910390fd5b610d0d6108f0565b600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054905010610d90576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d8790612486565b60405180910390fd5b610de6610d9b61133f565b3085600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16611550909392919063ffffffff16565b6001600360008282540192505081905550610e0b8460046115d990919063ffffffff16565b506040518060800160405280600354815260200184815260200183815260200160001515815250600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600354815260200190815260200160002060008201518160000155602082015181600101556040820151816002015560608201518160030160006101000a81548160ff021916908315150217905550905050600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060035490806001815401808255809150506001900390600052602060002001600090919091909150557f032bc66be43dbccb7487781d168eb7bda224628a3b2c3388bdf69b532a3a1611600354604051610f5e91906124c6565b60405180910390a160035490509392505050565b610f7a61133f565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611007576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ffe90612426565b60405180910390fd5b6000600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002090508060030160009054906101000a900460ff16156110ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110a490612366565b60405180910390fd5b60006110b761133f565b9050600082600101549050600083600101819055506111198282600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166113479092919063ffffffff16565b7f61e27b0bfd8e18e6b92ec32ce1c28bb698d27bfe93e84c7e94d4db0a3135c7608460405161114891906124c6565b60405180910390a15050505050565b61115f61133f565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146111ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111e390612426565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561125c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161125390612346565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600033905090565b6113c88363a9059cbb60e01b8484604051602401611366929190612241565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611609565b505050565b600060149054906101000a900460ff1661141c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161141390612326565b60405180910390fd5b60008060146101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa61145f61133f565b60405161146c91906121ef565b60405180910390a1565b6000611484826000016116d0565b9050919050565b600061149a83600001836116e1565b60001c905092915050565b600060149054906101000a900460ff16156114f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114ec906123c6565b60405180910390fd5b6001600060146101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861153961133f565b60405161154691906121ef565b60405180910390a1565b6115d3846323b872dd60e01b8585856040516024016115719392919061220a565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611609565b50505050565b6000611601836000018373ffffffffffffffffffffffffffffffffffffffff1660001b61174e565b905092915050565b606061166b826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166117be9092919063ffffffff16565b90506000815111156116cb578080602001905181019061168b9190611a4c565b6116ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116c190612466565b60405180910390fd5b5b505050565b600081600001805490509050919050565b60008183600001805490501161172c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161172390612306565b60405180910390fd5b82600001828154811061173b57fe5b9060005260206000200154905092915050565b600061175a83836117d6565b6117b35782600001829080600181540180825580915050600190039060005260206000200160009091909190915055826000018054905083600101600084815260200190815260200160002081905550600190506117b8565b600090505b92915050565b60606117cd84846000856117f9565b90509392505050565b600080836001016000848152602001908152602001600020541415905092915050565b60606118048561191c565b611843576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161183a90612446565b60405180910390fd5b600060608673ffffffffffffffffffffffffffffffffffffffff16858760405161186d91906121bd565b60006040518083038185875af1925050503d80600081146118aa576040519150601f19603f3d011682016040523d82523d6000602084013e6118af565b606091505b509150915081156118c4578092505050611914565b6000815111156118d75780518082602001fd5b836040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161190b91906122e4565b60405180910390fd5b949350505050565b600080823b905060008111915050919050565b60405180608001604052806000815260200160008152602001600081526020016000151581525090565b6000813590506119688161266b565b92915050565b60008151905061197d81612682565b92915050565b60008135905061199281612699565b92915050565b6000602082840312156119aa57600080fd5b60006119b884828501611959565b91505092915050565b600080604083850312156119d457600080fd5b60006119e285828601611959565b92505060206119f385828601611983565b9150509250929050565b600080600060608486031215611a1257600080fd5b6000611a2086828701611959565b9350506020611a3186828701611983565b9250506040611a4286828701611983565b9150509250925092565b600060208284031215611a5e57600080fd5b6000611a6c8482850161196e565b91505092915050565b600060208284031215611a8757600080fd5b6000611a9584828501611983565b91505092915050565b6000611aaa8383611add565b60208301905092915050565b6000611ac2838361214a565b60808301905092915050565b611ad7816125cd565b82525050565b611ae681612585565b82525050565b611af581612585565b82525050565b6000611b0682612501565b611b108185612547565b9350611b1b836124e1565b8060005b83811015611b4c578151611b338882611a9e565b9750611b3e8361252d565b925050600181019050611b1f565b5085935050505092915050565b6000611b648261250c565b611b6e8185612558565b9350611b79836124f1565b8060005b83811015611baa578151611b918882611ab6565b9750611b9c8361253a565b925050600181019050611b7d565b5085935050505092915050565b611bc081612597565b82525050565b611bcf81612597565b82525050565b6000611be082612517565b611bea8185612569565b9350611bfa818560208601612627565b80840191505092915050565b611c0f816125df565b82525050565b6000611c2082612522565b611c2a8185612574565b9350611c3a818560208601612627565b611c438161265a565b840191505092915050565b6000611c5b602283612574565b91507f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e60008301527f64730000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000611cc1601483612574565b91507f5061757361626c653a206e6f74207061757365640000000000000000000000006000830152602082019050919050565b6000611d01602683612574565b91507f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008301527f64647265737300000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000611d67602183612574565b91507f56657374696e673a3a7265766f6b653a20616c7265616479207769746864726160008301527f77000000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000611dcd604183612574565b91507f4f776e61626c655061757361626c653a3a70617573653a206f6e6c792070617560008301527f73657220616e64206f776e6572206d75737420706175736520636f6e7472616360208301527f74000000000000000000000000000000000000000000000000000000000000006040830152606082019050919050565b6000611e59604583612574565b91507f4f776e61626c655061757361626c653a3a756e70617573653a206f6e6c79207060008301527f617573657220616e64206f776e6572206d75737420756e706175736520636f6e60208301527f74726163740000000000000000000000000000000000000000000000000000006040830152606082019050919050565b6000611ee5601083612574565b91507f5061757361626c653a20706175736564000000000000000000000000000000006000830152602082019050919050565b6000611f25602283612574565b91507f56657374696e673a3a77697468647261773a20706572696f6420697320656d7060008301527f74790000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000611f8b602083612574565b91507f56657374696e673a3a77697468647261773a206163636573732064656e6965646000830152602082019050919050565b6000611fcb602083612574565b91507f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726000830152602082019050919050565b600061200b601d83612574565b91507f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006000830152602082019050919050565b600061204b602a83612574565b91507f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008301527f6f742073756363656564000000000000000000000000000000000000000000006020830152604082019050919050565b60006120b1601f83612574565b91507f56657374696e673a3a6c6f636b3a20746f6f206d616e7920706572696f6473006000830152602082019050919050565b60006120f1602383612574565b91507f56657374696e673a3a77697468647261773a20616c726561647920776974686460008301527f72617700000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b608082016000820151612160600085018261219f565b506020820151612173602085018261219f565b506040820151612186604085018261219f565b5060608201516121996060850182611bb7565b50505050565b6121a8816125c3565b82525050565b6121b7816125c3565b82525050565b60006121c98284611bd5565b915081905092915050565b60006020820190506121e96000830184611aec565b92915050565b60006020820190506122046000830184611ace565b92915050565b600060608201905061221f6000830186611aec565b61222c6020830185611aec565b61223960408301846121ae565b949350505050565b60006040820190506122566000830185611aec565b61226360208301846121ae565b9392505050565b600060208201905081810360008301526122848184611afb565b905092915050565b600060208201905081810360008301526122a68184611b59565b905092915050565b60006020820190506122c36000830184611bc6565b92915050565b60006020820190506122de6000830184611c06565b92915050565b600060208201905081810360008301526122fe8184611c15565b905092915050565b6000602082019050818103600083015261231f81611c4e565b9050919050565b6000602082019050818103600083015261233f81611cb4565b9050919050565b6000602082019050818103600083015261235f81611cf4565b9050919050565b6000602082019050818103600083015261237f81611d5a565b9050919050565b6000602082019050818103600083015261239f81611dc0565b9050919050565b600060208201905081810360008301526123bf81611e4c565b9050919050565b600060208201905081810360008301526123df81611ed8565b9050919050565b600060208201905081810360008301526123ff81611f18565b9050919050565b6000602082019050818103600083015261241f81611f7e565b9050919050565b6000602082019050818103600083015261243f81611fbe565b9050919050565b6000602082019050818103600083015261245f81611ffe565b9050919050565b6000602082019050818103600083015261247f8161203e565b9050919050565b6000602082019050818103600083015261249f816120a4565b9050919050565b600060208201905081810360008301526124bf816120e4565b9050919050565b60006020820190506124db60008301846121ae565b92915050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b6000612590826125a3565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006125d882612603565b9050919050565b60006125ea826125f1565b9050919050565b60006125fc826125a3565b9050919050565b600061260e82612615565b9050919050565b6000612620826125a3565b9050919050565b60005b8381101561264557808201518184015260208101905061262a565b83811115612654576000848401525b50505050565b6000601f19601f8301169050919050565b61267481612585565b811461267f57600080fd5b50565b61268b81612597565b811461269657600080fd5b50565b6126a2816125c3565b81146126ad57600080fd5b5056fea26469706673582212207aafb739338043f09d319d69e4dcd5bbc01bc7daac989b095d0431211736a35564736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100f55760003560e01c8063715018a611610097578063e2ab691d11610066578063e2ab691d14610216578063eac449d914610246578063f2fde38b14610262578063fc0c546a1461027e576100f5565b8063715018a6146101c65780638456cb59146101d05780638da5cb5b146101da5780639fd0506d146101f8576100f5565b80633f4ba83a116100d35780633f4ba83a1461016257806351c2c1cc1461016c5780635aa68ac01461018a5780635c975abb146101a8576100f5565b80630aae7a6b146100fa5780632cd271e71461012a5780632e1a7d4d14610146575b600080fd5b610114600480360381019061010f9190611998565b61029c565b604051610121919061228c565b60405180910390f35b610144600480360381019061013f9190611998565b61049e565b005b610160600480360381019061015b9190611a75565b6105d0565b005b61016a61080b565b005b6101746108f0565b60405161018191906124c6565b60405180910390f35b6101926108f9565b60405161019f919061226a565b60405180910390f35b6101b06109d1565b6040516101bd91906122ae565b60405180910390f35b6101ce6109e7565b005b6101d8610b3a565b005b6101e2610c1f565b6040516101ef91906121d4565b60405180910390f35b610200610c48565b60405161020d91906121d4565b60405180910390f35b610230600480360381019061022b91906119fd565b610c6e565b60405161023d91906124c6565b60405180910390f35b610260600480360381019061025b91906119c1565b610f72565b005b61027c60048036038101906102779190611998565b611157565b005b610286611319565b60405161029391906122c9565b60405180910390f35b606080600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054905067ffffffffffffffff811180156102f857600080fd5b5060405190808252806020026020018201604052801561033257816020015b61031f61192f565b8152602001906001900390816103175790505b50905060005b600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050811015610494576000600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002082815481106103ce57fe5b90600052602060002001549050600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008281526020019081526020016000206040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820160009054906101000a900460ff16151515158152505083838151811061047b57fe5b6020026020010181905250508080600101915050610338565b5080915050919050565b6104a661133f565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610533576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161052a90612426565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fb80482a293ca2e013eda8683c9bd7fc8347cfdaeea5ede58cba46df502c2a604600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040516105c591906121d4565b60405180910390a150565b600060149054906101000a900460ff1615610620576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610617906123c6565b60405180910390fd5b600061062a61133f565b90506000600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000848152602001908152602001600020905060008160010154116106c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106be906123e6565b60405180910390fd5b8060030160009054906101000a900460ff1615610719576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610710906124a6565b60405180910390fd5b8060020154421161075f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161075690612406565b60405180910390fd5b60018160030160006101000a81548160ff0219169083151502179055506107cd828260010154600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166113479092919063ffffffff16565b7f7fcf532c15f0a6db0bd6d0e038bea71d30d808c7d98cb3bf7268a95bf5081b6582846040516107fe929190612241565b60405180910390a1505050565b61081361133f565b73ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614806108a7575061087161133f565b73ffffffffffffffffffffffffffffffffffffffff1661088f610c1f565b73ffffffffffffffffffffffffffffffffffffffff16145b6108e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108dd906123a6565b60405180910390fd5b6108ee6113cd565b565b60006005905090565b6060806109066004611476565b67ffffffffffffffff8111801561091c57600080fd5b5060405190808252806020026020018201604052801561094b5781602001602082028036833780820191505090505b50905060005b61095b6004611476565b8110156109c95761097681600461148b90919063ffffffff16565b82828151811061098257fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508080600101915050610951565b508091505090565b60008060149054906101000a900460ff16905090565b6109ef61133f565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610a7c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a7390612426565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b610b4261133f565b73ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480610bd65750610ba061133f565b73ffffffffffffffffffffffffffffffffffffffff16610bbe610c1f565b73ffffffffffffffffffffffffffffffffffffffff16145b610c15576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c0c90612386565b60405180910390fd5b610c1d6114a5565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000610c7861133f565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610d05576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cfc90612426565b60405180910390fd5b610d0d6108f0565b600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054905010610d90576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d8790612486565b60405180910390fd5b610de6610d9b61133f565b3085600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16611550909392919063ffffffff16565b6001600360008282540192505081905550610e0b8460046115d990919063ffffffff16565b506040518060800160405280600354815260200184815260200183815260200160001515815250600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600354815260200190815260200160002060008201518160000155602082015181600101556040820151816002015560608201518160030160006101000a81548160ff021916908315150217905550905050600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060035490806001815401808255809150506001900390600052602060002001600090919091909150557f032bc66be43dbccb7487781d168eb7bda224628a3b2c3388bdf69b532a3a1611600354604051610f5e91906124c6565b60405180910390a160035490509392505050565b610f7a61133f565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611007576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ffe90612426565b60405180910390fd5b6000600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002090508060030160009054906101000a900460ff16156110ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110a490612366565b60405180910390fd5b60006110b761133f565b9050600082600101549050600083600101819055506111198282600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166113479092919063ffffffff16565b7f61e27b0bfd8e18e6b92ec32ce1c28bb698d27bfe93e84c7e94d4db0a3135c7608460405161114891906124c6565b60405180910390a15050505050565b61115f61133f565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146111ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111e390612426565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561125c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161125390612346565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600033905090565b6113c88363a9059cbb60e01b8484604051602401611366929190612241565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611609565b505050565b600060149054906101000a900460ff1661141c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161141390612326565b60405180910390fd5b60008060146101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa61145f61133f565b60405161146c91906121ef565b60405180910390a1565b6000611484826000016116d0565b9050919050565b600061149a83600001836116e1565b60001c905092915050565b600060149054906101000a900460ff16156114f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114ec906123c6565b60405180910390fd5b6001600060146101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861153961133f565b60405161154691906121ef565b60405180910390a1565b6115d3846323b872dd60e01b8585856040516024016115719392919061220a565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611609565b50505050565b6000611601836000018373ffffffffffffffffffffffffffffffffffffffff1660001b61174e565b905092915050565b606061166b826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166117be9092919063ffffffff16565b90506000815111156116cb578080602001905181019061168b9190611a4c565b6116ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116c190612466565b60405180910390fd5b5b505050565b600081600001805490509050919050565b60008183600001805490501161172c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161172390612306565b60405180910390fd5b82600001828154811061173b57fe5b9060005260206000200154905092915050565b600061175a83836117d6565b6117b35782600001829080600181540180825580915050600190039060005260206000200160009091909190915055826000018054905083600101600084815260200190815260200160002081905550600190506117b8565b600090505b92915050565b60606117cd84846000856117f9565b90509392505050565b600080836001016000848152602001908152602001600020541415905092915050565b60606118048561191c565b611843576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161183a90612446565b60405180910390fd5b600060608673ffffffffffffffffffffffffffffffffffffffff16858760405161186d91906121bd565b60006040518083038185875af1925050503d80600081146118aa576040519150601f19603f3d011682016040523d82523d6000602084013e6118af565b606091505b509150915081156118c4578092505050611914565b6000815111156118d75780518082602001fd5b836040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161190b91906122e4565b60405180910390fd5b949350505050565b600080823b905060008111915050919050565b60405180608001604052806000815260200160008152602001600081526020016000151581525090565b6000813590506119688161266b565b92915050565b60008151905061197d81612682565b92915050565b60008135905061199281612699565b92915050565b6000602082840312156119aa57600080fd5b60006119b884828501611959565b91505092915050565b600080604083850312156119d457600080fd5b60006119e285828601611959565b92505060206119f385828601611983565b9150509250929050565b600080600060608486031215611a1257600080fd5b6000611a2086828701611959565b9350506020611a3186828701611983565b9250506040611a4286828701611983565b9150509250925092565b600060208284031215611a5e57600080fd5b6000611a6c8482850161196e565b91505092915050565b600060208284031215611a8757600080fd5b6000611a9584828501611983565b91505092915050565b6000611aaa8383611add565b60208301905092915050565b6000611ac2838361214a565b60808301905092915050565b611ad7816125cd565b82525050565b611ae681612585565b82525050565b611af581612585565b82525050565b6000611b0682612501565b611b108185612547565b9350611b1b836124e1565b8060005b83811015611b4c578151611b338882611a9e565b9750611b3e8361252d565b925050600181019050611b1f565b5085935050505092915050565b6000611b648261250c565b611b6e8185612558565b9350611b79836124f1565b8060005b83811015611baa578151611b918882611ab6565b9750611b9c8361253a565b925050600181019050611b7d565b5085935050505092915050565b611bc081612597565b82525050565b611bcf81612597565b82525050565b6000611be082612517565b611bea8185612569565b9350611bfa818560208601612627565b80840191505092915050565b611c0f816125df565b82525050565b6000611c2082612522565b611c2a8185612574565b9350611c3a818560208601612627565b611c438161265a565b840191505092915050565b6000611c5b602283612574565b91507f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e60008301527f64730000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000611cc1601483612574565b91507f5061757361626c653a206e6f74207061757365640000000000000000000000006000830152602082019050919050565b6000611d01602683612574565b91507f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008301527f64647265737300000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000611d67602183612574565b91507f56657374696e673a3a7265766f6b653a20616c7265616479207769746864726160008301527f77000000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000611dcd604183612574565b91507f4f776e61626c655061757361626c653a3a70617573653a206f6e6c792070617560008301527f73657220616e64206f776e6572206d75737420706175736520636f6e7472616360208301527f74000000000000000000000000000000000000000000000000000000000000006040830152606082019050919050565b6000611e59604583612574565b91507f4f776e61626c655061757361626c653a3a756e70617573653a206f6e6c79207060008301527f617573657220616e64206f776e6572206d75737420756e706175736520636f6e60208301527f74726163740000000000000000000000000000000000000000000000000000006040830152606082019050919050565b6000611ee5601083612574565b91507f5061757361626c653a20706175736564000000000000000000000000000000006000830152602082019050919050565b6000611f25602283612574565b91507f56657374696e673a3a77697468647261773a20706572696f6420697320656d7060008301527f74790000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000611f8b602083612574565b91507f56657374696e673a3a77697468647261773a206163636573732064656e6965646000830152602082019050919050565b6000611fcb602083612574565b91507f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726000830152602082019050919050565b600061200b601d83612574565b91507f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006000830152602082019050919050565b600061204b602a83612574565b91507f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008301527f6f742073756363656564000000000000000000000000000000000000000000006020830152604082019050919050565b60006120b1601f83612574565b91507f56657374696e673a3a6c6f636b3a20746f6f206d616e7920706572696f6473006000830152602082019050919050565b60006120f1602383612574565b91507f56657374696e673a3a77697468647261773a20616c726561647920776974686460008301527f72617700000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b608082016000820151612160600085018261219f565b506020820151612173602085018261219f565b506040820151612186604085018261219f565b5060608201516121996060850182611bb7565b50505050565b6121a8816125c3565b82525050565b6121b7816125c3565b82525050565b60006121c98284611bd5565b915081905092915050565b60006020820190506121e96000830184611aec565b92915050565b60006020820190506122046000830184611ace565b92915050565b600060608201905061221f6000830186611aec565b61222c6020830185611aec565b61223960408301846121ae565b949350505050565b60006040820190506122566000830185611aec565b61226360208301846121ae565b9392505050565b600060208201905081810360008301526122848184611afb565b905092915050565b600060208201905081810360008301526122a68184611b59565b905092915050565b60006020820190506122c36000830184611bc6565b92915050565b60006020820190506122de6000830184611c06565b92915050565b600060208201905081810360008301526122fe8184611c15565b905092915050565b6000602082019050818103600083015261231f81611c4e565b9050919050565b6000602082019050818103600083015261233f81611cb4565b9050919050565b6000602082019050818103600083015261235f81611cf4565b9050919050565b6000602082019050818103600083015261237f81611d5a565b9050919050565b6000602082019050818103600083015261239f81611dc0565b9050919050565b600060208201905081810360008301526123bf81611e4c565b9050919050565b600060208201905081810360008301526123df81611ed8565b9050919050565b600060208201905081810360008301526123ff81611f18565b9050919050565b6000602082019050818103600083015261241f81611f7e565b9050919050565b6000602082019050818103600083015261243f81611fbe565b9050919050565b6000602082019050818103600083015261245f81611ffe565b9050919050565b6000602082019050818103600083015261247f8161203e565b9050919050565b6000602082019050818103600083015261249f816120a4565b9050919050565b600060208201905081810360008301526124bf816120e4565b9050919050565b60006020820190506124db60008301846121ae565b92915050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b6000612590826125a3565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006125d882612603565b9050919050565b60006125ea826125f1565b9050919050565b60006125fc826125a3565b9050919050565b600061260e82612615565b9050919050565b6000612620826125a3565b9050919050565b60005b8381101561264557808201518184015260208101905061262a565b83811115612654576000848401525b50505050565b6000601f19601f8301169050919050565b61267481612585565b811461267f57600080fd5b50565b61268b81612597565b811461269657600080fd5b50565b6126a2816125c3565b81146126ad57600080fd5b5056fea26469706673582212207aafb739338043f09d319d69e4dcd5bbc01bc7daac989b095d0431211736a35564736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "changePauser(address)": {
        "params": {
          "newPauser": "Address of new pauser account."
        }
      },
      "constructor": {
        "params": {
          "_token": "Address of vesting token contract."
        }
      },
      "getParticipants()": {
        "returns": {
          "_0": "Participants addresses."
        }
      },
      "info(address)": {
        "params": {
          "recipient": "Recipient address."
        },
        "returns": {
          "_0": "Recipient periods list."
        }
      },
      "lock(address,uint256,uint256)": {
        "params": {
          "amount": "Reward amount.",
          "date": "Date of unlockd period.",
          "recipient": "Recipient of reward."
        },
        "returns": {
          "_0": "Added period identifier."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "revoke(address,uint256)": {
        "params": {
          "periodId": "Period identifier.",
          "recipient": "Recipient of reward."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdraw(uint256)": {
        "params": {
          "periodId": "Target period identifier."
        }
      }
    },
    "stateVariables": {
      "currentPeriod": {
        "details": "Index last period."
      },
      "participants": {
        "details": "Participants list."
      },
      "periods": {
        "details": "All registered periods."
      },
      "periodsIndex": {
        "details": "Period identifiers index."
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "Locked(uint256)": {
        "notice": "An event emitted when locking a period."
      },
      "PauserChanged(address)": {
        "notice": "An event thats emitted when an pauser address changed."
      },
      "Revoked(uint256)": {
        "notice": "An event emitted when revoked a period."
      },
      "Withdrawal(address,uint256)": {
        "notice": "An event emitted when withdrawal a period."
      }
    },
    "kind": "user",
    "methods": {
      "changePauser(address)": {
        "notice": "Change pauser account."
      },
      "getParticipants()": {
        "notice": "Return all participants addresses."
      },
      "info(address)": {
        "notice": "Get information of period."
      },
      "lock(address,uint256,uint256)": {
        "notice": "Add new period."
      },
      "maxPeriodsPerRecipient()": {
        "notice": "The number of periods for a per recipient."
      },
      "pause()": {
        "notice": "Triggers stopped state."
      },
      "pauser()": {
        "notice": "Address that can pause a contract."
      },
      "revoke(address,uint256)": {
        "notice": "Revoke period."
      },
      "token()": {
        "notice": "Address of vesting token."
      },
      "unpause()": {
        "notice": "Returns to normal state."
      },
      "withdraw(uint256)": {
        "notice": "Withdraw reward."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 30,
        "contract": "contracts/Vesting.sol:Vesting",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1806,
        "contract": "contracts/Vesting.sol:Vesting",
        "label": "_paused",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 12392,
        "contract": "contracts/Vesting.sol:Vesting",
        "label": "pauser",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 8230,
        "contract": "contracts/Vesting.sol:Vesting",
        "label": "token",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(ERC20)907"
      },
      {
        "astId": 8243,
        "contract": "contracts/Vesting.sol:Vesting",
        "label": "currentPeriod",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 8246,
        "contract": "contracts/Vesting.sol:Vesting",
        "label": "participants",
        "offset": 0,
        "slot": "4",
        "type": "t_struct(AddressSet)1584_storage"
      },
      {
        "astId": 8253,
        "contract": "contracts/Vesting.sol:Vesting",
        "label": "periods",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Period)8239_storage))"
      },
      {
        "astId": 8259,
        "contract": "contracts/Vesting.sol:Vesting",
        "label": "periodsIndex",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ERC20)907": {
        "encoding": "inplace",
        "label": "contract ERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(Period)8239_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct Vesting.Period))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(Period)8239_storage)"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(Period)8239_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Vesting.Period)",
        "numberOfBytes": "32",
        "value": "t_struct(Period)8239_storage"
      },
      "t_struct(AddressSet)1584_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 1583,
            "contract": "contracts/Vesting.sol:Vesting",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)1404_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Period)8239_storage": {
        "encoding": "inplace",
        "label": "struct Vesting.Period",
        "members": [
          {
            "astId": 8232,
            "contract": "contracts/Vesting.sol:Vesting",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 8234,
            "contract": "contracts/Vesting.sol:Vesting",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 8236,
            "contract": "contracts/Vesting.sol:Vesting",
            "label": "date",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 8238,
            "contract": "contracts/Vesting.sol:Vesting",
            "label": "withdrawal",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Set)1404_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 1399,
            "contract": "contracts/Vesting.sol:Vesting",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 1403,
            "contract": "contracts/Vesting.sol:Vesting",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}