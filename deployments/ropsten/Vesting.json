{
  "address": "0xe216Fc3F34a1360d552A7a54402eaA261Fb7eedf",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_bond",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "periodId",
          "type": "uint256"
        }
      ],
      "name": "Locked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newPauser",
          "type": "address"
        }
      ],
      "name": "PauserChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "periodId",
          "type": "uint256"
        }
      ],
      "name": "Revoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "periodId",
          "type": "uint256"
        }
      ],
      "name": "Withdrawal",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "bond",
      "outputs": [
        {
          "internalType": "contract Bond",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newPauser",
          "type": "address"
        }
      ],
      "name": "changePauser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getParticipants",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "info",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "date",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "withdrawal",
              "type": "bool"
            }
          ],
          "internalType": "struct Vesting.Period[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "date",
          "type": "uint256"
        }
      ],
      "name": "lock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxPeriodsPerRecipient",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pauser",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "periodId",
          "type": "uint256"
        }
      ],
      "name": "revoke",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "periodId",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x8fb4ddeb7d20e6b7d39416f013895dcaeef62f8d03b9213c5d369ccf3a67bd4d",
  "receipt": {
    "to": null,
    "from": "0x9403932015576D13Fb26B135ed7a35d5d95C18d4",
    "contractAddress": "0xe216Fc3F34a1360d552A7a54402eaA261Fb7eedf",
    "transactionIndex": 0,
    "gasUsed": "2055255",
    "logsBloom": "0x
    "blockHash": "0xe5f0c2baf15214c4264759910a5b5bea234c462d0b5b07fd27f206a621447c73",
    "transactionHash": "0x8fb4ddeb7d20e6b7d39416f013895dcaeef62f8d03b9213c5d369ccf3a67bd4d",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 9327062,
        "transactionHash": "0x8fb4ddeb7d20e6b7d39416f013895dcaeef62f8d03b9213c5d369ccf3a67bd4d",
        "address": "0xe216Fc3F34a1360d552A7a54402eaA261Fb7eedf",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000009403932015576d13fb26b135ed7a35d5d95c18d4"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xe5f0c2baf15214c4264759910a5b5bea234c462d0b5b07fd27f206a621447c73"
      }
    ],
    "blockNumber": 9327062,
    "cumulativeGasUsed": "2055255",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2E46586D9E940453df79A9C647bd1b7b01F05F14"
  ],
  "solcInputHash": "b5f0be5d3d275c06b36962b556132d27",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bond\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"periodId\",\"type\":\"uint256\"}],\"name\":\"Locked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPauser\",\"type\":\"address\"}],\"name\":\"PauserChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"periodId\",\"type\":\"uint256\"}],\"name\":\"Revoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"periodId\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"bond\",\"outputs\":[{\"internalType\":\"contract Bond\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPauser\",\"type\":\"address\"}],\"name\":\"changePauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getParticipants\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"info\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"withdrawal\",\"type\":\"bool\"}],\"internalType\":\"struct Vesting.Period[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPeriodsPerRecipient\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauser\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"periodId\",\"type\":\"uint256\"}],\"name\":\"revoke\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"periodId\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"changePauser(address)\":{\"params\":{\"newPauser\":\"Address of new pauser account.\"}},\"constructor\":{\"params\":{\"_bond\":\"Address of Bond token contract.\"}},\"getParticipants()\":{\"returns\":{\"_0\":\"Participants addresses.\"}},\"info(address)\":{\"params\":{\"recipient\":\"Recipient address.\"},\"returns\":{\"_0\":\"Recipient periods list.\"}},\"lock(address,uint256,uint256)\":{\"params\":{\"amount\":\"Reward amount.\",\"date\":\"Date of unlockd period.\",\"recipient\":\"Recipient of reward.\"},\"returns\":{\"_0\":\"Added period identifier.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"revoke(address,uint256)\":{\"params\":{\"periodId\":\"Period identifier.\",\"recipient\":\"Recipient of reward.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdraw(uint256)\":{\"params\":{\"periodId\":\"Target period identifier.\"}}},\"stateVariables\":{\"currentPeriod\":{\"details\":\"Index last period.\"},\"participants\":{\"details\":\"Participants list.\"},\"periods\":{\"details\":\"All registered periods.\"},\"periodsIndex\":{\"details\":\"Period identifiers index.\"}},\"version\":1},\"userdoc\":{\"events\":{\"Locked(uint256)\":{\"notice\":\"An event emitted when locking a period.\"},\"PauserChanged(address)\":{\"notice\":\"An event thats emitted when an pauser address changed.\"},\"Revoked(uint256)\":{\"notice\":\"An event emitted when revoked a period.\"},\"Withdrawal(address,uint256)\":{\"notice\":\"An event emitted when withdrawal a period.\"}},\"kind\":\"user\",\"methods\":{\"bond()\":{\"notice\":\"Address of Bond token.\"},\"changePauser(address)\":{\"notice\":\"Change pauser account.\"},\"getParticipants()\":{\"notice\":\"Return all participants addresses.\"},\"info(address)\":{\"notice\":\"Get information of period.\"},\"lock(address,uint256,uint256)\":{\"notice\":\"Add new period.\"},\"maxPeriodsPerRecipient()\":{\"notice\":\"The number of periods for a per recipient.\"},\"pause()\":{\"notice\":\"Triggers stopped state.\"},\"pauser()\":{\"notice\":\"Address that can pause a contract.\"},\"revoke(address,uint256)\":{\"notice\":\"Revoke period.\"},\"unpause()\":{\"notice\":\"Returns to normal state.\"},\"withdraw(uint256)\":{\"notice\":\"Withdraw reward.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Vesting.sol\":\"Vesting\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/GSN/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xdb26cbf4d028490f49831a7865c2fe1b28db44b535ca8d343785a3b768aae183\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x4bd6402ca6b3419008c2b482aff54e66836e8cb4eba2680e42ac5884ae6424fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x9a9cf02622cd7a64261b10534fc3260449da25c98c9e96d1b4ae8110a20e5806\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5c26b39d26f7ed489e555d955dcd3e01872972e71fdd1528e93ec164e4f23385\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.0.0, only sets of type `address` (`AddressSet`) and `uint256`\\n * (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint256(_at(set._inner, index)));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0xb2a11b236f073662f5a196995863f51c11d006bf7c3de158b316dfa1506c4b79\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\ncontract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor () internal {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!_paused, \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(_paused, \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x5d1b1dcbc0396f44c1c8d554857f71e3187503bf1e54062bf9ec6782e21f3a08\",\"license\":\"MIT\"},\"contracts/Bond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/EnumerableSet.sol\\\";\\n\\ncontract Bond is IERC20, Ownable {\\n    using SafeMath for uint256;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    /// @notice EIP-20 token name for this token\\n    string public name = \\\"Bond\\\";\\n\\n    /// @notice EIP-20 token symbol for this token\\n    string public symbol = \\\"BOND\\\";\\n\\n    /// @notice EIP-20 token decimals for this token\\n    uint8 public decimals = 18;\\n\\n    /// @notice Total number of tokens in circulation\\n    uint256 public override totalSupply = 10000000e18; // 10 million Bond\\n\\n    /// @dev Allowance amounts on behalf of others\\n    mapping(address => mapping(address => uint96)) internal allowances;\\n\\n    /// @dev Official record of token balances for each account\\n    mapping(address => uint96) internal balances;\\n\\n    /// @notice Amount of blocked token\\n    struct Lock {\\n        uint96 amount;\\n        uint256 date;\\n    }\\n\\n    /// @notice Locking amounts\\n    mapping(address => Lock) public locking;\\n\\n    /// @dev Locking amounts\\n    EnumerableSet.AddressSet internal lockingAllowed;\\n\\n    /// @notice A record of each accounts delegate\\n    mapping(address => address) public delegates;\\n\\n    /// @notice A checkpoint for marking number of votes from a given block\\n    struct Checkpoint {\\n        uint32 fromBlock;\\n        uint96 votes;\\n    }\\n\\n    /// @notice A record of votes checkpoints for each account, by index\\n    mapping(address => mapping(uint32 => Checkpoint)) public checkpoints;\\n\\n    /// @notice The number of checkpoints for each account\\n    mapping(address => uint32) public numCheckpoints;\\n\\n    /// @notice The EIP-712 typehash for the contract's domain\\n    bytes32 public constant DOMAIN_TYPEHASH = keccak256(\\\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\\\");\\n\\n    /// @notice The EIP-712 typehash for the delegation struct used by the contract\\n    bytes32 public constant DELEGATION_TYPEHASH = keccak256(\\\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\\\");\\n\\n    /// @notice A record of states for signing / validating signatures\\n    mapping(address => uint256) public nonces;\\n\\n    /// @notice An event thats emitted when an account changes its delegate\\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\\n\\n    /// @notice An event thats emitted when a delegate account's vote balance changes\\n    event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance);\\n\\n    /// @notice The standard EIP-20 transfer event\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    /// @notice The standard EIP-20 approval event\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    /**\\n     * @notice Construct a new Bond token\\n     * @param account The initial account to grant all the tokens\\n     */\\n    constructor(address account) public {\\n        balances[account] = uint96(totalSupply);\\n        emit Transfer(address(0), account, totalSupply);\\n    }\\n\\n    /**\\n     * @notice Get the number of tokens `spender` is approved to spend on behalf of `account`\\n     * @param account The address of the account holding the funds\\n     * @param spender The address of the account spending the funds\\n     * @return The number of tokens approved\\n     */\\n    function allowance(address account, address spender) external override view returns (uint256) {\\n        return allowances[account][spender];\\n    }\\n\\n    /**\\n     * @notice Approve `spender` to transfer up to `amount` from `src`\\n     * @dev This will overwrite the approval amount for `spender`\\n     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n     * @param spender The address of the account which may transfer tokens\\n     * @param rawAmount The number of tokens that are approved (2^256-1 means infinite)\\n     * @return Whether or not the approval succeeded\\n     */\\n    function approve(address spender, uint256 rawAmount) external override returns (bool) {\\n        uint96 amount;\\n        if (rawAmount == uint256(-1)) {\\n            amount = uint96(-1);\\n        } else {\\n            amount = safe96(rawAmount, \\\"Bond::approve: amount exceeds 96 bits\\\");\\n        }\\n\\n        allowances[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Get the number of tokens held by the `account`\\n     * @param account The address of the account to get the balance of\\n     * @return The number of tokens held\\n     */\\n    function balanceOf(address account) external override view returns (uint256) {\\n        return balances[account];\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n     * @param dst The address of the destination account\\n     * @param rawAmount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transfer(address dst, uint256 rawAmount) external override returns (bool) {\\n        uint96 amount = safe96(rawAmount, \\\"Bond::transfer: amount exceeds 96 bits\\\");\\n        _transferTokens(msg.sender, dst, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param rawAmount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 rawAmount\\n    ) external override returns (bool) {\\n        address spender = msg.sender;\\n        uint96 spenderAllowance = allowances[src][spender];\\n        uint96 amount = safe96(rawAmount, \\\"Bond::approve: amount exceeds 96 bits\\\");\\n\\n        if (spender != src && spenderAllowance != uint96(-1)) {\\n            uint96 newAllowance = sub96(spenderAllowance, amount, \\\"Bond::transferFrom: transfer amount exceeds spender allowance\\\");\\n            allowances[src][spender] = newAllowance;\\n\\n            emit Approval(src, spender, newAllowance);\\n        }\\n\\n        _transferTokens(src, dst, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Add account to transfer lock method allowed list\\n     * @param account Allowable account\\n     */\\n    function allowTransferLock(address account) external onlyOwner returns (bool) {\\n        return lockingAllowed.add(account);\\n    }\\n\\n    /**\\n     * @notice Remove account from transfer lock method allowed list\\n     * @param account Denied account\\n     */\\n    function denyTransferLock(address account) external onlyOwner returns (bool) {\\n        return lockingAllowed.remove(account);\\n    }\\n\\n    function transferLock(address dst, uint256 rawAmount, uint256 date) external returns (bool) {\\n        require(lockingAllowed.contains(msg.sender), \\\"Bond::transferLock: access is denied\\\");\\n        require(locking[dst].date == 0 || locking[dst].date == date, \\\"Bond::transferLock: lock date cannot be changed\\\");\\n        uint96 amount = safe96(rawAmount, \\\"Bond::transferLock: amount exceeds 96 bits\\\");\\n\\n        locking[dst].date = date;\\n        locking[dst].amount = add96(locking[dst].amount, amount, \\\"Bond::transferLock: transfer amount overflows\\\");\\n        _transferTokens(msg.sender, dst, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     * \\n     * @param account Recipient of created token.\\n     * @param amount Amount of token to be created.\\n     */\\n    function mint(address account, uint256 amount) public onlyOwner {\\n        _mint(account, amount);\\n    }\\n\\n    /**\\n     * @param account Owner of removed token.\\n     * @param amount Amount of token to be removed.\\n     */\\n    function burn(address account, uint256 amount) public onlyOwner {\\n        _burn(account, amount);\\n    }\\n\\n    /**\\n     * @notice Delegate votes from `msg.sender` to `delegatee`\\n     * @param delegatee The address to delegate votes to\\n     */\\n    function delegate(address delegatee) public {\\n        return _delegate(msg.sender, delegatee);\\n    }\\n\\n    /**\\n     * @notice Delegates votes from signatory to `delegatee`\\n     * @param delegatee The address to delegate votes to\\n     * @param nonce The contract state required to match the signature\\n     * @param expiry The time at which to expire the signature\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function delegateBySig(\\n        address delegatee,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public {\\n        bytes32 domainSeparator = keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name)), getChainId(), address(this)));\\n        bytes32 structHash = keccak256(abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry));\\n        bytes32 digest = keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n        address signatory = ecrecover(digest, v, r, s);\\n        require(signatory != address(0), \\\"Bond::delegateBySig: invalid signature\\\");\\n        require(nonce == nonces[signatory]++, \\\"Bond::delegateBySig: invalid nonce\\\");\\n        require(now <= expiry, \\\"Bond::delegateBySig: signature expired\\\");\\n        return _delegate(signatory, delegatee);\\n    }\\n\\n    /**\\n     * @notice Gets the current votes balance for `account`\\n     * @param account The address to get votes balance\\n     * @return The number of current votes for `account`\\n     */\\n    function getCurrentVotes(address account) external view returns (uint96) {\\n        uint32 nCheckpoints = numCheckpoints[account];\\n        return nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;\\n    }\\n\\n    /**\\n     * @notice Determine the prior number of votes for an account as of a block number\\n     * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\\n     * @param account The address of the account to check\\n     * @param blockNumber The block number to get the vote balance at\\n     * @return The number of votes the account had as of the given block\\n     */\\n    function getPriorVotes(address account, uint256 blockNumber) public view returns (uint96) {\\n        require(blockNumber < block.number, \\\"Bond::getPriorVotes: not yet determined\\\");\\n\\n        uint32 nCheckpoints = numCheckpoints[account];\\n        if (nCheckpoints == 0) {\\n            return 0;\\n        }\\n\\n        // First check most recent balance\\n        if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {\\n            return checkpoints[account][nCheckpoints - 1].votes;\\n        }\\n\\n        // Next check implicit zero balance\\n        if (checkpoints[account][0].fromBlock > blockNumber) {\\n            return 0;\\n        }\\n\\n        uint32 lower = 0;\\n        uint32 upper = nCheckpoints - 1;\\n        while (upper > lower) {\\n            uint32 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\\n            Checkpoint memory cp = checkpoints[account][center];\\n            if (cp.fromBlock == blockNumber) {\\n                return cp.votes;\\n            } else if (cp.fromBlock < blockNumber) {\\n                lower = center;\\n            } else {\\n                upper = center - 1;\\n            }\\n        }\\n        return checkpoints[account][lower].votes;\\n    }\\n\\n    function _delegate(address delegator, address delegatee) internal {\\n        address currentDelegate = delegates[delegator];\\n        uint96 delegatorBalance = balances[delegator];\\n        delegates[delegator] = delegatee;\\n\\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\\n\\n        _moveDelegates(currentDelegate, delegatee, delegatorBalance);\\n    }\\n\\n    function _transferTokens(\\n        address src,\\n        address dst,\\n        uint96 amount\\n    ) internal {\\n        require(src != address(0), \\\"Bond::_transferTokens: cannot transfer from the zero address\\\");\\n        require(dst != address(0), \\\"Bond::_transferTokens: cannot transfer to the zero address\\\");\\n\\n        balances[src] = sub96(balances[src], amount, \\\"Bond::_transferTokens: transfer amount exceeds balance\\\");\\n        if (locking[src].date > block.timestamp && locking[src].amount > 0 && balances[src] < locking[src].amount) {\\n            revert(\\\"Bond::_transferTokens: amount are locked\\\");\\n        }\\n        balances[dst] = add96(balances[dst], amount, \\\"Bond::_transferTokens: transfer amount overflows\\\");\\n        emit Transfer(src, dst, amount);\\n\\n        _moveDelegates(delegates[src], delegates[dst], amount);\\n    }\\n\\n    function _moveDelegates(\\n        address srcRep,\\n        address dstRep,\\n        uint96 amount\\n    ) internal {\\n        if (srcRep != dstRep && amount > 0) {\\n            if (srcRep != address(0)) {\\n                uint32 srcRepNum = numCheckpoints[srcRep];\\n                uint96 srcRepOld = srcRepNum > 0 ? checkpoints[srcRep][srcRepNum - 1].votes : 0;\\n                uint96 srcRepNew = sub96(srcRepOld, amount, \\\"Bond::_moveVotes: vote amount underflows\\\");\\n                _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\\n            }\\n\\n            if (dstRep != address(0)) {\\n                uint32 dstRepNum = numCheckpoints[dstRep];\\n                uint96 dstRepOld = dstRepNum > 0 ? checkpoints[dstRep][dstRepNum - 1].votes : 0;\\n                uint96 dstRepNew = add96(dstRepOld, amount, \\\"Bond::_moveVotes: vote amount overflows\\\");\\n                _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);\\n            }\\n        }\\n    }\\n\\n    function _writeCheckpoint(\\n        address delegatee,\\n        uint32 nCheckpoints,\\n        uint96 oldVotes,\\n        uint96 newVotes\\n    ) internal {\\n        uint32 blockNumber = safe32(block.number, \\\"Bond::_writeCheckpoint: block number exceeds 32 bits\\\");\\n\\n        if (nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber) {\\n            checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\\n        } else {\\n            checkpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes);\\n            numCheckpoints[delegatee] = nCheckpoints + 1;\\n        }\\n\\n        emit DelegateVotesChanged(delegatee, oldVotes, newVotes);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 rawAmount) internal virtual {\\n        require(account != address(0), \\\"Bond::_mint: mint to the zero address\\\");\\n        uint96 amount = safe96(rawAmount, \\\"Bond::_mint: amount exceeds 96 bits\\\");\\n\\n        totalSupply = totalSupply.add(rawAmount);\\n        balances[account] = add96(balances[account], amount, \\\"Bond::_mint: mint amount overflows\\\");\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 rawAmount) internal virtual {\\n        require(account != address(0), \\\"Bond::_burn: burn from the zero address\\\");\\n        uint96 amount = safe96(rawAmount, \\\"Bond::_burn: amount exceeds 96 bits\\\");\\n\\n        balances[account] = sub96(balances[account], amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        totalSupply = totalSupply.sub(rawAmount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    function safe32(uint256 n, string memory errorMessage) internal pure returns (uint32) {\\n        require(n < 2**32, errorMessage);\\n        return uint32(n);\\n    }\\n\\n    function safe96(uint256 n, string memory errorMessage) internal pure returns (uint96) {\\n        require(n < 2**96, errorMessage);\\n        return uint96(n);\\n    }\\n\\n    function add96(\\n        uint96 a,\\n        uint96 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint96) {\\n        uint96 c = a + b;\\n        require(c >= a, errorMessage);\\n        return c;\\n    }\\n\\n    function sub96(\\n        uint96 a,\\n        uint96 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint96) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    function getChainId() internal pure returns (uint256) {\\n        uint256 chainId;\\n\\n        assembly {\\n            chainId := chainid()\\n        }\\n        return chainId;\\n    }\\n}\\n\",\"keccak256\":\"0xf1b50c81e08dec9088bb1ed8d1e9319d4c66ef5118bb3bf8f6ed3629ac7952ed\",\"license\":\"MIT\"},\"contracts/Vesting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/EnumerableSet.sol\\\";\\nimport \\\"./utils/OwnablePausable.sol\\\";\\nimport \\\"./Bond.sol\\\";\\n\\ncontract Vesting is OwnablePausable {\\n    using SafeMath for uint256;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    /// @notice The number of periods for a per recipient.\\n    function maxPeriodsPerRecipient() public pure returns (uint256) {\\n        return 5;\\n    } // 5 perios per recipient.\\n\\n    /// @notice Address of Bond token.\\n    Bond public bond;\\n\\n    struct Period {\\n        // Identifier.\\n        uint256 id;\\n        // Reward amount.\\n        uint256 amount;\\n        // Unlockd date.\\n        uint256 date;\\n        // Reward withdrawal flag.\\n        bool withdrawal;\\n    }\\n\\n    /// @dev Index last period.\\n    uint256 internal currentPeriod = 0;\\n\\n    /// @dev Participants list.\\n    EnumerableSet.AddressSet internal participants;\\n\\n    /// @dev All registered periods.\\n    mapping(address => mapping(uint256 => Period)) internal periods;\\n\\n    /// @dev Period identifiers index.\\n    mapping(address => uint256[]) internal periodsIndex;\\n\\n    /// @notice An event emitted when locking a period.\\n    event Locked(uint256 periodId);\\n\\n    /// @notice An event emitted when revoked a period.\\n    event Revoked(uint256 periodId);\\n\\n    /// @notice An event emitted when withdrawal a period.\\n    event Withdrawal(address recipient, uint256 periodId);\\n\\n    /**\\n     * @param _bond Address of Bond token contract.\\n     */\\n    constructor(address _bond) public {\\n        bond = Bond(_bond);\\n    }\\n\\n    /**\\n     * @notice Add new period.\\n     * @param recipient Recipient of reward.\\n     * @param amount Reward amount.\\n     * @param date Date of unlockd period.\\n     * @return Added period identifier.\\n     */\\n    function lock(\\n        address recipient,\\n        uint256 amount,\\n        uint256 date\\n    ) external onlyOwner returns (uint256) {\\n        require(periodsIndex[recipient].length < maxPeriodsPerRecipient(), \\\"Vesting::lock: too many periods\\\");\\n\\n        bond.transferFrom(_msgSender(), address(this), amount);\\n\\n        currentPeriod += 1;\\n        participants.add(recipient);\\n        periods[recipient][currentPeriod] = Period(currentPeriod, amount, date, false);\\n        periodsIndex[recipient].push(currentPeriod);\\n        emit Locked(currentPeriod);\\n\\n        return currentPeriod;\\n    }\\n\\n    /**\\n     * @notice Revoke period.\\n     * @param recipient Recipient of reward.\\n     * @param periodId Period identifier.\\n     */\\n    function revoke(address recipient, uint256 periodId) external onlyOwner {\\n        Period storage period = periods[recipient][periodId];\\n        require(!period.withdrawal, \\\"Vesting::revoke: already withdraw\\\");\\n\\n        address owner = _msgSender();\\n        uint256 amount = period.amount;\\n        period.amount = 0;\\n        bond.transfer(owner, amount);\\n\\n        emit Revoked(periodId);\\n    }\\n\\n    /**\\n     * @notice Return all participants addresses.\\n     * @return Participants addresses.\\n     */\\n    function getParticipants() external view returns (address[] memory) {\\n        address[] memory result = new address[](participants.length());\\n\\n        for (uint256 i = 0; i < participants.length(); i++) {\\n            result[i] = participants.at(i);\\n        }\\n\\n        return result;\\n    }\\n\\n    /**\\n     * @notice Get information of period.\\n     * @param recipient Recipient address.\\n     * @return Recipient periods list.\\n     */\\n    function info(address recipient) external view returns (Period[] memory) {\\n        Period[] memory result = new Period[](periodsIndex[recipient].length);\\n\\n        for (uint256 i = 0; i < periodsIndex[recipient].length; i++) {\\n            uint256 periodId = periodsIndex[recipient][i];\\n\\n            result[i] = periods[recipient][periodId];\\n        }\\n\\n        return result;\\n    }\\n\\n    /**\\n     * @notice Withdraw reward.\\n     * @param periodId Target period identifier.\\n     */\\n    function withdraw(uint256 periodId) external whenNotPaused {\\n        address recipient = _msgSender();\\n        Period storage period = periods[recipient][periodId];\\n        require(period.amount > 0, \\\"Vesting::withdraw: period is empty\\\");\\n        require(!period.withdrawal, \\\"Vesting::withdraw: already withdraw\\\");\\n        require(block.timestamp > period.date, \\\"Vesting::withdraw: access denied\\\");\\n\\n        period.withdrawal = true;\\n        bond.transfer(recipient, period.amount);\\n        emit Withdrawal(recipient, periodId);\\n    }\\n}\\n\",\"keccak256\":\"0x7e21d6448ea11720b66d7c99f85aef9a335b79e7ada64948cb3be894ca5489c6\",\"license\":\"MIT\"},\"contracts/utils/OwnablePausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\n\\ncontract OwnablePausable is Ownable, Pausable {\\n    /// @notice Address that can pause a contract.\\n    address public pauser;\\n\\n    /// @notice An event thats emitted when an pauser address changed.\\n    event PauserChanged(address newPauser);\\n\\n    constructor() internal {\\n        pauser = owner();\\n    }\\n\\n    /**\\n     * @notice Change pauser account.\\n     * @param newPauser Address of new pauser account.\\n     */\\n    function changePauser(address newPauser) external onlyOwner {\\n        pauser = newPauser;\\n        emit PauserChanged(pauser);\\n    }\\n\\n    /**\\n     * @notice Triggers stopped state.\\n     */\\n    function pause() public virtual {\\n        require(pauser == _msgSender() || owner() == _msgSender(), \\\"OwnablePausable::pause: only pauser and owner must pause contract\\\");\\n        _pause();\\n    }\\n\\n    /**\\n     * @notice Returns to normal state.\\n     */\\n    function unpause() public virtual {\\n        require(pauser == _msgSender() || owner() == _msgSender(), \\\"OwnablePausable::unpause: only pauser and owner must unpause contract\\\");\\n        _unpause();\\n    }\\n}\\n\",\"keccak256\":\"0x865125c578244d8e7240cfe61b8591c6bcc2b05f88ee64aee28fd1ba10f3f4df\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405260006003553480156200001657600080fd5b506040516200256d3803806200256d83398181016040528101906200003c9190620001e6565b60006200004e6200019e60201b60201c565b9050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35060008060146101000a81548160ff02191690831515021790555062000116620001a660201b60201c565b600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000260565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600081519050620001e08162000246565b92915050565b600060208284031215620001f957600080fd5b60006200020984828501620001cf565b91505092915050565b60006200021f8262000226565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b620002518162000212565b81146200025d57600080fd5b50565b6122fd80620002706000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c806364c9ec6f116100975780639fd0506d116100665780639fd0506d14610216578063e2ab691d14610234578063eac449d914610264578063f2fde38b14610280576100f5565b806364c9ec6f146101c6578063715018a6146101e45780638456cb59146101ee5780638da5cb5b146101f8576100f5565b80633f4ba83a116100d35780633f4ba83a1461016257806351c2c1cc1461016c5780635aa68ac01461018a5780635c975abb146101a8576100f5565b80630aae7a6b146100fa5780632cd271e71461012a5780632e1a7d4d14610146575b600080fd5b610114600480360381019061010f919061179d565b61029c565b6040516101219190611f6a565b60405180910390f35b610144600480360381019061013f919061179d565b61049e565b005b610160600480360381019061015b919061187a565b6105d0565b005b61016a61086e565b005b610174610953565b6040516101819190612142565b60405180910390f35b61019261095c565b60405161019f9190611f48565b60405180910390f35b6101b0610a34565b6040516101bd9190611f8c565b60405180910390f35b6101ce610a4a565b6040516101db9190611fa7565b60405180910390f35b6101ec610a70565b005b6101f6610bc3565b005b610200610ca8565b60405161020d9190611eb2565b60405180910390f35b61021e610cd1565b60405161022b9190611eb2565b60405180910390f35b61024e60048036038101906102499190611802565b610cf7565b60405161025b9190612142565b60405180910390f35b61027e600480360381019061027991906117c6565b61105e565b005b61029a6004803603810190610295919061179d565b6112a6565b005b606080600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054905067ffffffffffffffff811180156102f857600080fd5b5060405190808252806020026020018201604052801561033257816020015b61031f611734565b8152602001906001900390816103175790505b50905060005b600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050811015610494576000600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002082815481106103ce57fe5b90600052602060002001549050600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008281526020019081526020016000206040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820160009054906101000a900460ff16151515158152505083838151811061047b57fe5b6020026020010181905250508080600101915050610338565b5080915050919050565b6104a6611468565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610533576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161052a906120e2565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fb80482a293ca2e013eda8683c9bd7fc8347cfdaeea5ede58cba46df502c2a604600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040516105c59190611eb2565b60405180910390a150565b600060149054906101000a900460ff1615610620576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161061790612082565b60405180910390fd5b600061062a611468565b90506000600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000848152602001908152602001600020905060008160010154116106c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106be906120a2565b60405180910390fd5b8060030160009054906101000a900460ff1615610719576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161071090612122565b60405180910390fd5b8060020154421161075f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610756906120c2565b60405180910390fd5b60018160030160006101000a81548160ff021916908315150217905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8383600101546040518363ffffffff1660e01b81526004016107dd929190611f1f565b602060405180830381600087803b1580156107f757600080fd5b505af115801561080b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082f9190611851565b507f7fcf532c15f0a6db0bd6d0e038bea71d30d808c7d98cb3bf7268a95bf5081b658284604051610861929190611f1f565b60405180910390a1505050565b610876611468565b73ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16148061090a57506108d4611468565b73ffffffffffffffffffffffffffffffffffffffff166108f2610ca8565b73ffffffffffffffffffffffffffffffffffffffff16145b610949576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161094090612062565b60405180910390fd5b610951611470565b565b60006005905090565b6060806109696004611519565b67ffffffffffffffff8111801561097f57600080fd5b506040519080825280602002602001820160405280156109ae5781602001602082028036833780820191505090505b50905060005b6109be6004611519565b811015610a2c576109d981600461152e90919063ffffffff16565b8282815181106109e557fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505080806001019150506109b4565b508091505090565b60008060149054906101000a900460ff16905090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610a78611468565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610b05576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610afc906120e2565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b610bcb611468565b73ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480610c5f5750610c29611468565b73ffffffffffffffffffffffffffffffffffffffff16610c47610ca8565b73ffffffffffffffffffffffffffffffffffffffff16145b610c9e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c9590612042565b60405180910390fd5b610ca6611548565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000610d01611468565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610d8e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d85906120e2565b60405180910390fd5b610d96610953565b600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054905010610e19576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e1090612102565b60405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd610e5f611468565b30866040518463ffffffff1660e01b8152600401610e7f93929190611ee8565b602060405180830381600087803b158015610e9957600080fd5b505af1158015610ead573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ed19190611851565b506001600360008282540192505081905550610ef78460046115f390919063ffffffff16565b506040518060800160405280600354815260200184815260200183815260200160001515815250600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600354815260200190815260200160002060008201518160000155602082015181600101556040820151816002015560608201518160030160006101000a81548160ff021916908315150217905550905050600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060035490806001815401808255809150506001900390600052602060002001600090919091909150557f032bc66be43dbccb7487781d168eb7bda224628a3b2c3388bdf69b532a3a161160035460405161104a9190612142565b60405180910390a160035490509392505050565b611066611468565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146110f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110ea906120e2565b60405180910390fd5b6000600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002090508060030160009054906101000a900460ff1615611199576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161119090612022565b60405180910390fd5b60006111a3611468565b905060008260010154905060008360010181905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff1660e01b8152600401611215929190611f1f565b602060405180830381600087803b15801561122f57600080fd5b505af1158015611243573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112679190611851565b507f61e27b0bfd8e18e6b92ec32ce1c28bb698d27bfe93e84c7e94d4db0a3135c760846040516112979190612142565b60405180910390a15050505050565b6112ae611468565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461133b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611332906120e2565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156113ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113a290612002565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600033905090565b600060149054906101000a900460ff166114bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114b690611fe2565b60405180910390fd5b60008060146101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa611502611468565b60405161150f9190611ecd565b60405180910390a1565b600061152782600001611623565b9050919050565b600061153d8360000183611634565b60001c905092915050565b600060149054906101000a900460ff1615611598576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161158f90612082565b60405180910390fd5b6001600060146101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586115dc611468565b6040516115e99190611ecd565b60405180910390a1565b600061161b836000018373ffffffffffffffffffffffffffffffffffffffff1660001b6116a1565b905092915050565b600081600001805490509050919050565b60008183600001805490501161167f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161167690611fc2565b60405180910390fd5b82600001828154811061168e57fe5b9060005260206000200154905092915050565b60006116ad8383611711565b61170657826000018290806001815401808255809150506001900390600052602060002001600090919091909150558260000180549050836001016000848152602001908152602001600020819055506001905061170b565b600090505b92915050565b600080836001016000848152602001908152602001600020541415905092915050565b60405180608001604052806000815260200160008152602001600081526020016000151581525090565b60008135905061176d81612282565b92915050565b60008151905061178281612299565b92915050565b600081359050611797816122b0565b92915050565b6000602082840312156117af57600080fd5b60006117bd8482850161175e565b91505092915050565b600080604083850312156117d957600080fd5b60006117e78582860161175e565b92505060206117f885828601611788565b9150509250929050565b60008060006060848603121561181757600080fd5b60006118258682870161175e565b935050602061183686828701611788565b925050604061184786828701611788565b9150509250925092565b60006020828403121561186357600080fd5b600061187184828501611773565b91505092915050565b60006020828403121561188c57600080fd5b600061189a84828501611788565b91505092915050565b60006118af83836118e2565b60208301905092915050565b60006118c78383611e3f565b60808301905092915050565b6118dc81612228565b82525050565b6118eb816121e0565b82525050565b6118fa816121e0565b82525050565b600061190b8261217d565b61191581856121ad565b93506119208361215d565b8060005b8381101561195157815161193888826118a3565b975061194383612193565b925050600181019050611924565b5085935050505092915050565b600061196982612188565b61197381856121be565b935061197e8361216d565b8060005b838110156119af57815161199688826118bb565b97506119a1836121a0565b925050600181019050611982565b5085935050505092915050565b6119c5816121f2565b82525050565b6119d4816121f2565b82525050565b6119e38161223a565b82525050565b60006119f66022836121cf565b91507f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e60008301527f64730000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000611a5c6014836121cf565b91507f5061757361626c653a206e6f74207061757365640000000000000000000000006000830152602082019050919050565b6000611a9c6026836121cf565b91507f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008301527f64647265737300000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000611b026021836121cf565b91507f56657374696e673a3a7265766f6b653a20616c7265616479207769746864726160008301527f77000000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000611b686041836121cf565b91507f4f776e61626c655061757361626c653a3a70617573653a206f6e6c792070617560008301527f73657220616e64206f776e6572206d75737420706175736520636f6e7472616360208301527f74000000000000000000000000000000000000000000000000000000000000006040830152606082019050919050565b6000611bf46045836121cf565b91507f4f776e61626c655061757361626c653a3a756e70617573653a206f6e6c79207060008301527f617573657220616e64206f776e6572206d75737420756e706175736520636f6e60208301527f74726163740000000000000000000000000000000000000000000000000000006040830152606082019050919050565b6000611c806010836121cf565b91507f5061757361626c653a20706175736564000000000000000000000000000000006000830152602082019050919050565b6000611cc06022836121cf565b91507f56657374696e673a3a77697468647261773a20706572696f6420697320656d7060008301527f74790000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000611d266020836121cf565b91507f56657374696e673a3a77697468647261773a206163636573732064656e6965646000830152602082019050919050565b6000611d666020836121cf565b91507f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726000830152602082019050919050565b6000611da6601f836121cf565b91507f56657374696e673a3a6c6f636b3a20746f6f206d616e7920706572696f6473006000830152602082019050919050565b6000611de66023836121cf565b91507f56657374696e673a3a77697468647261773a20616c726561647920776974686460008301527f72617700000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b608082016000820151611e556000850182611e94565b506020820151611e686020850182611e94565b506040820151611e7b6040850182611e94565b506060820151611e8e60608501826119bc565b50505050565b611e9d8161221e565b82525050565b611eac8161221e565b82525050565b6000602082019050611ec760008301846118f1565b92915050565b6000602082019050611ee260008301846118d3565b92915050565b6000606082019050611efd60008301866118d3565b611f0a60208301856118f1565b611f176040830184611ea3565b949350505050565b6000604082019050611f3460008301856118f1565b611f416020830184611ea3565b9392505050565b60006020820190508181036000830152611f628184611900565b905092915050565b60006020820190508181036000830152611f84818461195e565b905092915050565b6000602082019050611fa160008301846119cb565b92915050565b6000602082019050611fbc60008301846119da565b92915050565b60006020820190508181036000830152611fdb816119e9565b9050919050565b60006020820190508181036000830152611ffb81611a4f565b9050919050565b6000602082019050818103600083015261201b81611a8f565b9050919050565b6000602082019050818103600083015261203b81611af5565b9050919050565b6000602082019050818103600083015261205b81611b5b565b9050919050565b6000602082019050818103600083015261207b81611be7565b9050919050565b6000602082019050818103600083015261209b81611c73565b9050919050565b600060208201905081810360008301526120bb81611cb3565b9050919050565b600060208201905081810360008301526120db81611d19565b9050919050565b600060208201905081810360008301526120fb81611d59565b9050919050565b6000602082019050818103600083015261211b81611d99565b9050919050565b6000602082019050818103600083015261213b81611dd9565b9050919050565b60006020820190506121576000830184611ea3565b92915050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b60006121eb826121fe565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006122338261225e565b9050919050565b60006122458261224c565b9050919050565b6000612257826121fe565b9050919050565b600061226982612270565b9050919050565b600061227b826121fe565b9050919050565b61228b816121e0565b811461229657600080fd5b50565b6122a2816121f2565b81146122ad57600080fd5b50565b6122b98161221e565b81146122c457600080fd5b5056fea2646970667358221220ad006e1c101dcaabb530b9f91a22d5ea16861cdb0a61a7188cbed8218c5c658b64736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100f55760003560e01c806364c9ec6f116100975780639fd0506d116100665780639fd0506d14610216578063e2ab691d14610234578063eac449d914610264578063f2fde38b14610280576100f5565b806364c9ec6f146101c6578063715018a6146101e45780638456cb59146101ee5780638da5cb5b146101f8576100f5565b80633f4ba83a116100d35780633f4ba83a1461016257806351c2c1cc1461016c5780635aa68ac01461018a5780635c975abb146101a8576100f5565b80630aae7a6b146100fa5780632cd271e71461012a5780632e1a7d4d14610146575b600080fd5b610114600480360381019061010f919061179d565b61029c565b6040516101219190611f6a565b60405180910390f35b610144600480360381019061013f919061179d565b61049e565b005b610160600480360381019061015b919061187a565b6105d0565b005b61016a61086e565b005b610174610953565b6040516101819190612142565b60405180910390f35b61019261095c565b60405161019f9190611f48565b60405180910390f35b6101b0610a34565b6040516101bd9190611f8c565b60405180910390f35b6101ce610a4a565b6040516101db9190611fa7565b60405180910390f35b6101ec610a70565b005b6101f6610bc3565b005b610200610ca8565b60405161020d9190611eb2565b60405180910390f35b61021e610cd1565b60405161022b9190611eb2565b60405180910390f35b61024e60048036038101906102499190611802565b610cf7565b60405161025b9190612142565b60405180910390f35b61027e600480360381019061027991906117c6565b61105e565b005b61029a6004803603810190610295919061179d565b6112a6565b005b606080600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054905067ffffffffffffffff811180156102f857600080fd5b5060405190808252806020026020018201604052801561033257816020015b61031f611734565b8152602001906001900390816103175790505b50905060005b600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050811015610494576000600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002082815481106103ce57fe5b90600052602060002001549050600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008281526020019081526020016000206040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820160009054906101000a900460ff16151515158152505083838151811061047b57fe5b6020026020010181905250508080600101915050610338565b5080915050919050565b6104a6611468565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610533576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161052a906120e2565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fb80482a293ca2e013eda8683c9bd7fc8347cfdaeea5ede58cba46df502c2a604600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040516105c59190611eb2565b60405180910390a150565b600060149054906101000a900460ff1615610620576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161061790612082565b60405180910390fd5b600061062a611468565b90506000600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000848152602001908152602001600020905060008160010154116106c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106be906120a2565b60405180910390fd5b8060030160009054906101000a900460ff1615610719576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161071090612122565b60405180910390fd5b8060020154421161075f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610756906120c2565b60405180910390fd5b60018160030160006101000a81548160ff021916908315150217905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8383600101546040518363ffffffff1660e01b81526004016107dd929190611f1f565b602060405180830381600087803b1580156107f757600080fd5b505af115801561080b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082f9190611851565b507f7fcf532c15f0a6db0bd6d0e038bea71d30d808c7d98cb3bf7268a95bf5081b658284604051610861929190611f1f565b60405180910390a1505050565b610876611468565b73ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16148061090a57506108d4611468565b73ffffffffffffffffffffffffffffffffffffffff166108f2610ca8565b73ffffffffffffffffffffffffffffffffffffffff16145b610949576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161094090612062565b60405180910390fd5b610951611470565b565b60006005905090565b6060806109696004611519565b67ffffffffffffffff8111801561097f57600080fd5b506040519080825280602002602001820160405280156109ae5781602001602082028036833780820191505090505b50905060005b6109be6004611519565b811015610a2c576109d981600461152e90919063ffffffff16565b8282815181106109e557fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505080806001019150506109b4565b508091505090565b60008060149054906101000a900460ff16905090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610a78611468565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610b05576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610afc906120e2565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b610bcb611468565b73ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480610c5f5750610c29611468565b73ffffffffffffffffffffffffffffffffffffffff16610c47610ca8565b73ffffffffffffffffffffffffffffffffffffffff16145b610c9e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c9590612042565b60405180910390fd5b610ca6611548565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000610d01611468565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610d8e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d85906120e2565b60405180910390fd5b610d96610953565b600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054905010610e19576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e1090612102565b60405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd610e5f611468565b30866040518463ffffffff1660e01b8152600401610e7f93929190611ee8565b602060405180830381600087803b158015610e9957600080fd5b505af1158015610ead573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ed19190611851565b506001600360008282540192505081905550610ef78460046115f390919063ffffffff16565b506040518060800160405280600354815260200184815260200183815260200160001515815250600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600354815260200190815260200160002060008201518160000155602082015181600101556040820151816002015560608201518160030160006101000a81548160ff021916908315150217905550905050600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060035490806001815401808255809150506001900390600052602060002001600090919091909150557f032bc66be43dbccb7487781d168eb7bda224628a3b2c3388bdf69b532a3a161160035460405161104a9190612142565b60405180910390a160035490509392505050565b611066611468565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146110f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110ea906120e2565b60405180910390fd5b6000600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002090508060030160009054906101000a900460ff1615611199576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161119090612022565b60405180910390fd5b60006111a3611468565b905060008260010154905060008360010181905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff1660e01b8152600401611215929190611f1f565b602060405180830381600087803b15801561122f57600080fd5b505af1158015611243573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112679190611851565b507f61e27b0bfd8e18e6b92ec32ce1c28bb698d27bfe93e84c7e94d4db0a3135c760846040516112979190612142565b60405180910390a15050505050565b6112ae611468565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461133b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611332906120e2565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156113ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113a290612002565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600033905090565b600060149054906101000a900460ff166114bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114b690611fe2565b60405180910390fd5b60008060146101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa611502611468565b60405161150f9190611ecd565b60405180910390a1565b600061152782600001611623565b9050919050565b600061153d8360000183611634565b60001c905092915050565b600060149054906101000a900460ff1615611598576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161158f90612082565b60405180910390fd5b6001600060146101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586115dc611468565b6040516115e99190611ecd565b60405180910390a1565b600061161b836000018373ffffffffffffffffffffffffffffffffffffffff1660001b6116a1565b905092915050565b600081600001805490509050919050565b60008183600001805490501161167f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161167690611fc2565b60405180910390fd5b82600001828154811061168e57fe5b9060005260206000200154905092915050565b60006116ad8383611711565b61170657826000018290806001815401808255809150506001900390600052602060002001600090919091909150558260000180549050836001016000848152602001908152602001600020819055506001905061170b565b600090505b92915050565b600080836001016000848152602001908152602001600020541415905092915050565b60405180608001604052806000815260200160008152602001600081526020016000151581525090565b60008135905061176d81612282565b92915050565b60008151905061178281612299565b92915050565b600081359050611797816122b0565b92915050565b6000602082840312156117af57600080fd5b60006117bd8482850161175e565b91505092915050565b600080604083850312156117d957600080fd5b60006117e78582860161175e565b92505060206117f885828601611788565b9150509250929050565b60008060006060848603121561181757600080fd5b60006118258682870161175e565b935050602061183686828701611788565b925050604061184786828701611788565b9150509250925092565b60006020828403121561186357600080fd5b600061187184828501611773565b91505092915050565b60006020828403121561188c57600080fd5b600061189a84828501611788565b91505092915050565b60006118af83836118e2565b60208301905092915050565b60006118c78383611e3f565b60808301905092915050565b6118dc81612228565b82525050565b6118eb816121e0565b82525050565b6118fa816121e0565b82525050565b600061190b8261217d565b61191581856121ad565b93506119208361215d565b8060005b8381101561195157815161193888826118a3565b975061194383612193565b925050600181019050611924565b5085935050505092915050565b600061196982612188565b61197381856121be565b935061197e8361216d565b8060005b838110156119af57815161199688826118bb565b97506119a1836121a0565b925050600181019050611982565b5085935050505092915050565b6119c5816121f2565b82525050565b6119d4816121f2565b82525050565b6119e38161223a565b82525050565b60006119f66022836121cf565b91507f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e60008301527f64730000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000611a5c6014836121cf565b91507f5061757361626c653a206e6f74207061757365640000000000000000000000006000830152602082019050919050565b6000611a9c6026836121cf565b91507f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008301527f64647265737300000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000611b026021836121cf565b91507f56657374696e673a3a7265766f6b653a20616c7265616479207769746864726160008301527f77000000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000611b686041836121cf565b91507f4f776e61626c655061757361626c653a3a70617573653a206f6e6c792070617560008301527f73657220616e64206f776e6572206d75737420706175736520636f6e7472616360208301527f74000000000000000000000000000000000000000000000000000000000000006040830152606082019050919050565b6000611bf46045836121cf565b91507f4f776e61626c655061757361626c653a3a756e70617573653a206f6e6c79207060008301527f617573657220616e64206f776e6572206d75737420756e706175736520636f6e60208301527f74726163740000000000000000000000000000000000000000000000000000006040830152606082019050919050565b6000611c806010836121cf565b91507f5061757361626c653a20706175736564000000000000000000000000000000006000830152602082019050919050565b6000611cc06022836121cf565b91507f56657374696e673a3a77697468647261773a20706572696f6420697320656d7060008301527f74790000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000611d266020836121cf565b91507f56657374696e673a3a77697468647261773a206163636573732064656e6965646000830152602082019050919050565b6000611d666020836121cf565b91507f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726000830152602082019050919050565b6000611da6601f836121cf565b91507f56657374696e673a3a6c6f636b3a20746f6f206d616e7920706572696f6473006000830152602082019050919050565b6000611de66023836121cf565b91507f56657374696e673a3a77697468647261773a20616c726561647920776974686460008301527f72617700000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b608082016000820151611e556000850182611e94565b506020820151611e686020850182611e94565b506040820151611e7b6040850182611e94565b506060820151611e8e60608501826119bc565b50505050565b611e9d8161221e565b82525050565b611eac8161221e565b82525050565b6000602082019050611ec760008301846118f1565b92915050565b6000602082019050611ee260008301846118d3565b92915050565b6000606082019050611efd60008301866118d3565b611f0a60208301856118f1565b611f176040830184611ea3565b949350505050565b6000604082019050611f3460008301856118f1565b611f416020830184611ea3565b9392505050565b60006020820190508181036000830152611f628184611900565b905092915050565b60006020820190508181036000830152611f84818461195e565b905092915050565b6000602082019050611fa160008301846119cb565b92915050565b6000602082019050611fbc60008301846119da565b92915050565b60006020820190508181036000830152611fdb816119e9565b9050919050565b60006020820190508181036000830152611ffb81611a4f565b9050919050565b6000602082019050818103600083015261201b81611a8f565b9050919050565b6000602082019050818103600083015261203b81611af5565b9050919050565b6000602082019050818103600083015261205b81611b5b565b9050919050565b6000602082019050818103600083015261207b81611be7565b9050919050565b6000602082019050818103600083015261209b81611c73565b9050919050565b600060208201905081810360008301526120bb81611cb3565b9050919050565b600060208201905081810360008301526120db81611d19565b9050919050565b600060208201905081810360008301526120fb81611d59565b9050919050565b6000602082019050818103600083015261211b81611d99565b9050919050565b6000602082019050818103600083015261213b81611dd9565b9050919050565b60006020820190506121576000830184611ea3565b92915050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b60006121eb826121fe565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006122338261225e565b9050919050565b60006122458261224c565b9050919050565b6000612257826121fe565b9050919050565b600061226982612270565b9050919050565b600061227b826121fe565b9050919050565b61228b816121e0565b811461229657600080fd5b50565b6122a2816121f2565b81146122ad57600080fd5b50565b6122b98161221e565b81146122c457600080fd5b5056fea2646970667358221220ad006e1c101dcaabb530b9f91a22d5ea16861cdb0a61a7188cbed8218c5c658b64736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "changePauser(address)": {
        "params": {
          "newPauser": "Address of new pauser account."
        }
      },
      "constructor": {
        "params": {
          "_bond": "Address of Bond token contract."
        }
      },
      "getParticipants()": {
        "returns": {
          "_0": "Participants addresses."
        }
      },
      "info(address)": {
        "params": {
          "recipient": "Recipient address."
        },
        "returns": {
          "_0": "Recipient periods list."
        }
      },
      "lock(address,uint256,uint256)": {
        "params": {
          "amount": "Reward amount.",
          "date": "Date of unlockd period.",
          "recipient": "Recipient of reward."
        },
        "returns": {
          "_0": "Added period identifier."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "revoke(address,uint256)": {
        "params": {
          "periodId": "Period identifier.",
          "recipient": "Recipient of reward."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdraw(uint256)": {
        "params": {
          "periodId": "Target period identifier."
        }
      }
    },
    "stateVariables": {
      "currentPeriod": {
        "details": "Index last period."
      },
      "participants": {
        "details": "Participants list."
      },
      "periods": {
        "details": "All registered periods."
      },
      "periodsIndex": {
        "details": "Period identifiers index."
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "Locked(uint256)": {
        "notice": "An event emitted when locking a period."
      },
      "PauserChanged(address)": {
        "notice": "An event thats emitted when an pauser address changed."
      },
      "Revoked(uint256)": {
        "notice": "An event emitted when revoked a period."
      },
      "Withdrawal(address,uint256)": {
        "notice": "An event emitted when withdrawal a period."
      }
    },
    "kind": "user",
    "methods": {
      "bond()": {
        "notice": "Address of Bond token."
      },
      "changePauser(address)": {
        "notice": "Change pauser account."
      },
      "getParticipants()": {
        "notice": "Return all participants addresses."
      },
      "info(address)": {
        "notice": "Get information of period."
      },
      "lock(address,uint256,uint256)": {
        "notice": "Add new period."
      },
      "maxPeriodsPerRecipient()": {
        "notice": "The number of periods for a per recipient."
      },
      "pause()": {
        "notice": "Triggers stopped state."
      },
      "pauser()": {
        "notice": "Address that can pause a contract."
      },
      "revoke(address,uint256)": {
        "notice": "Revoke period."
      },
      "unpause()": {
        "notice": "Returns to normal state."
      },
      "withdraw(uint256)": {
        "notice": "Withdraw reward."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 30,
        "contract": "contracts/Vesting.sol:Vesting",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1733,
        "contract": "contracts/Vesting.sol:Vesting",
        "label": "_paused",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 11060,
        "contract": "contracts/Vesting.sol:Vesting",
        "label": "pauser",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 7590,
        "contract": "contracts/Vesting.sol:Vesting",
        "label": "bond",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(Bond)3169"
      },
      {
        "astId": 7603,
        "contract": "contracts/Vesting.sol:Vesting",
        "label": "currentPeriod",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 7606,
        "contract": "contracts/Vesting.sol:Vesting",
        "label": "participants",
        "offset": 0,
        "slot": "4",
        "type": "t_struct(AddressSet)1511_storage"
      },
      {
        "astId": 7613,
        "contract": "contracts/Vesting.sol:Vesting",
        "label": "periods",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Period)7599_storage))"
      },
      {
        "astId": 7619,
        "contract": "contracts/Vesting.sol:Vesting",
        "label": "periodsIndex",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(Bond)3169": {
        "encoding": "inplace",
        "label": "contract Bond",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(Period)7599_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct Vesting.Period))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(Period)7599_storage)"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(Period)7599_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Vesting.Period)",
        "numberOfBytes": "32",
        "value": "t_struct(Period)7599_storage"
      },
      "t_struct(AddressSet)1511_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 1510,
            "contract": "contracts/Vesting.sol:Vesting",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)1331_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Period)7599_storage": {
        "encoding": "inplace",
        "label": "struct Vesting.Period",
        "members": [
          {
            "astId": 7592,
            "contract": "contracts/Vesting.sol:Vesting",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 7594,
            "contract": "contracts/Vesting.sol:Vesting",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 7596,
            "contract": "contracts/Vesting.sol:Vesting",
            "label": "date",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 7598,
            "contract": "contracts/Vesting.sol:Vesting",
            "label": "withdrawal",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Set)1331_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 1326,
            "contract": "contracts/Vesting.sol:Vesting",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 1330,
            "contract": "contracts/Vesting.sol:Vesting",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}