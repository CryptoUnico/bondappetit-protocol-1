{
  "address": "0x405D96e61FabbEe6c3df4b63C2a74CA9b22EB34A",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_incoming",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_uniswapRouter",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newBudget",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newBalance",
          "type": "uint256"
        }
      ],
      "name": "BudgetChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newIncoming",
          "type": "address"
        }
      ],
      "name": "IncomingChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newPauser",
          "type": "address"
        }
      ],
      "name": "PauserChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PayToBudget",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PayToRecipient",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "share",
          "type": "uint256"
        }
      ],
      "name": "RecipientAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "RecipientRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newUniswapRouter",
          "type": "address"
        }
      ],
      "name": "UniswapRouterChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "SHARE_ACCURACY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SHARE_DIGITS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "share",
          "type": "uint256"
        }
      ],
      "name": "addRecipient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "budget",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "budgetBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_budget",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_budgetBalance",
          "type": "uint256"
        }
      ],
      "name": "changeBudget",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_incoming",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        }
      ],
      "name": "changeIncoming",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newPauser",
          "type": "address"
        }
      ],
      "name": "changePauser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_uniswapRouter",
          "type": "address"
        }
      ],
      "name": "changeUniswapRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRecipients",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "incoming",
      "outputs": [
        {
          "internalType": "contract ERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pauser",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "removeRecipient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "shares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "split",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uniswapRouter",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Router02",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xbc368cec69c3643b5d813b5f75e8806c0d26210cd405abdf12932861e6ec3f8c",
  "receipt": {
    "to": null,
    "from": "0x9403932015576D13Fb26B135ed7a35d5d95C18d4",
    "contractAddress": "0x405D96e61FabbEe6c3df4b63C2a74CA9b22EB34A",
    "transactionIndex": 0,
    "gasUsed": "3687744",
    "logsBloom": "0x
    "blockHash": "0x5847465c239c7020edcb2341968a179167a853946e608b689e5f6dfed0d6ff14",
    "transactionHash": "0xbc368cec69c3643b5d813b5f75e8806c0d26210cd405abdf12932861e6ec3f8c",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 9419825,
        "transactionHash": "0xbc368cec69c3643b5d813b5f75e8806c0d26210cd405abdf12932861e6ec3f8c",
        "address": "0x405D96e61FabbEe6c3df4b63C2a74CA9b22EB34A",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000009403932015576d13fb26b135ed7a35d5d95c18d4"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x5847465c239c7020edcb2341968a179167a853946e608b689e5f6dfed0d6ff14"
      }
    ],
    "blockNumber": 9419825,
    "cumulativeGasUsed": "3687744",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0D9C8723B343A8368BebE0B5E89273fF8D712e3C",
    "0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D"
  ],
  "solcInputHash": "d4e6b24741ec8c257cba2a4163aec232",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_incoming\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniswapRouter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newBudget\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"BudgetChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newIncoming\",\"type\":\"address\"}],\"name\":\"IncomingChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPauser\",\"type\":\"address\"}],\"name\":\"PauserChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PayToBudget\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PayToRecipient\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"name\":\"RecipientAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"RecipientRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newUniswapRouter\",\"type\":\"address\"}],\"name\":\"UniswapRouterChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"SHARE_ACCURACY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SHARE_DIGITS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"name\":\"addRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"budget\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"budgetBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_budget\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_budgetBalance\",\"type\":\"uint256\"}],\"name\":\"changeBudget\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_incoming\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"changeIncoming\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPauser\",\"type\":\"address\"}],\"name\":\"changePauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_uniswapRouter\",\"type\":\"address\"}],\"name\":\"changeUniswapRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRecipients\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"incoming\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauser\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"removeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"split\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapRouter\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addRecipient(address,uint256)\":{\"params\":{\"recipient\":\"Address of recipient contract.\",\"share\":\"Target share.\"}},\"changeBudget(address,uint256)\":{\"params\":{\"_budget\":\"Address of budget contract.\",\"_budgetBalance\":\"Target budget balance.\"}},\"changeIncoming(address,address)\":{\"params\":{\"_incoming\":\"New incoming token address.\",\"_recipient\":\"Address of recipient.\"}},\"changePauser(address)\":{\"params\":{\"newPauser\":\"Address of new pauser account.\"}},\"changeUniswapRouter(address)\":{\"params\":{\"_uniswapRouter\":\"Address new uniswap router contract.\"}},\"constructor\":{\"params\":{\"_incoming\":\"Address of incoming token.\",\"_uniswapRouter\":\"Address of Uniswap router contract.\"}},\"getRecipients()\":{\"returns\":{\"_0\":\"Current recipients list.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"removeRecipient(address)\":{\"params\":{\"recipient\":\"Address of recipient contract.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"split(uint256)\":{\"params\":{\"amount\":\"Approved amount incoming token.\"}},\"transfer(address,uint256)\":{\"params\":{\"_recipient\":\"Address of recipient.\",\"amount\":\"Amount of transferred token.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"recipientsIndex\":{\"details\":\"Recipients addresses index.\"}},\"version\":1},\"userdoc\":{\"events\":{\"BudgetChanged(address,uint256)\":{\"notice\":\"An event thats emitted when an budget contract address and target balance changed.\"},\"IncomingChanged(address)\":{\"notice\":\"An event thats emitted when an incoming token changed.\"},\"PauserChanged(address)\":{\"notice\":\"An event thats emitted when an pauser address changed.\"},\"PayToBudget(address,uint256)\":{\"notice\":\"An event thats emitted when an profit payed to budget.\"},\"PayToRecipient(address,uint256)\":{\"notice\":\"An event thats emitted when an profit payed to recipient.\"},\"RecipientAdded(address,uint256)\":{\"notice\":\"An event thats emitted when an recipient added.\"},\"RecipientRemoved(address)\":{\"notice\":\"An event thats emitted when an recipient removed.\"},\"Transfer(address,uint256)\":{\"notice\":\"An event thats emitted when an incoming token transferred to recipient.\"},\"UniswapRouterChanged(address)\":{\"notice\":\"An event thats emitted when an uniswap router contract address changed.\"}},\"kind\":\"user\",\"methods\":{\"addRecipient(address,uint256)\":{\"notice\":\"Add recipient.\"},\"budget()\":{\"notice\":\"Budget contract address.\"},\"budgetBalance()\":{\"notice\":\"Target budget ETH balance.\"},\"changeBudget(address,uint256)\":{\"notice\":\"Changed budget contract address and target balance.\"},\"changeIncoming(address,address)\":{\"notice\":\"Change incoming token address.\"},\"changePauser(address)\":{\"notice\":\"Change pauser account.\"},\"changeUniswapRouter(address)\":{\"notice\":\"Changed uniswap router contract address.\"},\"getRecipients()\":{\"notice\":\"Get addresses of recipients.\"},\"incoming()\":{\"notice\":\"Incoming token.\"},\"pause()\":{\"notice\":\"Triggers stopped state.\"},\"pauser()\":{\"notice\":\"Address that can pause a contract.\"},\"removeRecipient(address)\":{\"notice\":\"Remove recipient.\"},\"shares(address)\":{\"notice\":\"Recipients share.\"},\"split(uint256)\":{\"notice\":\"Split all incoming token balance to recipients and budget contract.\"},\"transfer(address,uint256)\":{\"notice\":\"Transfer incoming token to recipient.\"},\"uniswapRouter()\":{\"notice\":\"Uniswap router contract address.\"},\"unpause()\":{\"notice\":\"Returns to normal state.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/profit/ProfitSplitter.sol\":\"ProfitSplitter\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/GSN/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xdb26cbf4d028490f49831a7865c2fe1b28db44b535ca8d343785a3b768aae183\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x4bd6402ca6b3419008c2b482aff54e66836e8cb4eba2680e42ac5884ae6424fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x9a9cf02622cd7a64261b10534fc3260449da25c98c9e96d1b4ae8110a20e5806\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name, string memory symbol) public {\\n        _name = name;\\n        _symbol = symbol;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20};\\n     *\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0x91e0bd6a6762d2a1700dab0849de8422611355100576c4beef1e80d82a4104a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5c26b39d26f7ed489e555d955dcd3e01872972e71fdd1528e93ec164e4f23385\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf3b30f8a49631420635a8c35daacfcaa338012755f18a76fdd118730256f9a27\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies in extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf5fa8cbdffa5ef8be49b246b5628facc30b71707e78a45d80d93b64eff3fe390\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.0.0, only sets of type `address` (`AddressSet`) and `uint256`\\n * (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint256(_at(set._inner, index)));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0xb2a11b236f073662f5a196995863f51c11d006bf7c3de158b316dfa1506c4b79\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\ncontract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor () internal {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!_paused, \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(_paused, \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x5d1b1dcbc0396f44c1c8d554857f71e3187503bf1e54062bf9ec6782e21f3a08\",\"license\":\"MIT\"},\"contracts/profit/ProfitSplitter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/EnumerableSet.sol\\\";\\nimport \\\"../utils/OwnablePausable.sol\\\";\\nimport \\\"../uniswap/IUniswapV2Router02.sol\\\";\\n\\ncontract ProfitSplitter is OwnablePausable {\\n    using SafeMath for uint256;\\n    using SafeERC20 for ERC20;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    uint256 public constant SHARE_ACCURACY = 6;\\n\\n    uint256 public constant SHARE_DIGITS = 2;\\n\\n    /// @notice Incoming token.\\n    ERC20 public incoming;\\n\\n    /// @notice Budget contract address.\\n    address payable public budget;\\n\\n    /// @notice Target budget ETH balance.\\n    uint256 public budgetBalance;\\n\\n    /// @notice Recipients share.\\n    mapping(address => uint256) public shares;\\n\\n    /// @dev Recipients addresses index.\\n    EnumerableSet.AddressSet private recipientsIndex;\\n\\n    /// @notice Uniswap router contract address.\\n    IUniswapV2Router02 public uniswapRouter;\\n\\n    /// @notice An event thats emitted when an incoming token transferred to recipient.\\n    event Transfer(address recipient, uint256 amount);\\n\\n    /// @notice An event thats emitted when an budget contract address and target balance changed.\\n    event BudgetChanged(address newBudget, uint256 newBalance);\\n\\n    /// @notice An event thats emitted when an incoming token changed.\\n    event IncomingChanged(address newIncoming);\\n\\n    /// @notice An event thats emitted when an uniswap router contract address changed.\\n    event UniswapRouterChanged(address newUniswapRouter);\\n\\n    /// @notice An event thats emitted when an recipient added.\\n    event RecipientAdded(address recipient, uint256 share);\\n\\n    /// @notice An event thats emitted when an recipient removed.\\n    event RecipientRemoved(address recipient);\\n\\n    /// @notice An event thats emitted when an profit payed to budget.\\n    event PayToBudget(address recipient, uint256 amount);\\n\\n    /// @notice An event thats emitted when an profit payed to recipient.\\n    event PayToRecipient(address recipient, uint256 amount);\\n\\n    receive() external payable {}\\n\\n    /**\\n     * @param _incoming Address of incoming token.\\n     * @param _uniswapRouter Address of Uniswap router contract.\\n     */\\n    constructor(address _incoming, address _uniswapRouter) public {\\n        incoming = ERC20(_incoming);\\n        uniswapRouter = IUniswapV2Router02(_uniswapRouter);\\n    }\\n\\n    /**\\n     * @notice Changed uniswap router contract address.\\n     * @param _uniswapRouter Address new uniswap router contract.\\n     */\\n    function changeUniswapRouter(address _uniswapRouter) external onlyOwner {\\n        uniswapRouter = IUniswapV2Router02(_uniswapRouter);\\n        emit UniswapRouterChanged(_uniswapRouter);\\n    }\\n\\n    /**\\n     * @notice Changed budget contract address and target balance.\\n     * @param _budget Address of budget contract.\\n     * @param _budgetBalance Target budget balance.\\n     */\\n    function changeBudget(address payable _budget, uint256 _budgetBalance) external onlyOwner {\\n        budget = _budget;\\n        budgetBalance = _budgetBalance;\\n        emit BudgetChanged(budget, budgetBalance);\\n    }\\n\\n    /**\\n     * @notice Transfer incoming token to recipient.\\n     * @param _recipient Address of recipient.\\n     * @param amount Amount of transferred token.\\n     */\\n    function transfer(address _recipient, uint256 amount) public onlyOwner {\\n        require(_recipient != address(0), \\\"ProfitSplitter::transfer: cannot transfer to the zero address\\\");\\n\\n        incoming.safeTransfer(_recipient, amount);\\n        emit Transfer(_recipient, amount);\\n    }\\n\\n    /**\\n     * @notice Change incoming token address.\\n     * @param _incoming New incoming token address.\\n     * @param _recipient Address of recipient.\\n     */\\n    function changeIncoming(address _incoming, address _recipient) external onlyOwner {\\n        require(address(incoming) != _incoming, \\\"ProfitSplitter::changeIncoming: duplicate incoming token address\\\");\\n\\n        uint256 balance = incoming.balanceOf(address(this));\\n        if (balance > 0) {\\n            transfer(_recipient, balance);\\n        }\\n        incoming = ERC20(_incoming);\\n        emit IncomingChanged(_incoming);\\n    }\\n\\n    /**\\n     * @dev Current share value.\\n     * @return result Current share value.\\n     */\\n    function _currentShare() internal view returns (uint256 result) {\\n        for (uint256 i = 0; i < recipientsIndex.length(); i++) {\\n            result = result.add(shares[recipientsIndex.at(i)]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Add recipient.\\n     * @param recipient Address of recipient contract.\\n     * @param share Target share.\\n     */\\n    function addRecipient(address recipient, uint256 share) external onlyOwner {\\n        require(!recipientsIndex.contains(recipient), \\\"ProfitSplitter::addRecipient: recipient already added\\\");\\n        require(_currentShare().add(share) <= 100, \\\"ProfitSplitter::addRecipient: invalid share\\\");\\n\\n        recipientsIndex.add(recipient);\\n        shares[recipient] = share;\\n        emit RecipientAdded(recipient, share);\\n    }\\n\\n    /**\\n     * @notice Remove recipient.\\n     * @param recipient Address of recipient contract.\\n     */\\n    function removeRecipient(address recipient) external onlyOwner {\\n        require(recipientsIndex.contains(recipient), \\\"ProfitSplitter::removeRecipient: recipient already removed\\\");\\n\\n        recipientsIndex.remove(recipient);\\n        shares[recipient] = 0;\\n        emit RecipientRemoved(recipient);\\n    }\\n\\n    /**\\n     * @notice Get addresses of recipients.\\n     * @return Current recipients list.\\n     */\\n    function getRecipients() public view returns (address[] memory) {\\n        address[] memory result = new address[](recipientsIndex.length());\\n\\n        for (uint256 i = 0; i < recipientsIndex.length(); i++) {\\n            result[i] = recipientsIndex.at(i);\\n        }\\n\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Pay ETH to budget contract.\\n     */\\n    function _payToBudget() internal returns (bool) {\\n        uint256 splitterIncomingBalance = incoming.balanceOf(address(this));\\n        if (splitterIncomingBalance == 0) return false;\\n\\n        uint256 currentBudgetBalance = budget.balance;\\n        if (currentBudgetBalance >= budgetBalance) return false;\\n\\n        uint256 amount = budgetBalance.sub(currentBudgetBalance);\\n        uint256 splitterEthBalance = address(this).balance;\\n        if (splitterEthBalance < amount) {\\n            uint256 amountOut = amount.sub(splitterEthBalance);\\n\\n            address[] memory path = new address[](2);\\n            path[0] = address(incoming);\\n            path[1] = uniswapRouter.WETH();\\n\\n            uint256[] memory amountsIn = uniswapRouter.getAmountsIn(amountOut, path);\\n            require(amountsIn.length == 2, \\\"ProfitSplitter::_payToBudget: invalid amounts in length\\\");\\n            require(amountsIn[0] > 0, \\\"ProfitSplitter::_payToBudget: liquidity pool is empty\\\");\\n            if (amountsIn[0] <= splitterIncomingBalance) {\\n                incoming.safeApprove(address(uniswapRouter), amountsIn[0]);\\n                uniswapRouter.swapTokensForExactETH(amountOut, amountsIn[0], path, address(this), block.timestamp);\\n            } else {\\n                uint256[] memory amountsOut = uniswapRouter.getAmountsOut(splitterIncomingBalance, path);\\n                require(amountsOut.length == 2, \\\"ProfitSplitter::_payToBudget: invalid amounts out length\\\");\\n                require(amountsOut[1] > 0, \\\"ProfitSplitter::_payToBudget: amounts out liquidity pool is empty\\\");\\n\\n                amount = amountsOut[1];\\n\\n                incoming.safeApprove(address(uniswapRouter), splitterIncomingBalance);\\n                uniswapRouter.swapExactTokensForETH(splitterIncomingBalance, amountsOut[1], path, address(this), block.timestamp);\\n            }\\n        }\\n\\n        budget.transfer(amount);\\n        emit PayToBudget(budget, amount);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Pay incoming token to all recipients.\\n     */\\n    function _payToRecipients() internal returns (bool) {\\n        uint256 splitterIncomingBalance = incoming.balanceOf(address(this));\\n        if (splitterIncomingBalance == 0) return false;\\n\\n        for (uint256 i = 0; i < recipientsIndex.length(); i++) {\\n            address recipient = recipientsIndex.at(i);\\n            uint256 share = shares[recipient];\\n\\n            uint256 amount = splitterIncomingBalance.mul(10**SHARE_ACCURACY).mul(share).div(10**SHARE_ACCURACY.add(SHARE_DIGITS));\\n            incoming.safeTransfer(recipient, amount);\\n\\n            emit PayToRecipient(recipient, amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Split all incoming token balance to recipients and budget contract.\\n     * @param amount Approved amount incoming token.\\n     */\\n    function split(uint256 amount) external whenNotPaused {\\n        if (amount > 0) {\\n            incoming.safeTransferFrom(msg.sender, address(this), amount);\\n        }\\n\\n        _payToBudget();\\n        _payToRecipients();\\n    }\\n}\\n\",\"keccak256\":\"0xadc367571afa4f3eeb879ff6bcc2712829872c8be559065e44be5a8e40798133\",\"license\":\"MIT\"},\"contracts/uniswap/IUniswapV2Router02.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\ninterface IUniswapV2Router02 {\\n    function factory() external pure returns (address);\\n\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountETH,\\n            uint256 liquidity\\n        );\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETH(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactETHForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactETH(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForETH(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapETHForExactTokens(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) external pure returns (uint256 amountB);\\n\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountOut);\\n\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountIn);\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\\n\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountETH);\\n\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable;\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0xe82e348bfca27671354f43c6e0571e23f6d3257cb9221c3757995788cb524d37\",\"license\":\"MIT\"},\"contracts/utils/OwnablePausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\n\\ncontract OwnablePausable is Ownable, Pausable {\\n    /// @notice Address that can pause a contract.\\n    address public pauser;\\n\\n    /// @notice An event thats emitted when an pauser address changed.\\n    event PauserChanged(address newPauser);\\n\\n    constructor() internal {\\n        pauser = owner();\\n    }\\n\\n    /**\\n     * @notice Change pauser account.\\n     * @param newPauser Address of new pauser account.\\n     */\\n    function changePauser(address newPauser) external onlyOwner {\\n        pauser = newPauser;\\n        emit PauserChanged(pauser);\\n    }\\n\\n    /**\\n     * @notice Triggers stopped state.\\n     */\\n    function pause() public virtual {\\n        require(pauser == _msgSender() || owner() == _msgSender(), \\\"OwnablePausable::pause: only pauser and owner must pause contract\\\");\\n        _pause();\\n    }\\n\\n    /**\\n     * @notice Returns to normal state.\\n     */\\n    function unpause() public virtual {\\n        require(pauser == _msgSender() || owner() == _msgSender(), \\\"OwnablePausable::unpause: only pauser and owner must unpause contract\\\");\\n        _unpause();\\n    }\\n}\\n\",\"keccak256\":\"0x865125c578244d8e7240cfe61b8591c6bcc2b05f88ee64aee28fd1ba10f3f4df\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200441638038062004416833981810160405281019062000037919062000223565b600062000049620001db60201b60201c565b9050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35060008060146101000a81548160ff02191690831515021790555062000111620001e360201b60201c565b600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050620002b2565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000815190506200021d8162000298565b92915050565b600080604083850312156200023757600080fd5b600062000247858286016200020c565b92505060206200025a858286016200020c565b9150509250929050565b6000620002718262000278565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b620002a38162000264565b8114620002af57600080fd5b50565b61415480620002c26000396000f3fe6080604052600436106101445760003560e01c80638da5cb5b116100b6578063d78d610b1161006f578063d78d610b146103f7578063dbceb00514610422578063ed01bf291461044b578063f2fde38b14610476578063f6dedc3f1461049f578063f7982243146104c85761014b565b80638da5cb5b146102e75780639fc8f2fe146103125780639fd0506d1461033d578063a9059cbb14610368578063c337083714610391578063ce7c2ac2146103ba5761014b565b8063562400fb11610108578063562400fb1461020d5780635c975abb14610238578063715018a614610263578063735de9f71461027a578063756043c3146102a55780638456cb59146102d05761014b565b806312a29198146101505780632cd271e7146101795780633f4ba83a146101a257806348249787146101b957806351e8b2b8146101e45761014b565b3661014b57005b600080fd5b34801561015c57600080fd5b5061017760048036038101906101729190612ec6565b6104f1565b005b34801561018557600080fd5b506101a0600480360381019061019b9190612ec6565b61066d565b005b3480156101ae57600080fd5b506101b761079f565b005b3480156101c557600080fd5b506101ce610884565b6040516101db9190613e41565b60405180910390f35b3480156101f057600080fd5b5061020b60048036038101906102069190612f18565b61088a565b005b34801561021957600080fd5b506102226109c8565b60405161022f9190613e41565b60405180910390f35b34801561024457600080fd5b5061024d6109cd565b60405161025a9190613b2e565b60405180910390f35b34801561026f57600080fd5b506102786109e3565b005b34801561028657600080fd5b5061028f610b36565b60405161029c9190613b64565b60405180910390f35b3480156102b157600080fd5b506102ba610b5c565b6040516102c79190613e41565b60405180910390f35b3480156102dc57600080fd5b506102e5610b61565b005b3480156102f357600080fd5b506102fc610c46565b6040516103099190613a09565b60405180910390f35b34801561031e57600080fd5b50610327610c6f565b6040516103349190613b49565b60405180910390f35b34801561034957600080fd5b50610352610c95565b60405161035f9190613a09565b60405180910390f35b34801561037457600080fd5b5061038f600480360381019061038a9190612f90565b610cbb565b005b34801561039d57600080fd5b506103b860048036038101906103b39190612ec6565b610e4a565b005b3480156103c657600080fd5b506103e160048036038101906103dc9190612ec6565b610f5a565b6040516103ee9190613e41565b60405180910390f35b34801561040357600080fd5b5061040c610f72565b6040516104199190613b0c565b60405180910390f35b34801561042e57600080fd5b5061044960048036038101906104449190613036565b61104a565b005b34801561045757600080fd5b50610460611108565b60405161046d9190613a3f565b60405180910390f35b34801561048257600080fd5b5061049d60048036038101906104989190612ec6565b61112e565b005b3480156104ab57600080fd5b506104c660048036038101906104c19190612f54565b6112f0565b005b3480156104d457600080fd5b506104ef60048036038101906104ea9190612f90565b611556565b005b6104f9611732565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610586576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057d90613ce1565b60405180910390fd5b61059a81600661173a90919063ffffffff16565b6105d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105d090613dc1565b60405180910390fd5b6105ed81600661176a90919063ffffffff16565b506000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507f8176fc5412eb5076fee7f1a264915b808c24d495c2698c189030e5200e707d25816040516106629190613a09565b60405180910390a150565b610675611732565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610702576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106f990613ce1565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fb80482a293ca2e013eda8683c9bd7fc8347cfdaeea5ede58cba46df502c2a604600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040516107949190613a09565b60405180910390a150565b6107a7611732565b73ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16148061083b5750610805611732565b73ffffffffffffffffffffffffffffffffffffffff16610823610c46565b73ffffffffffffffffffffffffffffffffffffffff16145b61087a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161087190613c21565b60405180910390fd5b61088261179a565b565b60045481565b610892611732565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461091f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161091690613ce1565b60405180910390fd5b81600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550806004819055507f5525073b5c48f4c3eb60e9fb2683ee9af96b397fc711f96129331b6fb337439d600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166004546040516109bc929190613a5a565b60405180910390a15050565b600681565b60008060149054906101000a900460ff16905090565b6109eb611732565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610a78576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a6f90613ce1565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600281565b610b69611732565b73ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480610bfd5750610bc7611732565b73ffffffffffffffffffffffffffffffffffffffff16610be5610c46565b73ffffffffffffffffffffffffffffffffffffffff16145b610c3c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c3390613c01565b60405180910390fd5b610c44611843565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610cc3611732565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610d50576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d4790613ce1565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610dc0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610db790613d01565b60405180910390fd5b610e0d8282600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166118ee9092919063ffffffff16565b7f69ca02dd4edd7bf0a4abb9ed3b7af3f14778db5d61921c7dc7cd545266326de28282604051610e3e929190613ae3565b60405180910390a15050565b610e52611732565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610edf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ed690613ce1565b60405180910390fd5b80600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f0a3776494a324cdd72863deb1475d9eb705db96d66e7e199f3ebe4948343a43881604051610f4f9190613a09565b60405180910390a150565b60056020528060005260406000206000915090505481565b606080610f7f6006611974565b67ffffffffffffffff81118015610f9557600080fd5b50604051908082528060200260200182016040528015610fc45781602001602082028036833780820191505090505b50905060005b610fd46006611974565b81101561104257610fef81600661198990919063ffffffff16565b828281518110610ffb57fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508080600101915050610fca565b508091505090565b600060149054906101000a900460ff161561109a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161109190613c81565b60405180910390fd5b60008111156110f3576110f2333083600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166119a3909392919063ffffffff16565b5b6110fb611a2c565b5061110461235a565b5050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b611136611732565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146111c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111ba90613ce1565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611233576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161122a90613be1565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6112f8611732565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611385576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161137c90613ce1565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415611416576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161140d90613c61565b60405180910390fd5b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016114739190613a24565b60206040518083038186803b15801561148b57600080fd5b505afa15801561149f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114c3919061305f565b905060008111156114d9576114d88282610cbb565b5b82600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fefe17208340787cbdf98b690d3d3dc01263f933ae65ed1a4d95f34607ab3af42836040516115499190613a09565b60405180910390a1505050565b61155e611732565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146115eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115e290613ce1565b60405180910390fd5b6115ff82600661173a90919063ffffffff16565b1561163f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161163690613d21565b60405180910390fd5b606461165b8261164d612583565b61261490919063ffffffff16565b111561169c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161169390613e21565b60405180910390fd5b6116b082600661266990919063ffffffff16565b5080600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507f79e1204b22e0669817ad586b72c3139f6c32afa18749b53228050f4c7f6964678282604051611726929190613ae3565b60405180910390a15050565b600033905090565b6000611762836000018373ffffffffffffffffffffffffffffffffffffffff1660001b612699565b905092915050565b6000611792836000018373ffffffffffffffffffffffffffffffffffffffff1660001b6126bc565b905092915050565b600060149054906101000a900460ff166117e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117e090613bc1565b60405180910390fd5b60008060146101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa61182c611732565b6040516118399190613a24565b60405180910390a1565b600060149054906101000a900460ff1615611893576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161188a90613c81565b60405180910390fd5b6001600060146101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586118d7611732565b6040516118e49190613a24565b60405180910390a1565b61196f8363a9059cbb60e01b848460405160240161190d929190613ae3565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506127a4565b505050565b60006119828260000161286b565b9050919050565b6000611998836000018361287c565b60001c905092915050565b611a26846323b872dd60e01b8585856040516024016119c493929190613aac565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506127a4565b50505050565b600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611a8a9190613a24565b60206040518083038186803b158015611aa257600080fd5b505afa158015611ab6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ada919061305f565b90506000811415611aef576000915050612357565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163190506004548110611b4157600092505050612357565b6000611b58826004546128e990919063ffffffff16565b905060004790508181101561228a576000611b7c82846128e990919063ffffffff16565b90506060600267ffffffffffffffff81118015611b9857600080fd5b50604051908082528060200260200182016040528015611bc75781602001602082028036833780820191505090505b509050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681600081518110611bfa57fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ad5c46486040518163ffffffff1660e01b815260040160206040518083038186803b158015611c9c57600080fd5b505afa158015611cb0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cd49190612eef565b81600181518110611ce157fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506060600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631f00ca7484846040518363ffffffff1660e01b8152600401611d7a929190613e5c565b60006040518083038186803b158015611d9257600080fd5b505afa158015611da6573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190611dcf9190612fcc565b90506002815114611e15576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e0c90613e01565b60405180910390fd5b600081600081518110611e2457fe5b602002602001015111611e6c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e6390613d41565b60405180910390fd5b8681600081518110611e7a57fe5b602002602001015111611fde57611f0a600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682600081518110611eba57fe5b6020026020010151600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166129339092919063ffffffff16565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634a25d94a8483600081518110611f5657fe5b60200260200101518530426040518663ffffffff1660e01b8152600401611f81959493929190613e8c565b600060405180830381600087803b158015611f9b57600080fd5b505af1158015611faf573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190611fd89190612fcc565b50612286565b6060600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d06ca61f89856040518363ffffffff1660e01b815260040161203d929190613e5c565b60006040518083038186803b15801561205557600080fd5b505afa158015612069573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906120929190612fcc565b905060028151146120d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120cf90613d81565b60405180910390fd5b6000816001815181106120e757fe5b60200260200101511161212f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161212690613ca1565b60405180910390fd5b8060018151811061213c57fe5b602002602001015195506121b5600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1689600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166129339092919063ffffffff16565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318cbafe5898360018151811061220157fe5b60200260200101518630426040518663ffffffff1660e01b815260040161222c959493929190613e8c565b600060405180830381600087803b15801561224657600080fd5b505af115801561225a573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906122839190612fcc565b50505b5050505b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f193505050501580156122f2573d6000803e3d6000fd5b507faf728e27f6982cf8664dd0a502802370b9c71a6e3e2ccf57a9656fa408a51b8e600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683604051612346929190613a5a565b60405180910390a160019450505050505b90565b600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016123b89190613a24565b60206040518083038186803b1580156123d057600080fd5b505afa1580156123e4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612408919061305f565b9050600081141561241d576000915050612580565b60005b61242a6006611974565b81101561257957600061244782600661198990919063ffffffff16565b90506000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060006124e16124a76002600661261490919063ffffffff16565b600a0a6124d3846124c56006600a0a8a612a9190919063ffffffff16565b612a9190919063ffffffff16565b612b0190919063ffffffff16565b90506125308382600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166118ee9092919063ffffffff16565b7f89a2b21c9895bbb8506e9de454d15ab9cf93782b8d2a4b61120331c3610b35ee8382604051612561929190613ae3565b60405180910390a15050508080600101915050612420565b5060019150505b90565b600080600090505b6125956006611974565b81101561261057612601600560006125b784600661198990919063ffffffff16565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548361261490919063ffffffff16565b9150808060010191505061258b565b5090565b60008082840190508381101561265f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161265690613c41565b60405180910390fd5b8091505092915050565b6000612691836000018373ffffffffffffffffffffffffffffffffffffffff1660001b612b4b565b905092915050565b600080836001016000848152602001908152602001600020541415905092915050565b60008083600101600084815260200190815260200160002054905060008114612798576000600182039050600060018660000180549050039050600086600001828154811061270757fe5b906000526020600020015490508087600001848154811061272457fe5b906000526020600020018190555060018301876001016000838152602001908152602001600020819055508660000180548061275c57fe5b6001900381819060005260206000200160009055905586600101600087815260200190815260200160002060009055600194505050505061279e565b60009150505b92915050565b6060612806826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16612bbb9092919063ffffffff16565b90506000815111156128665780806020019051810190612826919061300d565b612865576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161285c90613da1565b60405180910390fd5b5b505050565b600081600001805490509050919050565b6000818360000180549050116128c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128be90613ba1565b60405180910390fd5b8260000182815481106128d657fe5b9060005260206000200154905092915050565b600061292b83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250612bd3565b905092915050565b60008114806129cc575060008373ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30856040518363ffffffff1660e01b815260040161297a929190613a83565b60206040518083038186803b15801561299257600080fd5b505afa1580156129a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129ca919061305f565b145b612a0b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a0290613de1565b60405180910390fd5b612a8c8363095ea7b360e01b8484604051602401612a2a929190613ae3565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506127a4565b505050565b600080831415612aa45760009050612afb565b6000828402905082848281612ab557fe5b0414612af6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612aed90613cc1565b60405180910390fd5b809150505b92915050565b6000612b4383836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250612c2e565b905092915050565b6000612b578383612699565b612bb0578260000182908060018154018082558091505060019003906000526020600020016000909190919091505582600001805490508360010160008481526020019081526020016000208190555060019050612bb5565b600090505b92915050565b6060612bca8484600085612c8f565b90509392505050565b6000838311158290612c1b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c129190613b7f565b60405180910390fd5b5060008385039050809150509392505050565b60008083118290612c75576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c6c9190613b7f565b60405180910390fd5b506000838581612c8157fe5b049050809150509392505050565b6060612c9a85612db2565b612cd9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612cd090613d61565b60405180910390fd5b600060608673ffffffffffffffffffffffffffffffffffffffff168587604051612d0391906139f2565b60006040518083038185875af1925050503d8060008114612d40576040519150601f19603f3d011682016040523d82523d6000602084013e612d45565b606091505b50915091508115612d5a578092505050612daa565b600081511115612d6d5780518082602001fd5b836040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612da19190613b7f565b60405180910390fd5b949350505050565b600080823b905060008111915050919050565b600081359050612dd4816140c2565b92915050565b600081519050612de9816140c2565b92915050565b600081359050612dfe816140d9565b92915050565b600082601f830112612e1557600080fd5b8151612e28612e2382613f13565b613ee6565b91508181835260208401935060208101905083856020840282011115612e4d57600080fd5b60005b83811015612e7d5781612e638882612eb1565b845260208401935060208301925050600181019050612e50565b5050505092915050565b600081519050612e96816140f0565b92915050565b600081359050612eab81614107565b92915050565b600081519050612ec081614107565b92915050565b600060208284031215612ed857600080fd5b6000612ee684828501612dc5565b91505092915050565b600060208284031215612f0157600080fd5b6000612f0f84828501612dda565b91505092915050565b60008060408385031215612f2b57600080fd5b6000612f3985828601612def565b9250506020612f4a85828601612e9c565b9150509250929050565b60008060408385031215612f6757600080fd5b6000612f7585828601612dc5565b9250506020612f8685828601612dc5565b9150509250929050565b60008060408385031215612fa357600080fd5b6000612fb185828601612dc5565b9250506020612fc285828601612e9c565b9150509250929050565b600060208284031215612fde57600080fd5b600082015167ffffffffffffffff811115612ff857600080fd5b61300484828501612e04565b91505092915050565b60006020828403121561301f57600080fd5b600061302d84828501612e87565b91505092915050565b60006020828403121561304857600080fd5b600061305684828501612e9c565b91505092915050565b60006020828403121561307157600080fd5b600061307f84828501612eb1565b91505092915050565b600061309483836130be565b60208301905092915050565b6130a981614000565b82525050565b6130b881613fb8565b82525050565b6130c781613fa6565b82525050565b6130d681613fa6565b82525050565b60006130e782613f4b565b6130f18185613f79565b93506130fc83613f3b565b8060005b8381101561312d5781516131148882613088565b975061311f83613f6c565b925050600181019050613100565b5085935050505092915050565b61314381613fca565b82525050565b600061315482613f56565b61315e8185613f8a565b935061316e81856020860161407e565b80840191505092915050565b61318381614012565b82525050565b61319281614036565b82525050565b60006131a382613f61565b6131ad8185613f95565b93506131bd81856020860161407e565b6131c6816140b1565b840191505092915050565b60006131de602283613f95565b91507f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e60008301527f64730000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000613244601483613f95565b91507f5061757361626c653a206e6f74207061757365640000000000000000000000006000830152602082019050919050565b6000613284602683613f95565b91507f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008301527f64647265737300000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006132ea604183613f95565b91507f4f776e61626c655061757361626c653a3a70617573653a206f6e6c792070617560008301527f73657220616e64206f776e6572206d75737420706175736520636f6e7472616360208301527f74000000000000000000000000000000000000000000000000000000000000006040830152606082019050919050565b6000613376604583613f95565b91507f4f776e61626c655061757361626c653a3a756e70617573653a206f6e6c79207060008301527f617573657220616e64206f776e6572206d75737420756e706175736520636f6e60208301527f74726163740000000000000000000000000000000000000000000000000000006040830152606082019050919050565b6000613402601b83613f95565b91507f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006000830152602082019050919050565b6000613442604083613f95565b91507f50726f66697453706c69747465723a3a6368616e6765496e636f6d696e673a2060008301527f6475706c696361746520696e636f6d696e6720746f6b656e20616464726573736020830152604082019050919050565b60006134a8601083613f95565b91507f5061757361626c653a20706175736564000000000000000000000000000000006000830152602082019050919050565b60006134e8604183613f95565b91507f50726f66697453706c69747465723a3a5f706179546f4275646765743a20616d60008301527f6f756e7473206f7574206c697175696469747920706f6f6c20697320656d707460208301527f79000000000000000000000000000000000000000000000000000000000000006040830152606082019050919050565b6000613574602183613f95565b91507f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60008301527f77000000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006135da602083613f95565b91507f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726000830152602082019050919050565b600061361a603d83613f95565b91507f50726f66697453706c69747465723a3a7472616e736665723a2063616e6e6f7460008301527f207472616e7366657220746f20746865207a65726f20616464726573730000006020830152604082019050919050565b6000613680603583613f95565b91507f50726f66697453706c69747465723a3a616464526563697069656e743a20726560008301527f63697069656e7420616c726561647920616464656400000000000000000000006020830152604082019050919050565b60006136e6603583613f95565b91507f50726f66697453706c69747465723a3a5f706179546f4275646765743a206c6960008301527f7175696469747920706f6f6c20697320656d70747900000000000000000000006020830152604082019050919050565b600061374c601d83613f95565b91507f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006000830152602082019050919050565b600061378c603883613f95565b91507f50726f66697453706c69747465723a3a5f706179546f4275646765743a20696e60008301527f76616c696420616d6f756e7473206f7574206c656e67746800000000000000006020830152604082019050919050565b60006137f2602a83613f95565b91507f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008301527f6f742073756363656564000000000000000000000000000000000000000000006020830152604082019050919050565b6000613858603a83613f95565b91507f50726f66697453706c69747465723a3a72656d6f7665526563697069656e743a60008301527f20726563697069656e7420616c72656164792072656d6f7665640000000000006020830152604082019050919050565b60006138be603683613f95565b91507f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60008301527f20746f206e6f6e2d7a65726f20616c6c6f77616e6365000000000000000000006020830152604082019050919050565b6000613924603783613f95565b91507f50726f66697453706c69747465723a3a5f706179546f4275646765743a20696e60008301527f76616c696420616d6f756e747320696e206c656e6774680000000000000000006020830152604082019050919050565b600061398a602b83613f95565b91507f50726f66697453706c69747465723a3a616464526563697069656e743a20696e60008301527f76616c69642073686172650000000000000000000000000000000000000000006020830152604082019050919050565b6139ec81613ff6565b82525050565b60006139fe8284613149565b915081905092915050565b6000602082019050613a1e60008301846130cd565b92915050565b6000602082019050613a3960008301846130a0565b92915050565b6000602082019050613a5460008301846130af565b92915050565b6000604082019050613a6f60008301856130a0565b613a7c60208301846139e3565b9392505050565b6000604082019050613a9860008301856130cd565b613aa560208301846130cd565b9392505050565b6000606082019050613ac160008301866130cd565b613ace60208301856130cd565b613adb60408301846139e3565b949350505050565b6000604082019050613af860008301856130cd565b613b0560208301846139e3565b9392505050565b60006020820190508181036000830152613b2681846130dc565b905092915050565b6000602082019050613b43600083018461313a565b92915050565b6000602082019050613b5e600083018461317a565b92915050565b6000602082019050613b796000830184613189565b92915050565b60006020820190508181036000830152613b998184613198565b905092915050565b60006020820190508181036000830152613bba816131d1565b9050919050565b60006020820190508181036000830152613bda81613237565b9050919050565b60006020820190508181036000830152613bfa81613277565b9050919050565b60006020820190508181036000830152613c1a816132dd565b9050919050565b60006020820190508181036000830152613c3a81613369565b9050919050565b60006020820190508181036000830152613c5a816133f5565b9050919050565b60006020820190508181036000830152613c7a81613435565b9050919050565b60006020820190508181036000830152613c9a8161349b565b9050919050565b60006020820190508181036000830152613cba816134db565b9050919050565b60006020820190508181036000830152613cda81613567565b9050919050565b60006020820190508181036000830152613cfa816135cd565b9050919050565b60006020820190508181036000830152613d1a8161360d565b9050919050565b60006020820190508181036000830152613d3a81613673565b9050919050565b60006020820190508181036000830152613d5a816136d9565b9050919050565b60006020820190508181036000830152613d7a8161373f565b9050919050565b60006020820190508181036000830152613d9a8161377f565b9050919050565b60006020820190508181036000830152613dba816137e5565b9050919050565b60006020820190508181036000830152613dda8161384b565b9050919050565b60006020820190508181036000830152613dfa816138b1565b9050919050565b60006020820190508181036000830152613e1a81613917565b9050919050565b60006020820190508181036000830152613e3a8161397d565b9050919050565b6000602082019050613e5660008301846139e3565b92915050565b6000604082019050613e7160008301856139e3565b8181036020830152613e8381846130dc565b90509392505050565b600060a082019050613ea160008301886139e3565b613eae60208301876139e3565b8181036040830152613ec081866130dc565b9050613ecf60608301856130a0565b613edc60808301846139e3565b9695505050505050565b6000604051905081810181811067ffffffffffffffff82111715613f0957600080fd5b8060405250919050565b600067ffffffffffffffff821115613f2a57600080fd5b602082029050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b6000613fb182613fd6565b9050919050565b6000613fc382613fd6565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061400b8261405a565b9050919050565b600061401d82614024565b9050919050565b600061402f82613fd6565b9050919050565b600061404182614048565b9050919050565b600061405382613fd6565b9050919050565b60006140658261406c565b9050919050565b600061407782613fd6565b9050919050565b60005b8381101561409c578082015181840152602081019050614081565b838111156140ab576000848401525b50505050565b6000601f19601f8301169050919050565b6140cb81613fa6565b81146140d657600080fd5b50565b6140e281613fb8565b81146140ed57600080fd5b50565b6140f981613fca565b811461410457600080fd5b50565b61411081613ff6565b811461411b57600080fd5b5056fea26469706673582212200f8ede76e102dd85600c864d18142784d4119c223c1c048a4016fc2ab8c3871564736f6c634300060c0033",
  "deployedBytecode": "0x6080604052600436106101445760003560e01c80638da5cb5b116100b6578063d78d610b1161006f578063d78d610b146103f7578063dbceb00514610422578063ed01bf291461044b578063f2fde38b14610476578063f6dedc3f1461049f578063f7982243146104c85761014b565b80638da5cb5b146102e75780639fc8f2fe146103125780639fd0506d1461033d578063a9059cbb14610368578063c337083714610391578063ce7c2ac2146103ba5761014b565b8063562400fb11610108578063562400fb1461020d5780635c975abb14610238578063715018a614610263578063735de9f71461027a578063756043c3146102a55780638456cb59146102d05761014b565b806312a29198146101505780632cd271e7146101795780633f4ba83a146101a257806348249787146101b957806351e8b2b8146101e45761014b565b3661014b57005b600080fd5b34801561015c57600080fd5b5061017760048036038101906101729190612ec6565b6104f1565b005b34801561018557600080fd5b506101a0600480360381019061019b9190612ec6565b61066d565b005b3480156101ae57600080fd5b506101b761079f565b005b3480156101c557600080fd5b506101ce610884565b6040516101db9190613e41565b60405180910390f35b3480156101f057600080fd5b5061020b60048036038101906102069190612f18565b61088a565b005b34801561021957600080fd5b506102226109c8565b60405161022f9190613e41565b60405180910390f35b34801561024457600080fd5b5061024d6109cd565b60405161025a9190613b2e565b60405180910390f35b34801561026f57600080fd5b506102786109e3565b005b34801561028657600080fd5b5061028f610b36565b60405161029c9190613b64565b60405180910390f35b3480156102b157600080fd5b506102ba610b5c565b6040516102c79190613e41565b60405180910390f35b3480156102dc57600080fd5b506102e5610b61565b005b3480156102f357600080fd5b506102fc610c46565b6040516103099190613a09565b60405180910390f35b34801561031e57600080fd5b50610327610c6f565b6040516103349190613b49565b60405180910390f35b34801561034957600080fd5b50610352610c95565b60405161035f9190613a09565b60405180910390f35b34801561037457600080fd5b5061038f600480360381019061038a9190612f90565b610cbb565b005b34801561039d57600080fd5b506103b860048036038101906103b39190612ec6565b610e4a565b005b3480156103c657600080fd5b506103e160048036038101906103dc9190612ec6565b610f5a565b6040516103ee9190613e41565b60405180910390f35b34801561040357600080fd5b5061040c610f72565b6040516104199190613b0c565b60405180910390f35b34801561042e57600080fd5b5061044960048036038101906104449190613036565b61104a565b005b34801561045757600080fd5b50610460611108565b60405161046d9190613a3f565b60405180910390f35b34801561048257600080fd5b5061049d60048036038101906104989190612ec6565b61112e565b005b3480156104ab57600080fd5b506104c660048036038101906104c19190612f54565b6112f0565b005b3480156104d457600080fd5b506104ef60048036038101906104ea9190612f90565b611556565b005b6104f9611732565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610586576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057d90613ce1565b60405180910390fd5b61059a81600661173a90919063ffffffff16565b6105d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105d090613dc1565b60405180910390fd5b6105ed81600661176a90919063ffffffff16565b506000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507f8176fc5412eb5076fee7f1a264915b808c24d495c2698c189030e5200e707d25816040516106629190613a09565b60405180910390a150565b610675611732565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610702576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106f990613ce1565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fb80482a293ca2e013eda8683c9bd7fc8347cfdaeea5ede58cba46df502c2a604600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040516107949190613a09565b60405180910390a150565b6107a7611732565b73ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16148061083b5750610805611732565b73ffffffffffffffffffffffffffffffffffffffff16610823610c46565b73ffffffffffffffffffffffffffffffffffffffff16145b61087a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161087190613c21565b60405180910390fd5b61088261179a565b565b60045481565b610892611732565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461091f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161091690613ce1565b60405180910390fd5b81600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550806004819055507f5525073b5c48f4c3eb60e9fb2683ee9af96b397fc711f96129331b6fb337439d600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166004546040516109bc929190613a5a565b60405180910390a15050565b600681565b60008060149054906101000a900460ff16905090565b6109eb611732565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610a78576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a6f90613ce1565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600281565b610b69611732565b73ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480610bfd5750610bc7611732565b73ffffffffffffffffffffffffffffffffffffffff16610be5610c46565b73ffffffffffffffffffffffffffffffffffffffff16145b610c3c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c3390613c01565b60405180910390fd5b610c44611843565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610cc3611732565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610d50576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d4790613ce1565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610dc0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610db790613d01565b60405180910390fd5b610e0d8282600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166118ee9092919063ffffffff16565b7f69ca02dd4edd7bf0a4abb9ed3b7af3f14778db5d61921c7dc7cd545266326de28282604051610e3e929190613ae3565b60405180910390a15050565b610e52611732565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610edf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ed690613ce1565b60405180910390fd5b80600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f0a3776494a324cdd72863deb1475d9eb705db96d66e7e199f3ebe4948343a43881604051610f4f9190613a09565b60405180910390a150565b60056020528060005260406000206000915090505481565b606080610f7f6006611974565b67ffffffffffffffff81118015610f9557600080fd5b50604051908082528060200260200182016040528015610fc45781602001602082028036833780820191505090505b50905060005b610fd46006611974565b81101561104257610fef81600661198990919063ffffffff16565b828281518110610ffb57fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508080600101915050610fca565b508091505090565b600060149054906101000a900460ff161561109a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161109190613c81565b60405180910390fd5b60008111156110f3576110f2333083600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166119a3909392919063ffffffff16565b5b6110fb611a2c565b5061110461235a565b5050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b611136611732565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146111c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111ba90613ce1565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611233576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161122a90613be1565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6112f8611732565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611385576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161137c90613ce1565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415611416576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161140d90613c61565b60405180910390fd5b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016114739190613a24565b60206040518083038186803b15801561148b57600080fd5b505afa15801561149f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114c3919061305f565b905060008111156114d9576114d88282610cbb565b5b82600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fefe17208340787cbdf98b690d3d3dc01263f933ae65ed1a4d95f34607ab3af42836040516115499190613a09565b60405180910390a1505050565b61155e611732565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146115eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115e290613ce1565b60405180910390fd5b6115ff82600661173a90919063ffffffff16565b1561163f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161163690613d21565b60405180910390fd5b606461165b8261164d612583565b61261490919063ffffffff16565b111561169c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161169390613e21565b60405180910390fd5b6116b082600661266990919063ffffffff16565b5080600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507f79e1204b22e0669817ad586b72c3139f6c32afa18749b53228050f4c7f6964678282604051611726929190613ae3565b60405180910390a15050565b600033905090565b6000611762836000018373ffffffffffffffffffffffffffffffffffffffff1660001b612699565b905092915050565b6000611792836000018373ffffffffffffffffffffffffffffffffffffffff1660001b6126bc565b905092915050565b600060149054906101000a900460ff166117e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117e090613bc1565b60405180910390fd5b60008060146101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa61182c611732565b6040516118399190613a24565b60405180910390a1565b600060149054906101000a900460ff1615611893576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161188a90613c81565b60405180910390fd5b6001600060146101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586118d7611732565b6040516118e49190613a24565b60405180910390a1565b61196f8363a9059cbb60e01b848460405160240161190d929190613ae3565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506127a4565b505050565b60006119828260000161286b565b9050919050565b6000611998836000018361287c565b60001c905092915050565b611a26846323b872dd60e01b8585856040516024016119c493929190613aac565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506127a4565b50505050565b600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611a8a9190613a24565b60206040518083038186803b158015611aa257600080fd5b505afa158015611ab6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ada919061305f565b90506000811415611aef576000915050612357565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163190506004548110611b4157600092505050612357565b6000611b58826004546128e990919063ffffffff16565b905060004790508181101561228a576000611b7c82846128e990919063ffffffff16565b90506060600267ffffffffffffffff81118015611b9857600080fd5b50604051908082528060200260200182016040528015611bc75781602001602082028036833780820191505090505b509050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681600081518110611bfa57fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ad5c46486040518163ffffffff1660e01b815260040160206040518083038186803b158015611c9c57600080fd5b505afa158015611cb0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cd49190612eef565b81600181518110611ce157fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506060600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631f00ca7484846040518363ffffffff1660e01b8152600401611d7a929190613e5c565b60006040518083038186803b158015611d9257600080fd5b505afa158015611da6573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190611dcf9190612fcc565b90506002815114611e15576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e0c90613e01565b60405180910390fd5b600081600081518110611e2457fe5b602002602001015111611e6c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e6390613d41565b60405180910390fd5b8681600081518110611e7a57fe5b602002602001015111611fde57611f0a600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682600081518110611eba57fe5b6020026020010151600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166129339092919063ffffffff16565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634a25d94a8483600081518110611f5657fe5b60200260200101518530426040518663ffffffff1660e01b8152600401611f81959493929190613e8c565b600060405180830381600087803b158015611f9b57600080fd5b505af1158015611faf573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190611fd89190612fcc565b50612286565b6060600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d06ca61f89856040518363ffffffff1660e01b815260040161203d929190613e5c565b60006040518083038186803b15801561205557600080fd5b505afa158015612069573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906120929190612fcc565b905060028151146120d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120cf90613d81565b60405180910390fd5b6000816001815181106120e757fe5b60200260200101511161212f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161212690613ca1565b60405180910390fd5b8060018151811061213c57fe5b602002602001015195506121b5600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1689600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166129339092919063ffffffff16565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318cbafe5898360018151811061220157fe5b60200260200101518630426040518663ffffffff1660e01b815260040161222c959493929190613e8c565b600060405180830381600087803b15801561224657600080fd5b505af115801561225a573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906122839190612fcc565b50505b5050505b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f193505050501580156122f2573d6000803e3d6000fd5b507faf728e27f6982cf8664dd0a502802370b9c71a6e3e2ccf57a9656fa408a51b8e600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683604051612346929190613a5a565b60405180910390a160019450505050505b90565b600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016123b89190613a24565b60206040518083038186803b1580156123d057600080fd5b505afa1580156123e4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612408919061305f565b9050600081141561241d576000915050612580565b60005b61242a6006611974565b81101561257957600061244782600661198990919063ffffffff16565b90506000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060006124e16124a76002600661261490919063ffffffff16565b600a0a6124d3846124c56006600a0a8a612a9190919063ffffffff16565b612a9190919063ffffffff16565b612b0190919063ffffffff16565b90506125308382600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166118ee9092919063ffffffff16565b7f89a2b21c9895bbb8506e9de454d15ab9cf93782b8d2a4b61120331c3610b35ee8382604051612561929190613ae3565b60405180910390a15050508080600101915050612420565b5060019150505b90565b600080600090505b6125956006611974565b81101561261057612601600560006125b784600661198990919063ffffffff16565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548361261490919063ffffffff16565b9150808060010191505061258b565b5090565b60008082840190508381101561265f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161265690613c41565b60405180910390fd5b8091505092915050565b6000612691836000018373ffffffffffffffffffffffffffffffffffffffff1660001b612b4b565b905092915050565b600080836001016000848152602001908152602001600020541415905092915050565b60008083600101600084815260200190815260200160002054905060008114612798576000600182039050600060018660000180549050039050600086600001828154811061270757fe5b906000526020600020015490508087600001848154811061272457fe5b906000526020600020018190555060018301876001016000838152602001908152602001600020819055508660000180548061275c57fe5b6001900381819060005260206000200160009055905586600101600087815260200190815260200160002060009055600194505050505061279e565b60009150505b92915050565b6060612806826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16612bbb9092919063ffffffff16565b90506000815111156128665780806020019051810190612826919061300d565b612865576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161285c90613da1565b60405180910390fd5b5b505050565b600081600001805490509050919050565b6000818360000180549050116128c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128be90613ba1565b60405180910390fd5b8260000182815481106128d657fe5b9060005260206000200154905092915050565b600061292b83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250612bd3565b905092915050565b60008114806129cc575060008373ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30856040518363ffffffff1660e01b815260040161297a929190613a83565b60206040518083038186803b15801561299257600080fd5b505afa1580156129a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129ca919061305f565b145b612a0b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a0290613de1565b60405180910390fd5b612a8c8363095ea7b360e01b8484604051602401612a2a929190613ae3565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506127a4565b505050565b600080831415612aa45760009050612afb565b6000828402905082848281612ab557fe5b0414612af6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612aed90613cc1565b60405180910390fd5b809150505b92915050565b6000612b4383836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250612c2e565b905092915050565b6000612b578383612699565b612bb0578260000182908060018154018082558091505060019003906000526020600020016000909190919091505582600001805490508360010160008481526020019081526020016000208190555060019050612bb5565b600090505b92915050565b6060612bca8484600085612c8f565b90509392505050565b6000838311158290612c1b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c129190613b7f565b60405180910390fd5b5060008385039050809150509392505050565b60008083118290612c75576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c6c9190613b7f565b60405180910390fd5b506000838581612c8157fe5b049050809150509392505050565b6060612c9a85612db2565b612cd9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612cd090613d61565b60405180910390fd5b600060608673ffffffffffffffffffffffffffffffffffffffff168587604051612d0391906139f2565b60006040518083038185875af1925050503d8060008114612d40576040519150601f19603f3d011682016040523d82523d6000602084013e612d45565b606091505b50915091508115612d5a578092505050612daa565b600081511115612d6d5780518082602001fd5b836040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612da19190613b7f565b60405180910390fd5b949350505050565b600080823b905060008111915050919050565b600081359050612dd4816140c2565b92915050565b600081519050612de9816140c2565b92915050565b600081359050612dfe816140d9565b92915050565b600082601f830112612e1557600080fd5b8151612e28612e2382613f13565b613ee6565b91508181835260208401935060208101905083856020840282011115612e4d57600080fd5b60005b83811015612e7d5781612e638882612eb1565b845260208401935060208301925050600181019050612e50565b5050505092915050565b600081519050612e96816140f0565b92915050565b600081359050612eab81614107565b92915050565b600081519050612ec081614107565b92915050565b600060208284031215612ed857600080fd5b6000612ee684828501612dc5565b91505092915050565b600060208284031215612f0157600080fd5b6000612f0f84828501612dda565b91505092915050565b60008060408385031215612f2b57600080fd5b6000612f3985828601612def565b9250506020612f4a85828601612e9c565b9150509250929050565b60008060408385031215612f6757600080fd5b6000612f7585828601612dc5565b9250506020612f8685828601612dc5565b9150509250929050565b60008060408385031215612fa357600080fd5b6000612fb185828601612dc5565b9250506020612fc285828601612e9c565b9150509250929050565b600060208284031215612fde57600080fd5b600082015167ffffffffffffffff811115612ff857600080fd5b61300484828501612e04565b91505092915050565b60006020828403121561301f57600080fd5b600061302d84828501612e87565b91505092915050565b60006020828403121561304857600080fd5b600061305684828501612e9c565b91505092915050565b60006020828403121561307157600080fd5b600061307f84828501612eb1565b91505092915050565b600061309483836130be565b60208301905092915050565b6130a981614000565b82525050565b6130b881613fb8565b82525050565b6130c781613fa6565b82525050565b6130d681613fa6565b82525050565b60006130e782613f4b565b6130f18185613f79565b93506130fc83613f3b565b8060005b8381101561312d5781516131148882613088565b975061311f83613f6c565b925050600181019050613100565b5085935050505092915050565b61314381613fca565b82525050565b600061315482613f56565b61315e8185613f8a565b935061316e81856020860161407e565b80840191505092915050565b61318381614012565b82525050565b61319281614036565b82525050565b60006131a382613f61565b6131ad8185613f95565b93506131bd81856020860161407e565b6131c6816140b1565b840191505092915050565b60006131de602283613f95565b91507f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e60008301527f64730000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000613244601483613f95565b91507f5061757361626c653a206e6f74207061757365640000000000000000000000006000830152602082019050919050565b6000613284602683613f95565b91507f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008301527f64647265737300000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006132ea604183613f95565b91507f4f776e61626c655061757361626c653a3a70617573653a206f6e6c792070617560008301527f73657220616e64206f776e6572206d75737420706175736520636f6e7472616360208301527f74000000000000000000000000000000000000000000000000000000000000006040830152606082019050919050565b6000613376604583613f95565b91507f4f776e61626c655061757361626c653a3a756e70617573653a206f6e6c79207060008301527f617573657220616e64206f776e6572206d75737420756e706175736520636f6e60208301527f74726163740000000000000000000000000000000000000000000000000000006040830152606082019050919050565b6000613402601b83613f95565b91507f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006000830152602082019050919050565b6000613442604083613f95565b91507f50726f66697453706c69747465723a3a6368616e6765496e636f6d696e673a2060008301527f6475706c696361746520696e636f6d696e6720746f6b656e20616464726573736020830152604082019050919050565b60006134a8601083613f95565b91507f5061757361626c653a20706175736564000000000000000000000000000000006000830152602082019050919050565b60006134e8604183613f95565b91507f50726f66697453706c69747465723a3a5f706179546f4275646765743a20616d60008301527f6f756e7473206f7574206c697175696469747920706f6f6c20697320656d707460208301527f79000000000000000000000000000000000000000000000000000000000000006040830152606082019050919050565b6000613574602183613f95565b91507f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60008301527f77000000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006135da602083613f95565b91507f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726000830152602082019050919050565b600061361a603d83613f95565b91507f50726f66697453706c69747465723a3a7472616e736665723a2063616e6e6f7460008301527f207472616e7366657220746f20746865207a65726f20616464726573730000006020830152604082019050919050565b6000613680603583613f95565b91507f50726f66697453706c69747465723a3a616464526563697069656e743a20726560008301527f63697069656e7420616c726561647920616464656400000000000000000000006020830152604082019050919050565b60006136e6603583613f95565b91507f50726f66697453706c69747465723a3a5f706179546f4275646765743a206c6960008301527f7175696469747920706f6f6c20697320656d70747900000000000000000000006020830152604082019050919050565b600061374c601d83613f95565b91507f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006000830152602082019050919050565b600061378c603883613f95565b91507f50726f66697453706c69747465723a3a5f706179546f4275646765743a20696e60008301527f76616c696420616d6f756e7473206f7574206c656e67746800000000000000006020830152604082019050919050565b60006137f2602a83613f95565b91507f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008301527f6f742073756363656564000000000000000000000000000000000000000000006020830152604082019050919050565b6000613858603a83613f95565b91507f50726f66697453706c69747465723a3a72656d6f7665526563697069656e743a60008301527f20726563697069656e7420616c72656164792072656d6f7665640000000000006020830152604082019050919050565b60006138be603683613f95565b91507f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60008301527f20746f206e6f6e2d7a65726f20616c6c6f77616e6365000000000000000000006020830152604082019050919050565b6000613924603783613f95565b91507f50726f66697453706c69747465723a3a5f706179546f4275646765743a20696e60008301527f76616c696420616d6f756e747320696e206c656e6774680000000000000000006020830152604082019050919050565b600061398a602b83613f95565b91507f50726f66697453706c69747465723a3a616464526563697069656e743a20696e60008301527f76616c69642073686172650000000000000000000000000000000000000000006020830152604082019050919050565b6139ec81613ff6565b82525050565b60006139fe8284613149565b915081905092915050565b6000602082019050613a1e60008301846130cd565b92915050565b6000602082019050613a3960008301846130a0565b92915050565b6000602082019050613a5460008301846130af565b92915050565b6000604082019050613a6f60008301856130a0565b613a7c60208301846139e3565b9392505050565b6000604082019050613a9860008301856130cd565b613aa560208301846130cd565b9392505050565b6000606082019050613ac160008301866130cd565b613ace60208301856130cd565b613adb60408301846139e3565b949350505050565b6000604082019050613af860008301856130cd565b613b0560208301846139e3565b9392505050565b60006020820190508181036000830152613b2681846130dc565b905092915050565b6000602082019050613b43600083018461313a565b92915050565b6000602082019050613b5e600083018461317a565b92915050565b6000602082019050613b796000830184613189565b92915050565b60006020820190508181036000830152613b998184613198565b905092915050565b60006020820190508181036000830152613bba816131d1565b9050919050565b60006020820190508181036000830152613bda81613237565b9050919050565b60006020820190508181036000830152613bfa81613277565b9050919050565b60006020820190508181036000830152613c1a816132dd565b9050919050565b60006020820190508181036000830152613c3a81613369565b9050919050565b60006020820190508181036000830152613c5a816133f5565b9050919050565b60006020820190508181036000830152613c7a81613435565b9050919050565b60006020820190508181036000830152613c9a8161349b565b9050919050565b60006020820190508181036000830152613cba816134db565b9050919050565b60006020820190508181036000830152613cda81613567565b9050919050565b60006020820190508181036000830152613cfa816135cd565b9050919050565b60006020820190508181036000830152613d1a8161360d565b9050919050565b60006020820190508181036000830152613d3a81613673565b9050919050565b60006020820190508181036000830152613d5a816136d9565b9050919050565b60006020820190508181036000830152613d7a8161373f565b9050919050565b60006020820190508181036000830152613d9a8161377f565b9050919050565b60006020820190508181036000830152613dba816137e5565b9050919050565b60006020820190508181036000830152613dda8161384b565b9050919050565b60006020820190508181036000830152613dfa816138b1565b9050919050565b60006020820190508181036000830152613e1a81613917565b9050919050565b60006020820190508181036000830152613e3a8161397d565b9050919050565b6000602082019050613e5660008301846139e3565b92915050565b6000604082019050613e7160008301856139e3565b8181036020830152613e8381846130dc565b90509392505050565b600060a082019050613ea160008301886139e3565b613eae60208301876139e3565b8181036040830152613ec081866130dc565b9050613ecf60608301856130a0565b613edc60808301846139e3565b9695505050505050565b6000604051905081810181811067ffffffffffffffff82111715613f0957600080fd5b8060405250919050565b600067ffffffffffffffff821115613f2a57600080fd5b602082029050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b6000613fb182613fd6565b9050919050565b6000613fc382613fd6565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061400b8261405a565b9050919050565b600061401d82614024565b9050919050565b600061402f82613fd6565b9050919050565b600061404182614048565b9050919050565b600061405382613fd6565b9050919050565b60006140658261406c565b9050919050565b600061407782613fd6565b9050919050565b60005b8381101561409c578082015181840152602081019050614081565b838111156140ab576000848401525b50505050565b6000601f19601f8301169050919050565b6140cb81613fa6565b81146140d657600080fd5b50565b6140e281613fb8565b81146140ed57600080fd5b50565b6140f981613fca565b811461410457600080fd5b50565b61411081613ff6565b811461411b57600080fd5b5056fea26469706673582212200f8ede76e102dd85600c864d18142784d4119c223c1c048a4016fc2ab8c3871564736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addRecipient(address,uint256)": {
        "params": {
          "recipient": "Address of recipient contract.",
          "share": "Target share."
        }
      },
      "changeBudget(address,uint256)": {
        "params": {
          "_budget": "Address of budget contract.",
          "_budgetBalance": "Target budget balance."
        }
      },
      "changeIncoming(address,address)": {
        "params": {
          "_incoming": "New incoming token address.",
          "_recipient": "Address of recipient."
        }
      },
      "changePauser(address)": {
        "params": {
          "newPauser": "Address of new pauser account."
        }
      },
      "changeUniswapRouter(address)": {
        "params": {
          "_uniswapRouter": "Address new uniswap router contract."
        }
      },
      "constructor": {
        "params": {
          "_incoming": "Address of incoming token.",
          "_uniswapRouter": "Address of Uniswap router contract."
        }
      },
      "getRecipients()": {
        "returns": {
          "_0": "Current recipients list."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "removeRecipient(address)": {
        "params": {
          "recipient": "Address of recipient contract."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "split(uint256)": {
        "params": {
          "amount": "Approved amount incoming token."
        }
      },
      "transfer(address,uint256)": {
        "params": {
          "_recipient": "Address of recipient.",
          "amount": "Amount of transferred token."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "recipientsIndex": {
        "details": "Recipients addresses index."
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "BudgetChanged(address,uint256)": {
        "notice": "An event thats emitted when an budget contract address and target balance changed."
      },
      "IncomingChanged(address)": {
        "notice": "An event thats emitted when an incoming token changed."
      },
      "PauserChanged(address)": {
        "notice": "An event thats emitted when an pauser address changed."
      },
      "PayToBudget(address,uint256)": {
        "notice": "An event thats emitted when an profit payed to budget."
      },
      "PayToRecipient(address,uint256)": {
        "notice": "An event thats emitted when an profit payed to recipient."
      },
      "RecipientAdded(address,uint256)": {
        "notice": "An event thats emitted when an recipient added."
      },
      "RecipientRemoved(address)": {
        "notice": "An event thats emitted when an recipient removed."
      },
      "Transfer(address,uint256)": {
        "notice": "An event thats emitted when an incoming token transferred to recipient."
      },
      "UniswapRouterChanged(address)": {
        "notice": "An event thats emitted when an uniswap router contract address changed."
      }
    },
    "kind": "user",
    "methods": {
      "addRecipient(address,uint256)": {
        "notice": "Add recipient."
      },
      "budget()": {
        "notice": "Budget contract address."
      },
      "budgetBalance()": {
        "notice": "Target budget ETH balance."
      },
      "changeBudget(address,uint256)": {
        "notice": "Changed budget contract address and target balance."
      },
      "changeIncoming(address,address)": {
        "notice": "Change incoming token address."
      },
      "changePauser(address)": {
        "notice": "Change pauser account."
      },
      "changeUniswapRouter(address)": {
        "notice": "Changed uniswap router contract address."
      },
      "getRecipients()": {
        "notice": "Get addresses of recipients."
      },
      "incoming()": {
        "notice": "Incoming token."
      },
      "pause()": {
        "notice": "Triggers stopped state."
      },
      "pauser()": {
        "notice": "Address that can pause a contract."
      },
      "removeRecipient(address)": {
        "notice": "Remove recipient."
      },
      "shares(address)": {
        "notice": "Recipients share."
      },
      "split(uint256)": {
        "notice": "Split all incoming token balance to recipients and budget contract."
      },
      "transfer(address,uint256)": {
        "notice": "Transfer incoming token to recipient."
      },
      "uniswapRouter()": {
        "notice": "Uniswap router contract address."
      },
      "unpause()": {
        "notice": "Returns to normal state."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 30,
        "contract": "contracts/profit/ProfitSplitter.sol:ProfitSplitter",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1806,
        "contract": "contracts/profit/ProfitSplitter.sol:ProfitSplitter",
        "label": "_paused",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 11389,
        "contract": "contracts/profit/ProfitSplitter.sol:ProfitSplitter",
        "label": "pauser",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 9484,
        "contract": "contracts/profit/ProfitSplitter.sol:ProfitSplitter",
        "label": "incoming",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(ERC20)907"
      },
      {
        "astId": 9487,
        "contract": "contracts/profit/ProfitSplitter.sol:ProfitSplitter",
        "label": "budget",
        "offset": 0,
        "slot": "3",
        "type": "t_address_payable"
      },
      {
        "astId": 9490,
        "contract": "contracts/profit/ProfitSplitter.sol:ProfitSplitter",
        "label": "budgetBalance",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 9495,
        "contract": "contracts/profit/ProfitSplitter.sol:ProfitSplitter",
        "label": "shares",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 9498,
        "contract": "contracts/profit/ProfitSplitter.sol:ProfitSplitter",
        "label": "recipientsIndex",
        "offset": 0,
        "slot": "6",
        "type": "t_struct(AddressSet)1584_storage"
      },
      {
        "astId": 9501,
        "contract": "contracts/profit/ProfitSplitter.sol:ProfitSplitter",
        "label": "uniswapRouter",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(IUniswapV2Router02)11378"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ERC20)907": {
        "encoding": "inplace",
        "label": "contract ERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IUniswapV2Router02)11378": {
        "encoding": "inplace",
        "label": "contract IUniswapV2Router02",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)1584_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 1583,
            "contract": "contracts/profit/ProfitSplitter.sol:ProfitSplitter",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)1404_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)1404_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 1399,
            "contract": "contracts/profit/ProfitSplitter.sol:ProfitSplitter",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 1403,
            "contract": "contracts/profit/ProfitSplitter.sol:ProfitSplitter",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}