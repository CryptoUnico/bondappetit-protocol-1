{
  "address": "0x2c4E2Ecae53C66739E7F20AE39e4f75F8801C3F9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Locked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newPauser",
          "type": "address"
        }
      ],
      "name": "PauserChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "from",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "to",
          "type": "uint256"
        }
      ],
      "name": "RewardChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "Unlocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "balances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "cost",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newPauser",
          "type": "address"
        }
      ],
      "name": "changePauser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "newDelta",
          "type": "uint256"
        }
      ],
      "name": "changeReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "lock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pauser",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "price",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "reward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardToken",
      "outputs": [
        {
          "internalType": "contract ERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "delta",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "blockAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "priceAt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "unlock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x5d8a5236fa7c3f4e48718602d4b65b116bfdf09f05f1f6b6d1f2f026d9e7cc33",
  "receipt": {
    "to": null,
    "from": "0x9403932015576D13Fb26B135ed7a35d5d95C18d4",
    "contractAddress": "0x2c4E2Ecae53C66739E7F20AE39e4f75F8801C3F9",
    "transactionIndex": 0,
    "gasUsed": "2123202",
    "logsBloom": "0x
    "blockHash": "0xf7721b28af98c8a4470eea93d0c9e072b3a4cbf47f2d5f803272a10bdfafd498",
    "transactionHash": "0x5d8a5236fa7c3f4e48718602d4b65b116bfdf09f05f1f6b6d1f2f026d9e7cc33",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 9396535,
        "transactionHash": "0x5d8a5236fa7c3f4e48718602d4b65b116bfdf09f05f1f6b6d1f2f026d9e7cc33",
        "address": "0x2c4E2Ecae53C66739E7F20AE39e4f75F8801C3F9",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000009403932015576d13fb26b135ed7a35d5d95c18d4"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xf7721b28af98c8a4470eea93d0c9e072b3a4cbf47f2d5f803272a10bdfafd498"
      }
    ],
    "blockNumber": 9396535,
    "cumulativeGasUsed": "2123202",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x1EE5253D796C3C70A6cec8C3DFb332D3b7c49eb5"
  ],
  "solcInputHash": "1418a21267431bec5f7a1c50c4f8c9ff",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Locked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPauser\",\"type\":\"address\"}],\"name\":\"PauserChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"}],\"name\":\"RewardChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"Unlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cost\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPauser\",\"type\":\"address\"}],\"name\":\"changePauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newDelta\",\"type\":\"uint256\"}],\"name\":\"changeReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauser\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"reward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"delta\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"changePauser(address)\":{\"params\":{\"newPauser\":\"Address of new pauser account.\"}},\"changeReward(address,uint256)\":{\"params\":{\"newDelta\":\"New reward delta.\",\"token\":\"Changed token address.\"}},\"constructor\":{\"params\":{\"_rewardToken\":\"Address of reward token contract.\"}},\"lock(address,uint256)\":{\"params\":{\"amount\":\"Amount of stacking token.\",\"token\":\"Address of stacking token.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"price(address)\":{\"params\":{\"token\":\"Address of token.\"},\"returns\":{\"_0\":\"Price of token.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"reward(address)\":{\"params\":{\"token\":\"Address of token.\"},\"returns\":{\"_0\":\"Reward of token for sender.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unlock(address)\":{\"params\":{\"token\":\"Address of unstacking token.\"}}},\"version\":1},\"userdoc\":{\"events\":{\"Locked(address,address,uint256)\":{\"notice\":\"An event thats emitted when a token is locked by an account.\"},\"PauserChanged(address)\":{\"notice\":\"An event thats emitted when an pauser address changed.\"},\"RewardChanged(address,uint256,uint256)\":{\"notice\":\"An event thats emitted when an token reward changed.\"},\"Unlocked(address,address)\":{\"notice\":\"An event thats emitted when a token is unlocked by an account.\"}},\"kind\":\"user\",\"methods\":{\"balances(address,address)\":{\"notice\":\"Balances of locked tokens for all accounts.\"},\"changePauser(address)\":{\"notice\":\"Change pauser account.\"},\"changeReward(address,uint256)\":{\"notice\":\"Change reward token delta.\"},\"lock(address,uint256)\":{\"notice\":\"Stacking token.\"},\"pause()\":{\"notice\":\"Triggers stopped state.\"},\"pauser()\":{\"notice\":\"Address that can pause a contract.\"},\"price(address)\":{\"notice\":\"Get current price of token.\"},\"reward(address)\":{\"notice\":\"Get current reward of token for sender.\"},\"rewardToken()\":{\"notice\":\"Address of reward token contract.\"},\"rewards(address)\":{\"notice\":\"Reward configuration of locked tokens.\"},\"unlock(address)\":{\"notice\":\"Unstacking token.\"},\"unpause()\":{\"notice\":\"Returns to normal state.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Stacking.sol\":\"Stacking\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/GSN/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xdb26cbf4d028490f49831a7865c2fe1b28db44b535ca8d343785a3b768aae183\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x4bd6402ca6b3419008c2b482aff54e66836e8cb4eba2680e42ac5884ae6424fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x9a9cf02622cd7a64261b10534fc3260449da25c98c9e96d1b4ae8110a20e5806\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name, string memory symbol) public {\\n        _name = name;\\n        _symbol = symbol;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20};\\n     *\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0x91e0bd6a6762d2a1700dab0849de8422611355100576c4beef1e80d82a4104a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5c26b39d26f7ed489e555d955dcd3e01872972e71fdd1528e93ec164e4f23385\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf3b30f8a49631420635a8c35daacfcaa338012755f18a76fdd118730256f9a27\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies in extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf5fa8cbdffa5ef8be49b246b5628facc30b71707e78a45d80d93b64eff3fe390\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\ncontract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor () internal {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!_paused, \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(_paused, \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x5d1b1dcbc0396f44c1c8d554857f71e3187503bf1e54062bf9ec6782e21f3a08\",\"license\":\"MIT\"},\"contracts/Stacking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"./utils/OwnablePausable.sol\\\";\\n\\ncontract Stacking is OwnablePausable {\\n    using SafeMath for uint256;\\n    using SafeERC20 for ERC20;\\n\\n    /// @notice Address of reward token contract.\\n    ERC20 public rewardToken;\\n\\n    /// @notice Reward configuration.\\n    struct Reward {\\n        // Current reward per block.\\n        uint256 delta;\\n\\n        // Block number of last change reward.\\n        uint256 blockAt;\\n\\n        // Price of last change reward.\\n        uint256 priceAt;\\n    }\\n\\n    /// @notice Reward configuration of locked tokens.\\n    mapping(address => Reward) public rewards;\\n\\n    /// @notice Current blanace of account.\\n    struct Balance {\\n        // Locked token amount.\\n        uint256 amount;\\n\\n        // Nominal cost of locked token amount.\\n        uint256 cost;\\n    }\\n\\n    /// @notice Balances of locked tokens for all accounts.\\n    mapping(address => mapping(address => Balance)) public balances;\\n\\n    /// @notice An event thats emitted when an token reward changed.\\n    event RewardChanged(address token, uint256 from, uint256 to);\\n\\n    /// @notice An event thats emitted when a token is locked by an account.\\n    event Locked(address account, address token, uint256 amount);\\n\\n    /// @notice An event thats emitted when a token is unlocked by an account.\\n    event Unlocked(address account, address token);\\n\\n    /**\\n     * @param _rewardToken Address of reward token contract.\\n     */\\n    constructor(address _rewardToken) public {\\n        rewardToken = ERC20(_rewardToken);\\n    }\\n\\n    /**\\n     * @notice Change reward token delta.\\n     * @param token Changed token address.\\n     * @param newDelta New reward delta.\\n     */\\n    function changeReward(address token, uint256 newDelta) external onlyOwner {\\n        Reward storage reward = rewards[token];\\n        rewards[token] = Reward(newDelta, block.number.sub(1), price(token).sub(reward.delta));\\n        emit RewardChanged(token, reward.delta, newDelta);\\n    }\\n\\n    /**\\n     * @notice Get current price of token.\\n     * @param token Address of token.\\n     * @return Price of token.\\n     */\\n    function price(address token) public view returns (uint256) {\\n        Reward storage reward = rewards[token];\\n        return reward.priceAt.add(reward.delta.mul(block.number.sub(reward.blockAt)));\\n    }\\n\\n    /**\\n     * @notice Get current reward of token for sender.\\n     * @param token Address of token.\\n     * @return Reward of token for sender.\\n     */\\n    function reward(address token) public view returns (uint256) {\\n        uint256 decimals = rewardToken.decimals();\\n        Balance storage balance = balances[msg.sender][token];\\n        return balance.amount.mul(price(token)).sub(balance.cost).div(10**decimals);\\n    }\\n\\n    /**\\n     * @notice Stacking token.\\n     * @param token Address of stacking token.\\n     * @param amount Amount of stacking token.\\n     */\\n    function lock(address token, uint256 amount) external whenNotPaused {\\n        require(amount != 0, \\\"Stacking::lock: negative amount\\\");\\n\\n        ERC20(token).safeTransferFrom(msg.sender, address(this), amount);\\n\\n        Balance storage balance = balances[msg.sender][token];\\n        uint256 newAmount = balance.amount.add(amount);\\n        uint256 newCost = balance.cost.add(amount.mul(price(token)));\\n        balances[msg.sender][token] = Balance(newAmount, newCost);\\n        emit Locked(msg.sender, token, amount);\\n    }\\n\\n    /**\\n     * @notice Unstacking token.\\n     * @param token Address of unstacking token.\\n     */\\n    function unlock(address token) external whenNotPaused {\\n        Balance memory balance = balances[msg.sender][token];\\n        require(balance.amount > 0, \\\"Stacking::unlock: balance is empty\\\");\\n        uint256 _reward = reward(token);\\n\\n        balances[msg.sender][token] = Balance(0, 0);\\n        ERC20(token).safeTransfer(msg.sender, balance.amount);\\n        if (_reward > 0) {\\n            rewardToken.safeTransfer(msg.sender, _reward);\\n        }\\n        emit Unlocked(msg.sender, token);\\n    }\\n}\\n\",\"keccak256\":\"0x15bc6e3b2af08f7218b63f9ccbe8b96bc6f2c64d79af37320c96ff7d52314bdb\",\"license\":\"MIT\"},\"contracts/utils/OwnablePausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\n\\ncontract OwnablePausable is Ownable, Pausable {\\n    /// @notice Address that can pause a contract.\\n    address public pauser;\\n\\n    /// @notice An event thats emitted when an pauser address changed.\\n    event PauserChanged(address newPauser);\\n\\n    constructor() internal {\\n        pauser = owner();\\n    }\\n\\n    /**\\n     * @notice Change pauser account.\\n     * @param newPauser Address of new pauser account.\\n     */\\n    function changePauser(address newPauser) external onlyOwner {\\n        pauser = newPauser;\\n        emit PauserChanged(pauser);\\n    }\\n\\n    /**\\n     * @notice Triggers stopped state.\\n     */\\n    function pause() public virtual {\\n        require(pauser == _msgSender() || owner() == _msgSender(), \\\"OwnablePausable::pause: only pauser and owner must pause contract\\\");\\n        _pause();\\n    }\\n\\n    /**\\n     * @notice Returns to normal state.\\n     */\\n    function unpause() public virtual {\\n        require(pauser == _msgSender() || owner() == _msgSender(), \\\"OwnablePausable::unpause: only pauser and owner must unpause contract\\\");\\n        _unpause();\\n    }\\n}\\n\",\"keccak256\":\"0x865125c578244d8e7240cfe61b8591c6bcc2b05f88ee64aee28fd1ba10f3f4df\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162002779380380620027798339818101604052810190620000379190620001e1565b6000620000496200019960201b60201c565b9050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35060008060146101000a81548160ff02191690831515021790555062000111620001a160201b60201c565b600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506200025b565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600081519050620001db8162000241565b92915050565b600060208284031215620001f457600080fd5b60006200020484828501620001ca565b91505092915050565b60006200021a8262000221565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6200024c816200020d565b81146200025857600080fd5b50565b61250e806200026b6000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c8063715018a611610097578063aea9107811610066578063aea910781461024f578063c23f001f1461027f578063f2fde38b146102b0578063f7c618c1146102cc57610100565b8063715018a6146101ff5780638456cb59146102095780638da5cb5b146102135780639fd0506d1461023157610100565b80633f4ba83a116100d35780633f4ba83a1461018b578063555196cc146101955780635c975abb146101b15780636353586b146101cf57610100565b80630700037d14610105578063282d3fdf146101375780632cd271e7146101535780632f6c493c1461016f575b600080fd5b61011f600480360381019061011a91906119e8565b6102ea565b60405161012e93929190612320565b60405180910390f35b610151600480360381019061014c9190611a4d565b610314565b005b61016d600480360381019061016891906119e8565b61058f565b005b610189600480360381019061018491906119e8565b6106c1565b005b610193610978565b005b6101af60048036038101906101aa9190611a4d565b610a5d565b005b6101b9610c25565b6040516101c69190612104565b60405180910390f35b6101e960048036038101906101e491906119e8565b610c3b565b6040516101f691906122dc565b60405180910390f35b610207610db6565b005b610211610f09565b005b61021b610fee565b6040516102289190611fd7565b60405180910390f35b610239611017565b6040516102469190611fd7565b60405180910390f35b610269600480360381019061026491906119e8565b61103d565b60405161027691906122dc565b60405180910390f35b61029960048036038101906102949190611a11565b6110cc565b6040516102a79291906122f7565b60405180910390f35b6102ca60048036038101906102c591906119e8565b6110fd565b005b6102d46112bf565b6040516102e1919061211f565b60405180910390f35b60036020528060005260406000206000915090508060000154908060010154908060020154905083565b600060149054906101000a900460ff1615610364576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161035b9061221c565b60405180910390fd5b60008114156103a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161039f906121fc565b60405180910390fd5b6103d53330838573ffffffffffffffffffffffffffffffffffffffff166112e5909392919063ffffffff16565b6000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600061046e83836000015461136e90919063ffffffff16565b905060006104a36104906104818761103d565b866113c390919063ffffffff16565b846001015461136e90919063ffffffff16565b9050604051806040016040528083815260200182815250600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000155602082015181600101559050507f989eaa915cbb416ea3d6f9a63b1a3de51770c7674b11fe21ecdf76b4e1d1391033868660405161058093929190612036565b60405180910390a15050505050565b610597611433565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610624576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161061b9061225c565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fb80482a293ca2e013eda8683c9bd7fc8347cfdaeea5ede58cba46df502c2a604600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040516106b69190611fd7565b60405180910390a150565b600060149054906101000a900460ff1615610711576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107089061221c565b60405180910390fd5b61071961197a565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405180604001604052908160008201548152602001600182015481525050905060008160000151116107fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107f49061229c565b60405180910390fd5b600061080883610c3b565b90506040518060400160405280600081526020016000815250600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000155602082015181600101559050506108e33383600001518573ffffffffffffffffffffffffffffffffffffffff1661143b9092919063ffffffff16565b600081111561093a576109393382600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661143b9092919063ffffffff16565b5b7f94deece35517fb95773e8f8b437e3e335de29d773663ccf055c2563b0bd6b99a338460405161096b92919061200d565b60405180910390a1505050565b610980611433565b73ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480610a1457506109de611433565b73ffffffffffffffffffffffffffffffffffffffff166109fc610fee565b73ffffffffffffffffffffffffffffffffffffffff16145b610a53576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a4a906121bc565b60405180910390fd5b610a5b6114c1565b565b610a65611433565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610af2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ae99061225c565b60405180910390fd5b6000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506040518060600160405280838152602001610b5a60014361156a90919063ffffffff16565b8152602001610b7e8360000154610b708761103d565b61156a90919063ffffffff16565b815250600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820151816000015560208201518160010155604082015181600201559050507f96e997fbb9668a29af391a5cd27f5a4d30484b18e7bb5fcaaf2f7075066eb67383826000015484604051610c18939291906120cd565b60405180910390a1505050565b60008060149054906101000a900460ff16905090565b600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610ca657600080fd5b505afa158015610cba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cde9190611ab2565b60ff1690506000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050610dad82600a0a610d9f8360010154610d91610d7e8961103d565b86600001546113c390919063ffffffff16565b61156a90919063ffffffff16565b6115b490919063ffffffff16565b92505050919050565b610dbe611433565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610e4b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e429061225c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b610f11611433565b73ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480610fa55750610f6f611433565b73ffffffffffffffffffffffffffffffffffffffff16610f8d610fee565b73ffffffffffffffffffffffffffffffffffffffff16145b610fe4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fdb9061219c565b60405180910390fd5b610fec6115fe565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506110c46110b161109e83600101544361156a90919063ffffffff16565b83600001546113c390919063ffffffff16565b826002015461136e90919063ffffffff16565b915050919050565b6004602052816000526040600020602052806000526040600020600091509150508060000154908060010154905082565b611105611433565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611192576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111899061225c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611202576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111f99061217c565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b611368846323b872dd60e01b8585856040516024016113069392919061206d565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506116a9565b50505050565b6000808284019050838110156113b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113b0906121dc565b60405180910390fd5b8091505092915050565b6000808314156113d6576000905061142d565b60008284029050828482816113e757fe5b0414611428576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161141f9061223c565b60405180910390fd5b809150505b92915050565b600033905090565b6114bc8363a9059cbb60e01b848460405160240161145a9291906120a4565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506116a9565b505050565b600060149054906101000a900460ff16611510576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115079061215c565b60405180910390fd5b60008060146101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa611553611433565b6040516115609190611ff2565b60405180910390a1565b60006115ac83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611770565b905092915050565b60006115f683836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506117cb565b905092915050565b600060149054906101000a900460ff161561164e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116459061221c565b60405180910390fd5b6001600060146101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611692611433565b60405161169f9190611ff2565b60405180910390a1565b606061170b826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff1661182c9092919063ffffffff16565b905060008151111561176b578080602001905181019061172b9190611a89565b61176a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611761906122bc565b60405180910390fd5b5b505050565b60008383111582906117b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117af919061213a565b60405180910390fd5b5060008385039050809150509392505050565b60008083118290611812576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611809919061213a565b60405180910390fd5b50600083858161181e57fe5b049050809150509392505050565b606061183b8484600085611844565b90509392505050565b606061184f85611967565b61188e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118859061227c565b60405180910390fd5b600060608673ffffffffffffffffffffffffffffffffffffffff1685876040516118b89190611fc0565b60006040518083038185875af1925050503d80600081146118f5576040519150601f19603f3d011682016040523d82523d6000602084013e6118fa565b606091505b5091509150811561190f57809250505061195f565b6000815111156119225780518082602001fd5b836040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611956919061213a565b60405180910390fd5b949350505050565b600080823b905060008111915050919050565b604051806040016040528060008152602001600081525090565b6000813590506119a38161247c565b92915050565b6000815190506119b881612493565b92915050565b6000813590506119cd816124aa565b92915050565b6000815190506119e2816124c1565b92915050565b6000602082840312156119fa57600080fd5b6000611a0884828501611994565b91505092915050565b60008060408385031215611a2457600080fd5b6000611a3285828601611994565b9250506020611a4385828601611994565b9150509250929050565b60008060408385031215611a6057600080fd5b6000611a6e85828601611994565b9250506020611a7f858286016119be565b9150509250929050565b600060208284031215611a9b57600080fd5b6000611aa9848285016119a9565b91505092915050565b600060208284031215611ac457600080fd5b6000611ad2848285016119d3565b91505092915050565b611ae4816123de565b82525050565b611af381612389565b82525050565b611b028161239b565b82525050565b6000611b1382612357565b611b1d818561236d565b9350611b2d818560208601612438565b80840191505092915050565b611b42816123f0565b82525050565b6000611b5382612362565b611b5d8185612378565b9350611b6d818560208601612438565b611b768161246b565b840191505092915050565b6000611b8e601483612378565b91507f5061757361626c653a206e6f74207061757365640000000000000000000000006000830152602082019050919050565b6000611bce602683612378565b91507f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008301527f64647265737300000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000611c34604183612378565b91507f4f776e61626c655061757361626c653a3a70617573653a206f6e6c792070617560008301527f73657220616e64206f776e6572206d75737420706175736520636f6e7472616360208301527f74000000000000000000000000000000000000000000000000000000000000006040830152606082019050919050565b6000611cc0604583612378565b91507f4f776e61626c655061757361626c653a3a756e70617573653a206f6e6c79207060008301527f617573657220616e64206f776e6572206d75737420756e706175736520636f6e60208301527f74726163740000000000000000000000000000000000000000000000000000006040830152606082019050919050565b6000611d4c601b83612378565b91507f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006000830152602082019050919050565b6000611d8c601f83612378565b91507f537461636b696e673a3a6c6f636b3a206e6567617469766520616d6f756e74006000830152602082019050919050565b6000611dcc601083612378565b91507f5061757361626c653a20706175736564000000000000000000000000000000006000830152602082019050919050565b6000611e0c602183612378565b91507f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60008301527f77000000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000611e72602083612378565b91507f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726000830152602082019050919050565b6000611eb2601d83612378565b91507f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006000830152602082019050919050565b6000611ef2602283612378565b91507f537461636b696e673a3a756e6c6f636b3a2062616c616e636520697320656d7060008301527f74790000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000611f58602a83612378565b91507f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008301527f6f742073756363656564000000000000000000000000000000000000000000006020830152604082019050919050565b611fba816123c7565b82525050565b6000611fcc8284611b08565b915081905092915050565b6000602082019050611fec6000830184611aea565b92915050565b60006020820190506120076000830184611adb565b92915050565b60006040820190506120226000830185611adb565b61202f6020830184611aea565b9392505050565b600060608201905061204b6000830186611adb565b6120586020830185611aea565b6120656040830184611fb1565b949350505050565b60006060820190506120826000830186611aea565b61208f6020830185611aea565b61209c6040830184611fb1565b949350505050565b60006040820190506120b96000830185611aea565b6120c66020830184611fb1565b9392505050565b60006060820190506120e26000830186611aea565b6120ef6020830185611fb1565b6120fc6040830184611fb1565b949350505050565b60006020820190506121196000830184611af9565b92915050565b60006020820190506121346000830184611b39565b92915050565b600060208201905081810360008301526121548184611b48565b905092915050565b6000602082019050818103600083015261217581611b81565b9050919050565b6000602082019050818103600083015261219581611bc1565b9050919050565b600060208201905081810360008301526121b581611c27565b9050919050565b600060208201905081810360008301526121d581611cb3565b9050919050565b600060208201905081810360008301526121f581611d3f565b9050919050565b6000602082019050818103600083015261221581611d7f565b9050919050565b6000602082019050818103600083015261223581611dbf565b9050919050565b6000602082019050818103600083015261225581611dff565b9050919050565b6000602082019050818103600083015261227581611e65565b9050919050565b6000602082019050818103600083015261229581611ea5565b9050919050565b600060208201905081810360008301526122b581611ee5565b9050919050565b600060208201905081810360008301526122d581611f4b565b9050919050565b60006020820190506122f16000830184611fb1565b92915050565b600060408201905061230c6000830185611fb1565b6123196020830184611fb1565b9392505050565b60006060820190506123356000830186611fb1565b6123426020830185611fb1565b61234f6040830184611fb1565b949350505050565b600081519050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b6000612394826123a7565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60006123e982612414565b9050919050565b60006123fb82612402565b9050919050565b600061240d826123a7565b9050919050565b600061241f82612426565b9050919050565b6000612431826123a7565b9050919050565b60005b8381101561245657808201518184015260208101905061243b565b83811115612465576000848401525b50505050565b6000601f19601f8301169050919050565b61248581612389565b811461249057600080fd5b50565b61249c8161239b565b81146124a757600080fd5b50565b6124b3816123c7565b81146124be57600080fd5b50565b6124ca816123d1565b81146124d557600080fd5b5056fea2646970667358221220f350a2f4618ddcbfd06d6d4f59d532211ed3f23826af9d57c95ae4550996853764736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101005760003560e01c8063715018a611610097578063aea9107811610066578063aea910781461024f578063c23f001f1461027f578063f2fde38b146102b0578063f7c618c1146102cc57610100565b8063715018a6146101ff5780638456cb59146102095780638da5cb5b146102135780639fd0506d1461023157610100565b80633f4ba83a116100d35780633f4ba83a1461018b578063555196cc146101955780635c975abb146101b15780636353586b146101cf57610100565b80630700037d14610105578063282d3fdf146101375780632cd271e7146101535780632f6c493c1461016f575b600080fd5b61011f600480360381019061011a91906119e8565b6102ea565b60405161012e93929190612320565b60405180910390f35b610151600480360381019061014c9190611a4d565b610314565b005b61016d600480360381019061016891906119e8565b61058f565b005b610189600480360381019061018491906119e8565b6106c1565b005b610193610978565b005b6101af60048036038101906101aa9190611a4d565b610a5d565b005b6101b9610c25565b6040516101c69190612104565b60405180910390f35b6101e960048036038101906101e491906119e8565b610c3b565b6040516101f691906122dc565b60405180910390f35b610207610db6565b005b610211610f09565b005b61021b610fee565b6040516102289190611fd7565b60405180910390f35b610239611017565b6040516102469190611fd7565b60405180910390f35b610269600480360381019061026491906119e8565b61103d565b60405161027691906122dc565b60405180910390f35b61029960048036038101906102949190611a11565b6110cc565b6040516102a79291906122f7565b60405180910390f35b6102ca60048036038101906102c591906119e8565b6110fd565b005b6102d46112bf565b6040516102e1919061211f565b60405180910390f35b60036020528060005260406000206000915090508060000154908060010154908060020154905083565b600060149054906101000a900460ff1615610364576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161035b9061221c565b60405180910390fd5b60008114156103a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161039f906121fc565b60405180910390fd5b6103d53330838573ffffffffffffffffffffffffffffffffffffffff166112e5909392919063ffffffff16565b6000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600061046e83836000015461136e90919063ffffffff16565b905060006104a36104906104818761103d565b866113c390919063ffffffff16565b846001015461136e90919063ffffffff16565b9050604051806040016040528083815260200182815250600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000155602082015181600101559050507f989eaa915cbb416ea3d6f9a63b1a3de51770c7674b11fe21ecdf76b4e1d1391033868660405161058093929190612036565b60405180910390a15050505050565b610597611433565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610624576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161061b9061225c565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fb80482a293ca2e013eda8683c9bd7fc8347cfdaeea5ede58cba46df502c2a604600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040516106b69190611fd7565b60405180910390a150565b600060149054906101000a900460ff1615610711576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107089061221c565b60405180910390fd5b61071961197a565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405180604001604052908160008201548152602001600182015481525050905060008160000151116107fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107f49061229c565b60405180910390fd5b600061080883610c3b565b90506040518060400160405280600081526020016000815250600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000155602082015181600101559050506108e33383600001518573ffffffffffffffffffffffffffffffffffffffff1661143b9092919063ffffffff16565b600081111561093a576109393382600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661143b9092919063ffffffff16565b5b7f94deece35517fb95773e8f8b437e3e335de29d773663ccf055c2563b0bd6b99a338460405161096b92919061200d565b60405180910390a1505050565b610980611433565b73ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480610a1457506109de611433565b73ffffffffffffffffffffffffffffffffffffffff166109fc610fee565b73ffffffffffffffffffffffffffffffffffffffff16145b610a53576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a4a906121bc565b60405180910390fd5b610a5b6114c1565b565b610a65611433565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610af2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ae99061225c565b60405180910390fd5b6000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506040518060600160405280838152602001610b5a60014361156a90919063ffffffff16565b8152602001610b7e8360000154610b708761103d565b61156a90919063ffffffff16565b815250600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820151816000015560208201518160010155604082015181600201559050507f96e997fbb9668a29af391a5cd27f5a4d30484b18e7bb5fcaaf2f7075066eb67383826000015484604051610c18939291906120cd565b60405180910390a1505050565b60008060149054906101000a900460ff16905090565b600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610ca657600080fd5b505afa158015610cba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cde9190611ab2565b60ff1690506000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050610dad82600a0a610d9f8360010154610d91610d7e8961103d565b86600001546113c390919063ffffffff16565b61156a90919063ffffffff16565b6115b490919063ffffffff16565b92505050919050565b610dbe611433565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610e4b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e429061225c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b610f11611433565b73ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480610fa55750610f6f611433565b73ffffffffffffffffffffffffffffffffffffffff16610f8d610fee565b73ffffffffffffffffffffffffffffffffffffffff16145b610fe4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fdb9061219c565b60405180910390fd5b610fec6115fe565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506110c46110b161109e83600101544361156a90919063ffffffff16565b83600001546113c390919063ffffffff16565b826002015461136e90919063ffffffff16565b915050919050565b6004602052816000526040600020602052806000526040600020600091509150508060000154908060010154905082565b611105611433565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611192576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111899061225c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611202576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111f99061217c565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b611368846323b872dd60e01b8585856040516024016113069392919061206d565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506116a9565b50505050565b6000808284019050838110156113b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113b0906121dc565b60405180910390fd5b8091505092915050565b6000808314156113d6576000905061142d565b60008284029050828482816113e757fe5b0414611428576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161141f9061223c565b60405180910390fd5b809150505b92915050565b600033905090565b6114bc8363a9059cbb60e01b848460405160240161145a9291906120a4565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506116a9565b505050565b600060149054906101000a900460ff16611510576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115079061215c565b60405180910390fd5b60008060146101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa611553611433565b6040516115609190611ff2565b60405180910390a1565b60006115ac83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611770565b905092915050565b60006115f683836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506117cb565b905092915050565b600060149054906101000a900460ff161561164e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116459061221c565b60405180910390fd5b6001600060146101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611692611433565b60405161169f9190611ff2565b60405180910390a1565b606061170b826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff1661182c9092919063ffffffff16565b905060008151111561176b578080602001905181019061172b9190611a89565b61176a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611761906122bc565b60405180910390fd5b5b505050565b60008383111582906117b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117af919061213a565b60405180910390fd5b5060008385039050809150509392505050565b60008083118290611812576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611809919061213a565b60405180910390fd5b50600083858161181e57fe5b049050809150509392505050565b606061183b8484600085611844565b90509392505050565b606061184f85611967565b61188e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118859061227c565b60405180910390fd5b600060608673ffffffffffffffffffffffffffffffffffffffff1685876040516118b89190611fc0565b60006040518083038185875af1925050503d80600081146118f5576040519150601f19603f3d011682016040523d82523d6000602084013e6118fa565b606091505b5091509150811561190f57809250505061195f565b6000815111156119225780518082602001fd5b836040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611956919061213a565b60405180910390fd5b949350505050565b600080823b905060008111915050919050565b604051806040016040528060008152602001600081525090565b6000813590506119a38161247c565b92915050565b6000815190506119b881612493565b92915050565b6000813590506119cd816124aa565b92915050565b6000815190506119e2816124c1565b92915050565b6000602082840312156119fa57600080fd5b6000611a0884828501611994565b91505092915050565b60008060408385031215611a2457600080fd5b6000611a3285828601611994565b9250506020611a4385828601611994565b9150509250929050565b60008060408385031215611a6057600080fd5b6000611a6e85828601611994565b9250506020611a7f858286016119be565b9150509250929050565b600060208284031215611a9b57600080fd5b6000611aa9848285016119a9565b91505092915050565b600060208284031215611ac457600080fd5b6000611ad2848285016119d3565b91505092915050565b611ae4816123de565b82525050565b611af381612389565b82525050565b611b028161239b565b82525050565b6000611b1382612357565b611b1d818561236d565b9350611b2d818560208601612438565b80840191505092915050565b611b42816123f0565b82525050565b6000611b5382612362565b611b5d8185612378565b9350611b6d818560208601612438565b611b768161246b565b840191505092915050565b6000611b8e601483612378565b91507f5061757361626c653a206e6f74207061757365640000000000000000000000006000830152602082019050919050565b6000611bce602683612378565b91507f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008301527f64647265737300000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000611c34604183612378565b91507f4f776e61626c655061757361626c653a3a70617573653a206f6e6c792070617560008301527f73657220616e64206f776e6572206d75737420706175736520636f6e7472616360208301527f74000000000000000000000000000000000000000000000000000000000000006040830152606082019050919050565b6000611cc0604583612378565b91507f4f776e61626c655061757361626c653a3a756e70617573653a206f6e6c79207060008301527f617573657220616e64206f776e6572206d75737420756e706175736520636f6e60208301527f74726163740000000000000000000000000000000000000000000000000000006040830152606082019050919050565b6000611d4c601b83612378565b91507f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006000830152602082019050919050565b6000611d8c601f83612378565b91507f537461636b696e673a3a6c6f636b3a206e6567617469766520616d6f756e74006000830152602082019050919050565b6000611dcc601083612378565b91507f5061757361626c653a20706175736564000000000000000000000000000000006000830152602082019050919050565b6000611e0c602183612378565b91507f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60008301527f77000000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000611e72602083612378565b91507f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726000830152602082019050919050565b6000611eb2601d83612378565b91507f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006000830152602082019050919050565b6000611ef2602283612378565b91507f537461636b696e673a3a756e6c6f636b3a2062616c616e636520697320656d7060008301527f74790000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000611f58602a83612378565b91507f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008301527f6f742073756363656564000000000000000000000000000000000000000000006020830152604082019050919050565b611fba816123c7565b82525050565b6000611fcc8284611b08565b915081905092915050565b6000602082019050611fec6000830184611aea565b92915050565b60006020820190506120076000830184611adb565b92915050565b60006040820190506120226000830185611adb565b61202f6020830184611aea565b9392505050565b600060608201905061204b6000830186611adb565b6120586020830185611aea565b6120656040830184611fb1565b949350505050565b60006060820190506120826000830186611aea565b61208f6020830185611aea565b61209c6040830184611fb1565b949350505050565b60006040820190506120b96000830185611aea565b6120c66020830184611fb1565b9392505050565b60006060820190506120e26000830186611aea565b6120ef6020830185611fb1565b6120fc6040830184611fb1565b949350505050565b60006020820190506121196000830184611af9565b92915050565b60006020820190506121346000830184611b39565b92915050565b600060208201905081810360008301526121548184611b48565b905092915050565b6000602082019050818103600083015261217581611b81565b9050919050565b6000602082019050818103600083015261219581611bc1565b9050919050565b600060208201905081810360008301526121b581611c27565b9050919050565b600060208201905081810360008301526121d581611cb3565b9050919050565b600060208201905081810360008301526121f581611d3f565b9050919050565b6000602082019050818103600083015261221581611d7f565b9050919050565b6000602082019050818103600083015261223581611dbf565b9050919050565b6000602082019050818103600083015261225581611dff565b9050919050565b6000602082019050818103600083015261227581611e65565b9050919050565b6000602082019050818103600083015261229581611ea5565b9050919050565b600060208201905081810360008301526122b581611ee5565b9050919050565b600060208201905081810360008301526122d581611f4b565b9050919050565b60006020820190506122f16000830184611fb1565b92915050565b600060408201905061230c6000830185611fb1565b6123196020830184611fb1565b9392505050565b60006060820190506123356000830186611fb1565b6123426020830185611fb1565b61234f6040830184611fb1565b949350505050565b600081519050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b6000612394826123a7565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60006123e982612414565b9050919050565b60006123fb82612402565b9050919050565b600061240d826123a7565b9050919050565b600061241f82612426565b9050919050565b6000612431826123a7565b9050919050565b60005b8381101561245657808201518184015260208101905061243b565b83811115612465576000848401525b50505050565b6000601f19601f8301169050919050565b61248581612389565b811461249057600080fd5b50565b61249c8161239b565b81146124a757600080fd5b50565b6124b3816123c7565b81146124be57600080fd5b50565b6124ca816123d1565b81146124d557600080fd5b5056fea2646970667358221220f350a2f4618ddcbfd06d6d4f59d532211ed3f23826af9d57c95ae4550996853764736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "changePauser(address)": {
        "params": {
          "newPauser": "Address of new pauser account."
        }
      },
      "changeReward(address,uint256)": {
        "params": {
          "newDelta": "New reward delta.",
          "token": "Changed token address."
        }
      },
      "constructor": {
        "params": {
          "_rewardToken": "Address of reward token contract."
        }
      },
      "lock(address,uint256)": {
        "params": {
          "amount": "Amount of stacking token.",
          "token": "Address of stacking token."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "price(address)": {
        "params": {
          "token": "Address of token."
        },
        "returns": {
          "_0": "Price of token."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "reward(address)": {
        "params": {
          "token": "Address of token."
        },
        "returns": {
          "_0": "Reward of token for sender."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unlock(address)": {
        "params": {
          "token": "Address of unstacking token."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "Locked(address,address,uint256)": {
        "notice": "An event thats emitted when a token is locked by an account."
      },
      "PauserChanged(address)": {
        "notice": "An event thats emitted when an pauser address changed."
      },
      "RewardChanged(address,uint256,uint256)": {
        "notice": "An event thats emitted when an token reward changed."
      },
      "Unlocked(address,address)": {
        "notice": "An event thats emitted when a token is unlocked by an account."
      }
    },
    "kind": "user",
    "methods": {
      "balances(address,address)": {
        "notice": "Balances of locked tokens for all accounts."
      },
      "changePauser(address)": {
        "notice": "Change pauser account."
      },
      "changeReward(address,uint256)": {
        "notice": "Change reward token delta."
      },
      "lock(address,uint256)": {
        "notice": "Stacking token."
      },
      "pause()": {
        "notice": "Triggers stopped state."
      },
      "pauser()": {
        "notice": "Address that can pause a contract."
      },
      "price(address)": {
        "notice": "Get current price of token."
      },
      "reward(address)": {
        "notice": "Get current reward of token for sender."
      },
      "rewardToken()": {
        "notice": "Address of reward token contract."
      },
      "rewards(address)": {
        "notice": "Reward configuration of locked tokens."
      },
      "unlock(address)": {
        "notice": "Unstacking token."
      },
      "unpause()": {
        "notice": "Returns to normal state."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 30,
        "contract": "contracts/Stacking.sol:Stacking",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1733,
        "contract": "contracts/Stacking.sol:Stacking",
        "label": "_paused",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 11023,
        "contract": "contracts/Stacking.sol:Stacking",
        "label": "pauser",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 6632,
        "contract": "contracts/Stacking.sol:Stacking",
        "label": "rewardToken",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(ERC20)834"
      },
      {
        "astId": 6644,
        "contract": "contracts/Stacking.sol:Stacking",
        "label": "rewards",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_struct(Reward)6639_storage)"
      },
      {
        "astId": 6656,
        "contract": "contracts/Stacking.sol:Stacking",
        "label": "balances",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_mapping(t_address,t_struct(Balance)6649_storage))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ERC20)834": {
        "encoding": "inplace",
        "label": "contract ERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_struct(Balance)6649_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => struct Stacking.Balance))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(Balance)6649_storage)"
      },
      "t_mapping(t_address,t_struct(Balance)6649_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Stacking.Balance)",
        "numberOfBytes": "32",
        "value": "t_struct(Balance)6649_storage"
      },
      "t_mapping(t_address,t_struct(Reward)6639_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Stacking.Reward)",
        "numberOfBytes": "32",
        "value": "t_struct(Reward)6639_storage"
      },
      "t_struct(Balance)6649_storage": {
        "encoding": "inplace",
        "label": "struct Stacking.Balance",
        "members": [
          {
            "astId": 6646,
            "contract": "contracts/Stacking.sol:Stacking",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6648,
            "contract": "contracts/Stacking.sol:Stacking",
            "label": "cost",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Reward)6639_storage": {
        "encoding": "inplace",
        "label": "struct Stacking.Reward",
        "members": [
          {
            "astId": 6634,
            "contract": "contracts/Stacking.sol:Stacking",
            "label": "delta",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6636,
            "contract": "contracts/Stacking.sol:Stacking",
            "label": "blockAt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 6638,
            "contract": "contracts/Stacking.sol:Stacking",
            "label": "priceAt",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}