{
  "address": "0x86cd79DdBBd4c617907883c07d255D17bD5160b8",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_depositary",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_securityOracle",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "balance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositary",
      "outputs": [
        {
          "internalType": "contract IDepositaryOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "securityOracle",
      "outputs": [
        {
          "internalType": "contract ISecurityOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xbbb2bf76b41e7ec1f2e3aa9ef176fce22703e5112caa15ee5e2dcebd006ea333",
  "receipt": {
    "to": null,
    "from": "0x9403932015576D13Fb26B135ed7a35d5d95C18d4",
    "contractAddress": "0x86cd79DdBBd4c617907883c07d255D17bD5160b8",
    "transactionIndex": 0,
    "gasUsed": "680973",
    "logsBloom": "0x
    "blockHash": "0x81ea7baf0c61c0342741bf607fa72dc33de6043fe21d28e4ed2dd102cea73230",
    "transactionHash": "0xbbb2bf76b41e7ec1f2e3aa9ef176fce22703e5112caa15ee5e2dcebd006ea333",
    "logs": [],
    "blockNumber": 9311871,
    "cumulativeGasUsed": "680973",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xa0F782dA7D59C7a8CF6496f69fdF2b706e670e6C",
    "0xa968A34739E83eF9302d7d299D753e7574BBafA8"
  ],
  "solcInputHash": "f658676380788836205fc7664e9fc3b6",
  "metadata": "{\"compiler\":{\"version\":\"0.6.2+commit.bacdbe57\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_depositary\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_securityOracle\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositary\",\"outputs\":[{\"internalType\":\"contract IDepositaryOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"securityOracle\",\"outputs\":[{\"internalType\":\"contract ISecurityOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"constructor\":{\"params\":{\"_depositary\":\"Depositary address.\",\"_securityOracle\":\"Security oracle addresses.\"}}}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/oracle/BondDepositaryBalanceView.sol\":\"BondDepositaryBalanceView\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x9a9cf02622cd7a64261b10534fc3260449da25c98c9e96d1b4ae8110a20e5806\"},\"contracts/oracle/BondDepositaryBalanceView.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"./IDepositaryOracle.sol\\\";\\nimport \\\"./IDepositaryBalanceView.sol\\\";\\nimport \\\"./ISecurityOracle.sol\\\";\\n\\ncontract BondDepositaryBalanceView is IDepositaryBalanceView {\\n    using SafeMath for uint256;\\n\\n    /// @notice Depositary.\\n    IDepositaryOracle public depositary;\\n\\n    /// @notice Price oracles.\\n    ISecurityOracle public securityOracle;\\n\\n    /// @notice Decimals balance.\\n    uint256 override public decimals = 6;\\n\\n    /**\\n     * @param _depositary Depositary address.\\n     * @param _securityOracle Security oracle addresses.\\n     */\\n    constructor(address _depositary, address _securityOracle) public {\\n        depositary = IDepositaryOracle(_depositary);\\n        securityOracle = ISecurityOracle(_securityOracle);\\n    }\\n\\n    function balance() external override view returns(uint256) {\\n        uint256 result;\\n\\n        IDepositaryOracle.Security[] memory bonds = depositary.all();\\n        for (uint256 i = 0; i < bonds.length; i++) {                \\n            IDepositaryOracle.Security memory bond = bonds[i];\\n            if (bond.amount == 0) continue;\\n\\n            bytes memory value = securityOracle.get(bond.isin, \\\"nominalValue\\\");\\n            if (value.length == 0) continue;\\n\\n            (uint256 nominalValue) = abi.decode(value, (uint256));\\n            result = result.add(bond.amount.mul(nominalValue));\\n        }\\n\\n        return result;\\n    }\\n}\",\"keccak256\":\"0xbfeafa7d8987aef1b3ff233331367c2eed5b23a83526df2561aadf5a4bbe5e85\"},\"contracts/oracle/IDepositaryBalanceView.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\n/**\\n * @title The Depositary Balance interface.\\n */\\ninterface IDepositaryBalanceView {\\n    /**\\n     * @notice Get decimals balance.\\n     * @return Decimals balance.\\n     */\\n    function decimals() external view returns(uint256);\\n\\n    /**\\n     * @notice Get balance of depositary.\\n     * @return Balance of depositary.\\n     */\\n    function balance() external view returns(uint256);\\n}\",\"keccak256\":\"0x11d1471de23d556b3483ca4078407e2705ee52555d4624ad7e04d57aec662718\"},\"contracts/oracle/IDepositaryOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @title The Depositary Oracle interface.\\n */\\ninterface IDepositaryOracle {\\n    /// @notice Type of security on depositary.\\n    struct Security {\\n        // International securities identification number.\\n        string isin;\\n        // Amount.\\n        uint256 amount;\\n    }\\n\\n    /**\\n     * @notice Write a security amount to the storage mapping.\\n     * @param isin International securities identification number.\\n     * @param amount Amount of securities.\\n     */\\n    function put(string calldata isin, uint256 amount) external;\\n\\n    /**\\n     * @notice Get amount securities.\\n     * @param isin International securities identification number.\\n     * @return amount Amount of securities.\\n     */\\n    function get(string calldata isin) external view returns (Security memory);\\n\\n    /**\\n     * @notice Get all depositary securities.\\n     * @return All securities.\\n     */\\n    function all() external view returns (Security[] memory);\\n\\n    /**\\n     * @dev Emitted when the depositary update.\\n     */\\n    event Update(string isin, uint256 amount);\\n}\\n\",\"keccak256\":\"0x0e5a06ef905dca8d5c9cce6b31a09ae2254d6c7c1647291bfb1099efc24fc901\"},\"contracts/oracle/ISecurityOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\n/**\\n * @title The Security Oracle interface.\\n */\\ninterface ISecurityOracle {\\n    /**\\n     * @notice Put property value of security.\\n     * @param isin International securities identification number of security.\\n     * @param prop Property name of security.\\n     * @param value Property value.\\n     */\\n    function put(string calldata isin, string calldata prop, bytes calldata value) external;\\n\\n    /**\\n     * @notice Get property value of security.\\n     * @param isin International securities identification number of security.\\n     * @param prop Property name of security.\\n     * @return Property value of security.\\n     */\\n    function get(string calldata isin, string calldata prop) external view returns(bytes memory);\\n\\n    /**\\n     * @dev Emitted when the security property update.\\n     */\\n    event Update(string isin, string prop, bytes value);\\n}\\n\",\"keccak256\":\"0x4ed5ea849beafdfae7258127eaa2dd599908f0c11f000f85993ea10bc4cbfbff\"}},\"version\":1}",
  "bytecode": "0x6080604052600660025534801561001557600080fd5b50604051610b90380380610b90833981810160405261003791908101906100d4565b816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050610159565b6000815190506100ce81610142565b92915050565b600080604083850312156100e757600080fd5b60006100f5858286016100bf565b9250506020610106858286016100bf565b9150509250929050565b600061011b82610122565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b61014b81610110565b811461015657600080fd5b50565b610a28806101686000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80630e06037814610051578063313ce5671461006f578063b69ef8a81461008d578063de899f1e146100ab575b600080fd5b6100596100c9565b6040516100669190610796565b60405180910390f35b6100776100ee565b6040516100849190610841565b60405180910390f35b6100956100f4565b6040516100a29190610841565b60405180910390f35b6100b3610305565b6040516100c091906107b1565b60405180910390f35b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60025481565b60008060606000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166310c4e8b06040518163ffffffff1660e01b815260040160006040518083038186803b15801561016057600080fd5b505afa158015610174573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525061019d919081019061059f565b905060008090505b81518110156102fc576101b66103f0565b8282815181106101c257fe5b602002602001015190506000816020015114156101df57506102ef565b6060600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633e10510b83600001516040518263ffffffff1660e01b815260040161024091906107cc565b60006040518083038186803b15801561025857600080fd5b505afa15801561026c573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525061029591908101906105e0565b90506000815114156102a85750506102ef565b6000818060200190516102be9190810190610621565b90506102e96102da82856020015161032b90919063ffffffff16565b8761039b90919063ffffffff16565b95505050505b80806001019150506101a5565b50819250505090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008083141561033e5760009050610395565b600082840290508284828161034f57fe5b0414610390576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161038790610821565b60405180910390fd5b809150505b92915050565b6000808284019050838110156103e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103dd90610801565b60405180910390fd5b8091505092915050565b604051806040016040528060608152602001600081525090565b600082601f83011261041b57600080fd5b815161042e61042982610889565b61085c565b9150818183526020840193506020810190508360005b83811015610474578151860161045a8882610526565b845260208401935060208301925050600181019050610444565b5050505092915050565b600082601f83011261048f57600080fd5b81516104a261049d826108b1565b61085c565b915080825260208301602083018583830111156104be57600080fd5b6104c9838284610997565b50505092915050565b600082601f8301126104e357600080fd5b81516104f66104f1826108dd565b61085c565b9150808252602083016020830185838301111561051257600080fd5b61051d838284610997565b50505092915050565b60006040828403121561053857600080fd5b610542604061085c565b9050600082015167ffffffffffffffff81111561055e57600080fd5b61056a848285016104d2565b600083015250602061057e8482850161058a565b60208301525092915050565b600081519050610599816109db565b92915050565b6000602082840312156105b157600080fd5b600082015167ffffffffffffffff8111156105cb57600080fd5b6105d78482850161040a565b91505092915050565b6000602082840312156105f257600080fd5b600082015167ffffffffffffffff81111561060c57600080fd5b6106188482850161047e565b91505092915050565b60006020828403121561063357600080fd5b60006106418482850161058a565b91505092915050565b6106538161094f565b82525050565b61066281610973565b82525050565b600061067382610909565b61067d8185610914565b935061068d818560208601610997565b610696816109ca565b840191505092915050565b60006106ae600c83610914565b91507f6e6f6d696e616c56616c756500000000000000000000000000000000000000006000830152602082019050919050565b60006106ee601b83610914565b91507f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006000830152602082019050919050565b600061072e602183610914565b91507f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60008301527f77000000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b61079081610945565b82525050565b60006020820190506107ab600083018461064a565b92915050565b60006020820190506107c66000830184610659565b92915050565b600060408201905081810360008301526107e68184610668565b905081810360208301526107f9816106a1565b905092915050565b6000602082019050818103600083015261081a816106e1565b9050919050565b6000602082019050818103600083015261083a81610721565b9050919050565b60006020820190506108566000830184610787565b92915050565b6000604051905081810181811067ffffffffffffffff8211171561087f57600080fd5b8060405250919050565b600067ffffffffffffffff8211156108a057600080fd5b602082029050602081019050919050565b600067ffffffffffffffff8211156108c857600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff8211156108f457600080fd5b601f19601f8301169050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061095a82610961565b9050919050565b600061096c82610925565b9050919050565b600061097e82610985565b9050919050565b600061099082610925565b9050919050565b60005b838110156109b557808201518184015260208101905061099a565b838111156109c4576000848401525b50505050565b6000601f19601f8301169050919050565b6109e481610945565b81146109ef57600080fd5b5056fea264697066735822122060de2776666a6377972fb21a2357d21faff9b1796ecc0ff801736d216620b10864736f6c63430006020033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c80630e06037814610051578063313ce5671461006f578063b69ef8a81461008d578063de899f1e146100ab575b600080fd5b6100596100c9565b6040516100669190610796565b60405180910390f35b6100776100ee565b6040516100849190610841565b60405180910390f35b6100956100f4565b6040516100a29190610841565b60405180910390f35b6100b3610305565b6040516100c091906107b1565b60405180910390f35b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60025481565b60008060606000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166310c4e8b06040518163ffffffff1660e01b815260040160006040518083038186803b15801561016057600080fd5b505afa158015610174573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525061019d919081019061059f565b905060008090505b81518110156102fc576101b66103f0565b8282815181106101c257fe5b602002602001015190506000816020015114156101df57506102ef565b6060600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633e10510b83600001516040518263ffffffff1660e01b815260040161024091906107cc565b60006040518083038186803b15801561025857600080fd5b505afa15801561026c573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525061029591908101906105e0565b90506000815114156102a85750506102ef565b6000818060200190516102be9190810190610621565b90506102e96102da82856020015161032b90919063ffffffff16565b8761039b90919063ffffffff16565b95505050505b80806001019150506101a5565b50819250505090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008083141561033e5760009050610395565b600082840290508284828161034f57fe5b0414610390576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161038790610821565b60405180910390fd5b809150505b92915050565b6000808284019050838110156103e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103dd90610801565b60405180910390fd5b8091505092915050565b604051806040016040528060608152602001600081525090565b600082601f83011261041b57600080fd5b815161042e61042982610889565b61085c565b9150818183526020840193506020810190508360005b83811015610474578151860161045a8882610526565b845260208401935060208301925050600181019050610444565b5050505092915050565b600082601f83011261048f57600080fd5b81516104a261049d826108b1565b61085c565b915080825260208301602083018583830111156104be57600080fd5b6104c9838284610997565b50505092915050565b600082601f8301126104e357600080fd5b81516104f66104f1826108dd565b61085c565b9150808252602083016020830185838301111561051257600080fd5b61051d838284610997565b50505092915050565b60006040828403121561053857600080fd5b610542604061085c565b9050600082015167ffffffffffffffff81111561055e57600080fd5b61056a848285016104d2565b600083015250602061057e8482850161058a565b60208301525092915050565b600081519050610599816109db565b92915050565b6000602082840312156105b157600080fd5b600082015167ffffffffffffffff8111156105cb57600080fd5b6105d78482850161040a565b91505092915050565b6000602082840312156105f257600080fd5b600082015167ffffffffffffffff81111561060c57600080fd5b6106188482850161047e565b91505092915050565b60006020828403121561063357600080fd5b60006106418482850161058a565b91505092915050565b6106538161094f565b82525050565b61066281610973565b82525050565b600061067382610909565b61067d8185610914565b935061068d818560208601610997565b610696816109ca565b840191505092915050565b60006106ae600c83610914565b91507f6e6f6d696e616c56616c756500000000000000000000000000000000000000006000830152602082019050919050565b60006106ee601b83610914565b91507f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006000830152602082019050919050565b600061072e602183610914565b91507f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60008301527f77000000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b61079081610945565b82525050565b60006020820190506107ab600083018461064a565b92915050565b60006020820190506107c66000830184610659565b92915050565b600060408201905081810360008301526107e68184610668565b905081810360208301526107f9816106a1565b905092915050565b6000602082019050818103600083015261081a816106e1565b9050919050565b6000602082019050818103600083015261083a81610721565b9050919050565b60006020820190506108566000830184610787565b92915050565b6000604051905081810181811067ffffffffffffffff8211171561087f57600080fd5b8060405250919050565b600067ffffffffffffffff8211156108a057600080fd5b602082029050602081019050919050565b600067ffffffffffffffff8211156108c857600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff8211156108f457600080fd5b601f19601f8301169050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061095a82610961565b9050919050565b600061096c82610925565b9050919050565b600061097e82610985565b9050919050565b600061099082610925565b9050919050565b60005b838110156109b557808201518184015260208101905061099a565b838111156109c4576000848401525b50505050565b6000601f19601f8301169050919050565b6109e481610945565b81146109ef57600080fd5b5056fea264697066735822122060de2776666a6377972fb21a2357d21faff9b1796ecc0ff801736d216620b10864736f6c63430006020033",
  "devdoc": {
    "methods": {
      "constructor": {
        "params": {
          "_depositary": "Depositary address.",
          "_securityOracle": "Security oracle addresses."
        }
      }
    }
  },
  "userdoc": {
    "methods": {}
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7932,
        "contract": "contracts/oracle/BondDepositaryBalanceView.sol:BondDepositaryBalanceView",
        "label": "depositary",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IDepositaryOracle)8407"
      },
      {
        "astId": 7934,
        "contract": "contracts/oracle/BondDepositaryBalanceView.sol:BondDepositaryBalanceView",
        "label": "securityOracle",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(ISecurityOracle)8436"
      },
      {
        "astId": 7938,
        "contract": "contracts/oracle/BondDepositaryBalanceView.sol:BondDepositaryBalanceView",
        "label": "decimals",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_contract(IDepositaryOracle)8407": {
        "encoding": "inplace",
        "label": "contract IDepositaryOracle",
        "numberOfBytes": "20"
      },
      "t_contract(ISecurityOracle)8436": {
        "encoding": "inplace",
        "label": "contract ISecurityOracle",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}