{
  "address": "0x43519a111Cc6268C3f630836968Dd371683B1a3d",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "min",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "target",
          "type": "uint256"
        }
      ],
      "name": "ExpenditureChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newPauser",
          "type": "address"
        }
      ],
      "name": "PauserChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Payed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "min",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "target",
          "type": "uint256"
        }
      ],
      "name": "changeExpenditure",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newPauser",
          "type": "address"
        }
      ],
      "name": "changePauser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deficit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "deficitTo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "expenditures",
      "outputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "min",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "target",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRecipients",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pauser",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferETH",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x7faee0a819f0970d107ef3d830d5b1c2b84c870d19eb4aeb610f88cd104dee50",
  "receipt": {
    "to": null,
    "from": "0x9403932015576D13Fb26B135ed7a35d5d95C18d4",
    "contractAddress": "0x43519a111Cc6268C3f630836968Dd371683B1a3d",
    "transactionIndex": 0,
    "gasUsed": "1821879",
    "logsBloom": "0x
    "blockHash": "0xff458ef86a6d1623bb7a96f29543064b2c63dab1f91f2591efa15fc324f43d92",
    "transactionHash": "0x7faee0a819f0970d107ef3d830d5b1c2b84c870d19eb4aeb610f88cd104dee50",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 9311924,
        "transactionHash": "0x7faee0a819f0970d107ef3d830d5b1c2b84c870d19eb4aeb610f88cd104dee50",
        "address": "0x43519a111Cc6268C3f630836968Dd371683B1a3d",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000009403932015576d13fb26b135ed7a35d5d95c18d4"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xff458ef86a6d1623bb7a96f29543064b2c63dab1f91f2591efa15fc324f43d92"
      }
    ],
    "blockNumber": 9311924,
    "cumulativeGasUsed": "1821879",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "f658676380788836205fc7664e9fc3b6",
  "metadata": "{\"compiler\":{\"version\":\"0.6.2+commit.bacdbe57\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"}],\"name\":\"ExpenditureChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPauser\",\"type\":\"address\"}],\"name\":\"PauserChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Payed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"}],\"name\":\"changeExpenditure\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPauser\",\"type\":\"address\"}],\"name\":\"changePauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deficit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"deficitTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"expenditures\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRecipients\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauser\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferETH\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"methods\":{\"changeExpenditure(address,uint256,uint256)\":{\"params\":{\"min\":\"Minimal balance for payment.\",\"recipient\":\"Recipient address.\",\"target\":\"Target balance.\"}},\"changePauser(address)\":{\"params\":{\"newPauser\":\"Address of new pauser account.\"}},\"deficitTo(address)\":{\"params\":{\"recipient\":\"Target recipient.\"},\"returns\":{\"_0\":\"Balance deficit of recipient.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferETH(address,uint256)\":{\"params\":{\"amount\":\"Transfer amount.\",\"recipient\":\"Recipient.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}}},\"userdoc\":{\"methods\":{\"changeExpenditure(address,uint256,uint256)\":{\"notice\":\"Change expenditure item.\"},\"changePauser(address)\":{\"notice\":\"Change pauser account.\"},\"deficit()\":{\"notice\":\"Return summary balance deficit of all recipients.\"},\"deficitTo(address)\":{\"notice\":\"Return balance deficit of recipient.\"},\"getRecipients()\":{\"notice\":\"Return all recipients addresses.\"},\"pause()\":{\"notice\":\"Triggers stopped state.\"},\"pay()\":{\"notice\":\"Pay ETH to all recipients with balance deficit.\"},\"transferETH(address,uint256)\":{\"notice\":\"Transfer ETH to recipient.\"},\"unpause()\":{\"notice\":\"Returns to normal state.\"}}}},\"settings\":{\"compilationTarget\":{\"contracts/Budget.sol\":\"Budget\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/GSN/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xdb26cbf4d028490f49831a7865c2fe1b28db44b535ca8d343785a3b768aae183\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x4bd6402ca6b3419008c2b482aff54e66836e8cb4eba2680e42ac5884ae6424fc\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x9a9cf02622cd7a64261b10534fc3260449da25c98c9e96d1b4ae8110a20e5806\"},\"@openzeppelin/contracts/utils/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.0.0, only sets of type `address` (`AddressSet`) and `uint256`\\n * (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint256(_at(set._inner, index)));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0xb2a11b236f073662f5a196995863f51c11d006bf7c3de158b316dfa1506c4b79\"},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\ncontract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor () internal {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!_paused, \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(_paused, \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x5d1b1dcbc0396f44c1c8d554857f71e3187503bf1e54062bf9ec6782e21f3a08\"},\"contracts/Budget.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/EnumerableSet.sol\\\";\\nimport \\\"./utils/OwnablePausable.sol\\\";\\n\\ncontract Budget is OwnablePausable {\\n    using SafeMath for uint256;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    /// @dev Expenditure item.\\n    struct Expenditure {\\n        address recipient;\\n        uint256 min;\\n        uint256 target;\\n    }\\n\\n    /// @notice Expenditure item to address.\\n    mapping(address => Expenditure) public expenditures;\\n\\n    /// @dev Recipients addresses list.\\n    EnumerableSet.AddressSet internal recipients;\\n\\n    /// @notice An event emitted when expenditure item changed.\\n    event ExpenditureChanged(address recipient, uint256 min, uint256 target);\\n\\n    /// @notice An event emitted when expenditure item payed.\\n    event Payed(address recipient, uint256 amount);\\n\\n    receive() external payable {}\\n\\n    /**\\n     * @notice Change expenditure item.\\n     * @param recipient Recipient address.\\n     * @param min Minimal balance for payment.\\n     * @param target Target balance.\\n     */\\n    function changeExpenditure(\\n        address recipient,\\n        uint256 min,\\n        uint256 target\\n    ) external onlyOwner {\\n        require(min <= target, \\\"Budget::changeExpenditure: minimal balance should be less or equal target balance\\\");\\n\\n        expenditures[recipient] = Expenditure(recipient, min, target);\\n        if (target > 0) {\\n            recipients.add(recipient);\\n        } else {\\n            recipients.remove(recipient);\\n        }\\n        emit ExpenditureChanged(recipient, min, target);\\n    }\\n\\n    /**\\n     * @notice Transfer ETH to recipient.\\n     * @param recipient Recipient.\\n     * @param amount Transfer amount.\\n     */\\n    function transferETH(address payable recipient, uint256 amount) external onlyOwner returns (bool) {\\n        recipient.transfer(amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Return all recipients addresses.\\n     * @return Recipients addresses.\\n     */\\n    function getRecipients() external view returns (address[] memory) {\\n        address[] memory result = new address[](recipients.length());\\n\\n        for (uint256 i = 0; i < recipients.length(); i++) {\\n            result[i] = recipients.at(i);\\n        }\\n\\n        return result;\\n    }\\n\\n    /**\\n     * @notice Return balance deficit of recipient.\\n     * @param recipient Target recipient.\\n     * @return Balance deficit of recipient.\\n     */\\n    function deficitTo(address recipient) public view returns (uint256) {\\n        require(recipients.contains(recipient), \\\"Budget::deficitTo: recipient not in expenditure item\\\");\\n        if (recipient.balance > expenditures[recipient].min) return 0;\\n\\n        return expenditures[recipient].target.sub(recipient.balance);\\n    }\\n\\n    /**\\n     * @notice Return summary balance deficit of all recipients.\\n     * @return Summary balance deficit of all recipients.\\n     */\\n    function deficit() public view returns (uint256) {\\n        uint256 result;\\n\\n        for (uint256 i = 0; i < recipients.length(); i++) {\\n            result = result.add(deficitTo(recipients.at(i)));\\n        }\\n\\n        return result;\\n    }\\n\\n    /**\\n     * @notice Pay ETH to all recipients with balance deficit.\\n     */\\n    function pay() external {\\n        for (uint256 i = 0; i < recipients.length(); i++) {\\n            uint256 balance = address(this).balance;\\n            address recipient = recipients.at(i);\\n            uint256 amount = deficitTo(recipient);\\n            if (amount == 0 || balance < amount) continue;\\n\\n            payable(recipient).transfer(amount);\\n            emit Payed(recipient, amount);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x680cf0028fb01c6707be21f41ef582800ae2886ca9d6855661987ca26bd64ea3\"},\"contracts/utils/OwnablePausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\n\\ncontract OwnablePausable is Ownable, Pausable {\\n    /// @notice Address that can pause a contract.\\n    address public pauser;\\n\\n    /// @notice An event thats emitted when an pauser address changed.\\n    event PauserChanged(address newPauser);\\n\\n    constructor() internal {\\n        pauser = owner();\\n    }\\n\\n    /**\\n     * @notice Change pauser account.\\n     * @param newPauser Address of new pauser account.\\n     */\\n    function changePauser(address newPauser) external onlyOwner {\\n        pauser = newPauser;\\n        emit PauserChanged(pauser);\\n    }\\n\\n    /**\\n     * @notice Triggers stopped state.\\n     */\\n    function pause() public virtual {\\n        require(pauser == _msgSender() || owner() == _msgSender(), \\\"OwnablePausable::pause: only pauser and owner must pause contract\\\");\\n        _pause();\\n    }\\n\\n    /**\\n     * @notice Returns to normal state.\\n     */\\n    function unpause() public virtual {\\n        require(pauser == _msgSender() || owner() == _msgSender(), \\\"OwnablePausable::unpause: only pauser and owner must unpause contract\\\");\\n        _unpause();\\n    }\\n}\\n\",\"keccak256\":\"0x865125c578244d8e7240cfe61b8591c6bcc2b05f88ee64aee28fd1ba10f3f4df\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106100ec5760003560e01c80637b1a49091161008a578063d78d610b11610059578063d78d610b1461028f578063e21fe961146102ba578063e9cf66f1146102f9578063f2fde38b14610336576100f3565b80637b1a4909146101e55780638456cb59146102225780638da5cb5b146102395780639fd0506d14610264576100f3565b80633f4ba83a116100c65780633f4ba83a146101615780635426fa8a146101785780635c975abb146101a3578063715018a6146101ce576100f3565b80630d432021146100f85780631b9265b8146101215780632cd271e714610138576100f3565b366100f357005b600080fd5b34801561010457600080fd5b5061011f600480360361011a9190810190611625565b61035f565b005b34801561012d57600080fd5b5061013661057f565b005b34801561014457600080fd5b5061015f600480360361015a91908101906115c0565b61066f565b005b34801561016d57600080fd5b506101766107a2565b005b34801561018457600080fd5b5061018d610887565b60405161019a9190611d79565b60405180910390f35b3480156101af57600080fd5b506101b86108e6565b6040516101c59190611bfc565b60405180910390f35b3480156101da57600080fd5b506101e36108fc565b005b3480156101f157600080fd5b5061020c600480360361020791908101906115e9565b610a51565b6040516102199190611bfc565b60405180910390f35b34801561022e57600080fd5b50610237610b3a565b005b34801561024557600080fd5b5061024e610c1f565b60405161025b9190611b44565b60405180910390f35b34801561027057600080fd5b50610279610c48565b6040516102869190611b44565b60405180910390f35b34801561029b57600080fd5b506102a4610c6e565b6040516102b19190611bda565b60405180910390f35b3480156102c657600080fd5b506102e160048036036102dc91908101906115c0565b610d32565b6040516102f093929190611ba3565b60405180910390f35b34801561030557600080fd5b50610320600480360361031b91908101906115c0565b610d7c565b60405161032d9190611d79565b60405180910390f35b34801561034257600080fd5b5061035d600480360361035891908101906115c0565b610eaf565b005b610367611073565b73ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146103f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103ec90611d39565b60405180910390fd5b80821115610438576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161042f90611d59565b60405180910390fd5b60405180606001604052808473ffffffffffffffffffffffffffffffffffffffff16815260200183815260200182815250600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101556040820151816002015590505060008111156105295761052383600361107b90919063ffffffff16565b5061053f565b61053d8360036110ab90919063ffffffff16565b505b7f5c315648fddc891fd463694f00b02e1b8e3a1847790fd85887fb41f7c28fb1ca83838360405161057293929190611ba3565b60405180910390a1505050565b60008090505b61058f60036110db565b81101561066c57600047905060006105b18360036110f090919063ffffffff16565b905060006105be82610d7c565b905060008114806105ce57508083105b156105db5750505061065f565b8173ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610621573d6000803e3d6000fd5b507f7be9078cfa949e4b9e15888282e2a07a7fae4958503c18c81db93c5d413524978282604051610653929190611b7a565b60405180910390a15050505b8080600101915050610585565b50565b610677611073565b73ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610705576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106fc90611d39565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fb80482a293ca2e013eda8683c9bd7fc8347cfdaeea5ede58cba46df502c2a604600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040516107979190611b44565b60405180910390a150565b6107aa611073565b73ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16148061083e5750610808611073565b73ffffffffffffffffffffffffffffffffffffffff16610826610c1f565b73ffffffffffffffffffffffffffffffffffffffff16145b61087d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161087490611cb9565b60405180910390fd5b61088561110a565b565b60008060008090505b61089a60036110db565b8110156108de576108cf6108c06108bb8360036110f090919063ffffffff16565b610d7c565b836111b390919063ffffffff16565b91508080600101915050610890565b508091505090565b60008060149054906101000a900460ff16905090565b610904611073565b73ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610992576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161098990611d39565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000610a5b611073565b73ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610ae9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ae090611d39565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050158015610b2f573d6000803e3d6000fd5b506001905092915050565b610b42611073565b73ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480610bd65750610ba0611073565b73ffffffffffffffffffffffffffffffffffffffff16610bbe610c1f565b73ffffffffffffffffffffffffffffffffffffffff16145b610c15576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c0c90611c99565b60405180910390fd5b610c1d611208565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b606080610c7b60036110db565b604051908082528060200260200182016040528015610ca95781602001602082028038833980820191505090505b50905060008090505b610cbc60036110db565b811015610d2a57610cd78160036110f090919063ffffffff16565b828281518110610ce357fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508080600101915050610cb2565b508091505090565b60026020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154908060020154905083565b6000610d928260036112b390919063ffffffff16565b610dd1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dc890611cf9565b60405180910390fd5b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101548273ffffffffffffffffffffffffffffffffffffffff16311115610e3b5760009050610eaa565b610ea78273ffffffffffffffffffffffffffffffffffffffff1631600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201546112e390919063ffffffff16565b90505b919050565b610eb7611073565b73ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610f45576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f3c90611d39565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610fb5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fac90611c79565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600033905090565b60006110a3836000018373ffffffffffffffffffffffffffffffffffffffff1660001b61132d565b905092915050565b60006110d3836000018373ffffffffffffffffffffffffffffffffffffffff1660001b61139d565b905092915050565b60006110e982600001611485565b9050919050565b60006110ff8360000183611496565b60001c905092915050565b600060149054906101000a900460ff16611159576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161115090611c59565b60405180910390fd5b60008060146101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa61119c611073565b6040516111a99190611b5f565b60405180910390a1565b6000808284019050838110156111fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111f590611cd9565b60405180910390fd5b8091505092915050565b600060149054906101000a900460ff1615611258576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161124f90611d19565b60405180910390fd5b6001600060146101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861129c611073565b6040516112a99190611b5f565b60405180910390a1565b60006112db836000018373ffffffffffffffffffffffffffffffffffffffff1660001b611503565b905092915050565b600061132583836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611526565b905092915050565b60006113398383611503565b611392578260000182908060018154018082558091505060019003906000526020600020016000909190919091505582600001805490508360010160008481526020019081526020016000208190555060019050611397565b600090505b92915050565b6000808360010160008481526020019081526020016000205490506000811461147957600060018203905060006001866000018054905003905060008660000182815481106113e857fe5b906000526020600020015490508087600001848154811061140557fe5b906000526020600020018190555060018301876001016000838152602001908152602001600020819055508660000180548061143d57fe5b6001900381819060005260206000200160009055905586600101600087815260200190815260200160002060009055600194505050505061147f565b60009150505b92915050565b600081600001805490509050919050565b6000818360000180549050116114e1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114d890611c39565b60405180910390fd5b8260000182815481106114f057fe5b9060005260206000200154905092915050565b600080836001016000848152602001908152602001600020541415905092915050565b600083831115829061156e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115659190611c17565b60405180910390fd5b5060008385039050809150509392505050565b60008135905061159081611ebd565b92915050565b6000813590506115a581611ed4565b92915050565b6000813590506115ba81611eeb565b92915050565b6000602082840312156115d257600080fd5b60006115e084828501611581565b91505092915050565b600080604083850312156115fc57600080fd5b600061160a85828601611596565b925050602061161b858286016115ab565b9150509250929050565b60008060006060848603121561163a57600080fd5b600061164886828701611581565b9350506020611659868287016115ab565b925050604061166a868287016115ab565b9150509250925092565b6000611680838361169b565b60208301905092915050565b61169581611e43565b82525050565b6116a481611de9565b82525050565b6116b381611de9565b82525050565b60006116c482611da4565b6116ce8185611dc7565b93506116d983611d94565b8060005b8381101561170a5781516116f18882611674565b97506116fc83611dba565b9250506001810190506116dd565b5085935050505092915050565b61172081611e0d565b82525050565b600061173182611daf565b61173b8185611dd8565b935061174b818560208601611e79565b61175481611eac565b840191505092915050565b600061176c602283611dd8565b91507f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e60008301527f64730000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006117d2601483611dd8565b91507f5061757361626c653a206e6f74207061757365640000000000000000000000006000830152602082019050919050565b6000611812602683611dd8565b91507f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008301527f64647265737300000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000611878604183611dd8565b91507f4f776e61626c655061757361626c653a3a70617573653a206f6e6c792070617560008301527f73657220616e64206f776e6572206d75737420706175736520636f6e7472616360208301527f74000000000000000000000000000000000000000000000000000000000000006040830152606082019050919050565b6000611904604583611dd8565b91507f4f776e61626c655061757361626c653a3a756e70617573653a206f6e6c79207060008301527f617573657220616e64206f776e6572206d75737420756e706175736520636f6e60208301527f74726163740000000000000000000000000000000000000000000000000000006040830152606082019050919050565b6000611990601b83611dd8565b91507f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006000830152602082019050919050565b60006119d0603483611dd8565b91507f4275646765743a3a64656669636974546f3a20726563697069656e74206e6f7460008301527f20696e20657870656e646974757265206974656d0000000000000000000000006020830152604082019050919050565b6000611a36601083611dd8565b91507f5061757361626c653a20706175736564000000000000000000000000000000006000830152602082019050919050565b6000611a76602083611dd8565b91507f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726000830152602082019050919050565b6000611ab6605183611dd8565b91507f4275646765743a3a6368616e6765457870656e6469747572653a206d696e696d60008301527f616c2062616c616e63652073686f756c64206265206c657373206f722065717560208301527f616c207461726765742062616c616e63650000000000000000000000000000006040830152606082019050919050565b611b3e81611e39565b82525050565b6000602082019050611b5960008301846116aa565b92915050565b6000602082019050611b74600083018461168c565b92915050565b6000604082019050611b8f60008301856116aa565b611b9c6020830184611b35565b9392505050565b6000606082019050611bb860008301866116aa565b611bc56020830185611b35565b611bd26040830184611b35565b949350505050565b60006020820190508181036000830152611bf481846116b9565b905092915050565b6000602082019050611c116000830184611717565b92915050565b60006020820190508181036000830152611c318184611726565b905092915050565b60006020820190508181036000830152611c528161175f565b9050919050565b60006020820190508181036000830152611c72816117c5565b9050919050565b60006020820190508181036000830152611c9281611805565b9050919050565b60006020820190508181036000830152611cb28161186b565b9050919050565b60006020820190508181036000830152611cd2816118f7565b9050919050565b60006020820190508181036000830152611cf281611983565b9050919050565b60006020820190508181036000830152611d12816119c3565b9050919050565b60006020820190508181036000830152611d3281611a29565b9050919050565b60006020820190508181036000830152611d5281611a69565b9050919050565b60006020820190508181036000830152611d7281611aa9565b9050919050565b6000602082019050611d8e6000830184611b35565b92915050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b6000611df482611e19565b9050919050565b6000611e0682611e19565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000611e4e82611e55565b9050919050565b6000611e6082611e67565b9050919050565b6000611e7282611e19565b9050919050565b60005b83811015611e97578082015181840152602081019050611e7c565b83811115611ea6576000848401525b50505050565b6000601f19601f8301169050919050565b611ec681611de9565b8114611ed157600080fd5b50565b611edd81611dfb565b8114611ee857600080fd5b50565b611ef481611e39565b8114611eff57600080fd5b5056fea264697066735822122023b0c765d181ec1a61558c06f8a4202f0f51fb09f082b7a32c216ccc4376577c64736f6c63430006020033",
  "devdoc": {
    "methods": {
      "changeExpenditure(address,uint256,uint256)": {
        "params": {
          "min": "Minimal balance for payment.",
          "recipient": "Recipient address.",
          "target": "Target balance."
        }
      },
      "changePauser(address)": {
        "params": {
          "newPauser": "Address of new pauser account."
        }
      },
      "deficitTo(address)": {
        "params": {
          "recipient": "Target recipient."
        },
        "returns": {
          "_0": "Balance deficit of recipient."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferETH(address,uint256)": {
        "params": {
          "amount": "Transfer amount.",
          "recipient": "Recipient."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    }
  },
  "userdoc": {
    "methods": {
      "changeExpenditure(address,uint256,uint256)": {
        "notice": "Change expenditure item."
      },
      "changePauser(address)": {
        "notice": "Change pauser account."
      },
      "deficit()": {
        "notice": "Return summary balance deficit of all recipients."
      },
      "deficitTo(address)": {
        "notice": "Return balance deficit of recipient."
      },
      "getRecipients()": {
        "notice": "Return all recipients addresses."
      },
      "pause()": {
        "notice": "Triggers stopped state."
      },
      "pay()": {
        "notice": "Pay ETH to all recipients with balance deficit."
      },
      "transferETH(address,uint256)": {
        "notice": "Transfer ETH to recipient."
      },
      "unpause()": {
        "notice": "Returns to normal state."
      }
    }
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 29,
        "contract": "contracts/Budget.sol:Budget",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1661,
        "contract": "contracts/Budget.sol:Budget",
        "label": "_paused",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 10716,
        "contract": "contracts/Budget.sol:Budget",
        "label": "pauser",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 3079,
        "contract": "contracts/Budget.sol:Budget",
        "label": "expenditures",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_struct(Expenditure)3075_storage)"
      },
      {
        "astId": 3081,
        "contract": "contracts/Budget.sol:Budget",
        "label": "recipients",
        "offset": 0,
        "slot": "3",
        "type": "t_struct(AddressSet)1452_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_struct(Expenditure)3075_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Budget.Expenditure)",
        "numberOfBytes": "32",
        "value": "t_struct(Expenditure)3075_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)1452_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 1451,
            "contract": "contracts/Budget.sol:Budget",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)1277_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Expenditure)3075_storage": {
        "encoding": "inplace",
        "label": "struct Budget.Expenditure",
        "members": [
          {
            "astId": 3070,
            "contract": "contracts/Budget.sol:Budget",
            "label": "recipient",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 3072,
            "contract": "contracts/Budget.sol:Budget",
            "label": "min",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3074,
            "contract": "contracts/Budget.sol:Budget",
            "label": "target",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Set)1277_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 1272,
            "contract": "contracts/Budget.sol:Budget",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 1276,
            "contract": "contracts/Budget.sol:Budget",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}